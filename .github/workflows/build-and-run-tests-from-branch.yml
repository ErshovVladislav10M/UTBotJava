name: "[M] UTBot Java: build and run tests"

on:
  workflow_dispatch
  
env:
  GRADLE_BUILD_CMD: "gradle clean build --no-daemon"
  GRADLE_RUN_FRAMEWORK_TESTS_CMD: "gradle --no-daemon :utbot-framework:test --tests"
  KOTLIN_C_EXEC_STRATEGY: "-Dkotlin.compiler.execution.strategy=out-of-process"
  # {/<LABEL_NAME>/<LABEL_VALUE>}
  PROM_ADDITIONAL_LABELS: /service/github
  CADVISOR_VERSION: v0.36.0

jobs:
#   utbot-analytics:
#     runs-on: ubuntu-20.04
#     container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#     steps:
#       - uses: actions/checkout@v2

#       - name: Build and run test
#         run: |
#           cd utbot-analytics
#           GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
          
#   utbot-api:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-api
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#   utbot-cli:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-cli
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#   utbot-core:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-core
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#   utbot-framework-api:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-framework-api
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#   utbot-framework-lightweight:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle --no-daemon :utbot-framework:test \
#               --tests "org.utbot.examples.assemble.*" \
#               --tests "org.utbot.examples.manual.*" \
#               --tests "org.utbot.examples.modificators.*" \
#               --tests "org.utbot.engine.*" \
#               --tests "org.utbot.framework.*" \
#               --tests "org.utbot.sarif.*"
              
#         - name: Upload utbot-framework logs
#           if: ${{ always() }}
#           uses: actions/upload-artifact@v2
#           with:
#             name: framework_lightweight_logs
#             path: utbot-framework/logs/*
            
#         - name: Upload utbot-framework tests report artifacts if tests have failed
#           if: ${{ failure() }}
#           uses: actions/upload-artifact@v2
#           with:
#             name: framework_lightweight_tests_report
#             path: utbot-framework/build/reports/tests/test/*
              
  utbot-framework-collections:
    runs-on: ubuntu-latest
    container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
    steps:
      - name: Show current GITHUB_RUN_ID and HOSTNAME
        run: |
          echo Find your Prometheus metrics using label {instance=\"${GITHUB_RUN_ID}-${HOSTNAME}\"}
      - name: Prerequisites
        run: |
          apt-get update
          apt-get install -y -q --no-install-recommends \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
          apt-get -y -q install --no-install-recommends \
            docker-ce \
            docker-ce-cli \
            containerd.io \
            docker-compose-plugin
      - name: Run service containers on the background
        run: |
          CONFIG=/tmp/config.yml
          printf "process_names:\n- comm:\n  - java\n" > ${CONFIG}
          docker run -d --name process_exporter \
                        --publish=9256:9256 \
                        --privileged \
                        --volume=/proc:/host/proc \
                        --volume=${CONFIG}:/config \
                          ncabatoff/process-exporter \
                          --procfs /host/proc \
                          -config.path /config/config.yml
          docker run -d --name curl-process \
                        --net="host" \
                        --entrypoint=/bin/sh \
                            curlimages/curl:7.84.0 \
                            "-c" "while true; do curl localhost:9256/metrics | curl -u ${{ secrets.PUSHGATEWAY_USER }}:${{ secrets.PUSHGATEWAY_PASSWORD }} --data-binary @- https://${{ secrets.PUSHGATEWAY_HOSTNAME }}/pushgateway/metrics/job/pushgateway/instance/${GITHUB_RUN_ID}-${HOSTNAME}${{ env.PROM_ADDITIONAL_LABELS }} ; sleep 15; done"
          docker run -d --name cadvisor \
                        --volume=/:/rootfs:ro \
                        --volume=/var/run:/var/run:ro \
                        --volume=/sys:/sys:ro \
                        --volume=/var/lib/docker/:/var/lib/docker:ro \
                        --volume=/dev/disk/:/dev/disk:ro \
                        --publish=9280:8080 \
                        --privileged \
                        --device=/dev/kmsg \
                            gcr.io/cadvisor/cadvisor:${{ env.CADVISOR_VERSION }}
          docker run -d --name curl-container \
                        --net="host" \
                        --entrypoint=/bin/sh \
                            curlimages/curl:7.84.0 \
                            "-c" "while true; do curl localhost:9280/metrics | grep -v 'id=\"\/\(system\|user\).slice' | sed -r 's/(^.*} .*) ([0-9]*)/\1/' | curl -u ${{ secrets.PUSHGATEWAY_USER }}:${{ secrets.PUSHGATEWAY_PASSWORD }} --data-binary @- https://${{ secrets.PUSHGATEWAY_HOSTNAME }}/pushgateway/metrics/job/pushgateway/instance/${GITHUB_RUN_ID}-${HOSTNAME}${{ env.PROM_ADDITIONAL_LABELS }} ; sleep 15; done"
          docker run -d --name node_exporter \
                        --net="host" \
                        --pid="host" \
                        --volume="/:/host:ro,rslave" \
                            quay.io/prometheus/node-exporter:latest \
                            --path.rootfs=/host
          docker run -d --name curl-node \
                        --net="host" \
                        --entrypoint=/bin/sh \
                            curlimages/curl:7.84.0 \
                            "-c" "while true; do curl localhost:9100/metrics | curl -u ${{ secrets.PUSHGATEWAY_USER }}:${{ secrets.PUSHGATEWAY_PASSWORD }} --data-binary @- https://${{ secrets.PUSHGATEWAY_HOSTNAME }}/pushgateway/metrics/job/pushgateway/instance/${GITHUB_RUN_ID}-${HOSTNAME}${{ env.PROM_ADDITIONAL_LABELS }} ; sleep 15; done"

      - uses: actions/checkout@v2

      - name: Build and run test
        run: |
          GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle --no-daemon :utbot-framework:test \
            --tests "org.utbot.examples.collections.*"
      - name: Upload utbot-framework logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: framework_collections_logs
          path: utbot-framework/logs/*

      - name: Upload utbot-framework tests report artifacts if tests have failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: framework_collections_tests_report
          path: utbot-framework/build/reports/tests/test/*
          
#   utbot-framework-stream:
#     runs-on: ubuntu-20.04
#     container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#     steps:
#       - uses: actions/checkout@v2

#       - name: Build and run test
#         run: |
#           GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle --no-daemon :utbot-framework:test \
#             --tests "org.utbot.examples.stream.*"
#       - name: Upload utbot-framework logs
#         if: ${{ always() }}
#         uses: actions/upload-artifact@v2
#         with:
#           name: framework_stream_logs
#           path: utbot-framework/logs/*

#       - name: Upload utbot-framework tests report artifacts if tests have failed
#         if: ${{ failure() }}
#         uses: actions/upload-artifact@v2
#         with:
#           name: framework_stream_tests_report
#           path: utbot-framework/build/reports/tests/test/*
          
#   utbot-framework-examples:
#     runs-on: [self-hosted, blue]
#     container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#     steps:
#       - uses: actions/checkout@v2

#       - name: Build and run test
#         run: |
#           GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle --no-daemon :utbot-framework:test \
#             -PexcludeTests='org.utbot.examples.assemble.*,org.utbot.examples.manual.*,org.utbot.examples.modificators.*,org.utbot.examples.collections.*,org.utbot.examples.stream.*' \
#             --tests "org.utbot.examples.*"
#       - name: Upload utbot-framework logs
#         if: ${{ always() }}
#         uses: actions/upload-artifact@v2
#         with:
#           name: framework_examples_logs
#           path: utbot-framework/logs/*

#       - name: Upload utbot-framework tests report artifacts if tests have failed
#         if: ${{ failure() }}
#         uses: actions/upload-artifact@v2
#         with:
#           name: framework_examples_tests_report
#           path: utbot-framework/build/reports/tests/test/*
            
#   utbot-fuzzers:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-fuzzers
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#   utbot-gradle:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-gradle
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#   utbot-instrumentation-with-tests:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2        

#         - name: Build
#           run: |
#             cd utbot-instrumentation
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
#         - name: Run test
#           run: |
#             cd utbot-instrumentation-tests
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#         - name: Upload utbot-instrumentation tests report artifacts if tests have failed
#           if: ${{ failure() }}
#           uses: actions/upload-artifact@v2
#           with:
#             name: utbot_instrumentation_tests_report
#             path: utbot-instrumentation/build/reports/tests/test/*         
            
#   utbot-intellij:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-intellij
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#         - name: Upload utbot-intellij tests report artifacts if tests have failed
#           if: ${{ failure() }}
#           uses: actions/upload-artifact@v2
#           with:
#             name: utbot_intellij_tests_report
#             path: utbot-intellij/build/reports/tests/test/*
            
#   utbot-junit-contest:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-junit-contest
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
                        
#   utbot-sample:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2

#         - name: Build and run test
#           run: |
#             cd utbot-sample
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
            
#   utbot-summary-with-tests:
#       runs-on: ubuntu-20.04
#       container: unittestbot/java-env:java11-zulu-jdk-fx-gradle7.4.2-kotlinc1.7.0
#       steps:
#         - uses: actions/checkout@v2
        
#         - name: Build
#           run: |
#             cd utbot-summary
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
#         - name: Run test
#           run: |
#             cd utbot-summary-tests
#             GRADLE_OPTS=-Dkotlin.compiler.execution.strategy=out-of-process gradle build --no-daemon
