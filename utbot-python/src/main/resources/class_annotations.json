[
 {
  "className": "getpass.GetPassWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "gettext.NullTranslations",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_TranslationsReader | None)",
      "arg": "fp"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TranslationsReader",
      "arg": "fp"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "_parse",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "NullTranslations",
      "arg": "fallback"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "add_fallback",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "gettext",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "lgettext",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msgid1"
     },
     {
      "annotation": "str",
      "arg": "msgid2"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "ngettext",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msgid1"
     },
     {
      "annotation": "str",
      "arg": "msgid2"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "lngettext",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "info",
    "returns": "dict[str, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "charset",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Container[str] | None)",
      "arg": "names"
     }
    ],
    "className": "gettext.NullTranslations",
    "kwonlyargs": [],
    "name": "install",
    "returns": "None"
   }
  ]
 },
 {
  "className": "gettext.GNUTranslations",
  "fields": [
   {
    "annotation": "Final[int]",
    "className": "gettext.GNUTranslations",
    "name": "LE_MAGIC"
   },
   {
    "annotation": "Final[int]",
    "className": "gettext.GNUTranslations",
    "name": "BE_MAGIC"
   },
   {
    "annotation": "Final[str]",
    "className": "gettext.GNUTranslations",
    "name": "CONTEXT"
   },
   {
    "annotation": "Sequence[int]",
    "className": "gettext.GNUTranslations",
    "name": "VERSIONS"
   }
  ],
  "methods": []
 },
 {
  "className": "sched.Event",
  "fields": [
   {
    "annotation": "float",
    "className": "sched.Event",
    "name": "time"
   },
   {
    "annotation": "Any",
    "className": "sched.Event",
    "name": "priority"
   },
   {
    "annotation": "int",
    "className": "sched.Event",
    "name": "sequence"
   },
   {
    "annotation": "Callable[..., Any]",
    "className": "sched.Event",
    "name": "action"
   },
   {
    "annotation": "tuple[Any, ...]",
    "className": "sched.Event",
    "name": "argument"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "sched.Event",
    "name": "kwargs"
   }
  ],
  "methods": []
 },
 {
  "className": "sched.scheduler",
  "fields": [
   {
    "annotation": "Callable[[], float]",
    "className": "sched.scheduler",
    "name": "timefunc"
   },
   {
    "annotation": "Callable[[float], object]",
    "className": "sched.scheduler",
    "name": "delayfunc"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[], float]",
      "arg": "timefunc"
     },
     {
      "annotation": "Callable[[float], object]",
      "arg": "delayfunc"
     }
    ],
    "className": "sched.scheduler",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "time"
     },
     {
      "annotation": "Any",
      "arg": "priority"
     },
     {
      "annotation": "Callable[..., Any]",
      "arg": "action"
     },
     {
      "annotation": "tuple[Any, ...]",
      "arg": "argument"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "kwargs"
     }
    ],
    "className": "sched.scheduler",
    "kwonlyargs": [],
    "name": "enterabs",
    "returns": "Event"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "delay"
     },
     {
      "annotation": "Any",
      "arg": "priority"
     },
     {
      "annotation": "Callable[..., Any]",
      "arg": "action"
     },
     {
      "annotation": "tuple[Any, ...]",
      "arg": "argument"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "kwargs"
     }
    ],
    "className": "sched.scheduler",
    "kwonlyargs": [],
    "name": "enter",
    "returns": "Event"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "blocking"
     }
    ],
    "className": "sched.scheduler",
    "kwonlyargs": [],
    "name": "run",
    "returns": "(float | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Event",
      "arg": "event"
     }
    ],
    "className": "sched.scheduler",
    "kwonlyargs": [],
    "name": "cancel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sched.scheduler",
    "kwonlyargs": [],
    "name": "empty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sched.scheduler",
    "kwonlyargs": [],
    "name": "queue",
    "returns": "list[Event]"
   }
  ]
 },
 {
  "className": "_thread.LockType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "blocking"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     }
    ],
    "className": "_thread.LockType",
    "kwonlyargs": [],
    "name": "acquire",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_thread.LockType",
    "kwonlyargs": [],
    "name": "release",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_thread.LockType",
    "kwonlyargs": [],
    "name": "locked",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_thread.LockType",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "traceback"
     }
    ],
    "className": "_thread.LockType",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "_ast.AST",
  "fields": [
   {
    "annotation": "ClassVar[tuple[str, ...]]",
    "className": "_ast.AST",
    "name": "_attributes"
   },
   {
    "annotation": "ClassVar[tuple[str, ...]]",
    "className": "_ast.AST",
    "name": "_fields"
   },
   {
    "annotation": "int",
    "className": "_ast.AST",
    "name": "lineno"
   },
   {
    "annotation": "int",
    "className": "_ast.AST",
    "name": "col_offset"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_ast.AST",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "_ast.mod",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.type_ignore",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.TypeIgnore",
  "fields": [
   {
    "annotation": "str",
    "className": "_ast.TypeIgnore",
    "name": "tag"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.FunctionType",
  "fields": [
   {
    "annotation": "list[expr]",
    "className": "_ast.FunctionType",
    "name": "argtypes"
   },
   {
    "annotation": "expr",
    "className": "_ast.FunctionType",
    "name": "returns"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Module",
  "fields": [
   {
    "annotation": "list[stmt]",
    "className": "_ast.Module",
    "name": "body"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Interactive",
  "fields": [
   {
    "annotation": "list[stmt]",
    "className": "_ast.Interactive",
    "name": "body"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Expression",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Expression",
    "name": "body"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.stmt",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.FunctionDef",
  "fields": [
   {
    "annotation": "_identifier",
    "className": "_ast.FunctionDef",
    "name": "name"
   },
   {
    "annotation": "arguments",
    "className": "_ast.FunctionDef",
    "name": "args"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.FunctionDef",
    "name": "body"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.FunctionDef",
    "name": "decorator_list"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.FunctionDef",
    "name": "returns"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.AsyncFunctionDef",
  "fields": [
   {
    "annotation": "_identifier",
    "className": "_ast.AsyncFunctionDef",
    "name": "name"
   },
   {
    "annotation": "arguments",
    "className": "_ast.AsyncFunctionDef",
    "name": "args"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.AsyncFunctionDef",
    "name": "body"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.AsyncFunctionDef",
    "name": "decorator_list"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.AsyncFunctionDef",
    "name": "returns"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.ClassDef",
  "fields": [
   {
    "annotation": "_identifier",
    "className": "_ast.ClassDef",
    "name": "name"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.ClassDef",
    "name": "bases"
   },
   {
    "annotation": "list[keyword]",
    "className": "_ast.ClassDef",
    "name": "keywords"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.ClassDef",
    "name": "body"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.ClassDef",
    "name": "decorator_list"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Return",
  "fields": [
   {
    "annotation": "(expr | None)",
    "className": "_ast.Return",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Delete",
  "fields": [
   {
    "annotation": "list[expr]",
    "className": "_ast.Delete",
    "name": "targets"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Assign",
  "fields": [
   {
    "annotation": "list[expr]",
    "className": "_ast.Assign",
    "name": "targets"
   },
   {
    "annotation": "expr",
    "className": "_ast.Assign",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.AugAssign",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.AugAssign",
    "name": "target"
   },
   {
    "annotation": "operator",
    "className": "_ast.AugAssign",
    "name": "op"
   },
   {
    "annotation": "expr",
    "className": "_ast.AugAssign",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.AnnAssign",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.AnnAssign",
    "name": "target"
   },
   {
    "annotation": "expr",
    "className": "_ast.AnnAssign",
    "name": "annotation"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.AnnAssign",
    "name": "value"
   },
   {
    "annotation": "int",
    "className": "_ast.AnnAssign",
    "name": "simple"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.For",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.For",
    "name": "target"
   },
   {
    "annotation": "expr",
    "className": "_ast.For",
    "name": "iter"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.For",
    "name": "body"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.For",
    "name": "orelse"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.AsyncFor",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.AsyncFor",
    "name": "target"
   },
   {
    "annotation": "expr",
    "className": "_ast.AsyncFor",
    "name": "iter"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.AsyncFor",
    "name": "body"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.AsyncFor",
    "name": "orelse"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.While",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.While",
    "name": "test"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.While",
    "name": "body"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.While",
    "name": "orelse"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.If",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.If",
    "name": "test"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.If",
    "name": "body"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.If",
    "name": "orelse"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.With",
  "fields": [
   {
    "annotation": "list[withitem]",
    "className": "_ast.With",
    "name": "items"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.With",
    "name": "body"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.AsyncWith",
  "fields": [
   {
    "annotation": "list[withitem]",
    "className": "_ast.AsyncWith",
    "name": "items"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.AsyncWith",
    "name": "body"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Raise",
  "fields": [
   {
    "annotation": "(expr | None)",
    "className": "_ast.Raise",
    "name": "exc"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.Raise",
    "name": "cause"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Try",
  "fields": [
   {
    "annotation": "list[stmt]",
    "className": "_ast.Try",
    "name": "body"
   },
   {
    "annotation": "list[ExceptHandler]",
    "className": "_ast.Try",
    "name": "handlers"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.Try",
    "name": "orelse"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.Try",
    "name": "finalbody"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Assert",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Assert",
    "name": "test"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.Assert",
    "name": "msg"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Import",
  "fields": [
   {
    "annotation": "list[alias]",
    "className": "_ast.Import",
    "name": "names"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.ImportFrom",
  "fields": [
   {
    "annotation": "(_identifier | None)",
    "className": "_ast.ImportFrom",
    "name": "module"
   },
   {
    "annotation": "list[alias]",
    "className": "_ast.ImportFrom",
    "name": "names"
   },
   {
    "annotation": "int",
    "className": "_ast.ImportFrom",
    "name": "level"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Global",
  "fields": [
   {
    "annotation": "list[_identifier]",
    "className": "_ast.Global",
    "name": "names"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Nonlocal",
  "fields": [
   {
    "annotation": "list[_identifier]",
    "className": "_ast.Nonlocal",
    "name": "names"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Expr",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Expr",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Pass",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Break",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Continue",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.expr",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.BoolOp",
  "fields": [
   {
    "annotation": "boolop",
    "className": "_ast.BoolOp",
    "name": "op"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.BoolOp",
    "name": "values"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.BinOp",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.BinOp",
    "name": "left"
   },
   {
    "annotation": "operator",
    "className": "_ast.BinOp",
    "name": "op"
   },
   {
    "annotation": "expr",
    "className": "_ast.BinOp",
    "name": "right"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.UnaryOp",
  "fields": [
   {
    "annotation": "unaryop",
    "className": "_ast.UnaryOp",
    "name": "op"
   },
   {
    "annotation": "expr",
    "className": "_ast.UnaryOp",
    "name": "operand"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Lambda",
  "fields": [
   {
    "annotation": "arguments",
    "className": "_ast.Lambda",
    "name": "args"
   },
   {
    "annotation": "expr",
    "className": "_ast.Lambda",
    "name": "body"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.IfExp",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.IfExp",
    "name": "test"
   },
   {
    "annotation": "expr",
    "className": "_ast.IfExp",
    "name": "body"
   },
   {
    "annotation": "expr",
    "className": "_ast.IfExp",
    "name": "orelse"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Dict",
  "fields": [
   {
    "annotation": "list[expr | None]",
    "className": "_ast.Dict",
    "name": "keys"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.Dict",
    "name": "values"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Set",
  "fields": [
   {
    "annotation": "list[expr]",
    "className": "_ast.Set",
    "name": "elts"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.ListComp",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.ListComp",
    "name": "elt"
   },
   {
    "annotation": "list[comprehension]",
    "className": "_ast.ListComp",
    "name": "generators"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.SetComp",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.SetComp",
    "name": "elt"
   },
   {
    "annotation": "list[comprehension]",
    "className": "_ast.SetComp",
    "name": "generators"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.DictComp",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.DictComp",
    "name": "key"
   },
   {
    "annotation": "expr",
    "className": "_ast.DictComp",
    "name": "value"
   },
   {
    "annotation": "list[comprehension]",
    "className": "_ast.DictComp",
    "name": "generators"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.GeneratorExp",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.GeneratorExp",
    "name": "elt"
   },
   {
    "annotation": "list[comprehension]",
    "className": "_ast.GeneratorExp",
    "name": "generators"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Await",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Await",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Yield",
  "fields": [
   {
    "annotation": "(expr | None)",
    "className": "_ast.Yield",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.YieldFrom",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.YieldFrom",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Compare",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Compare",
    "name": "left"
   },
   {
    "annotation": "list[cmpop]",
    "className": "_ast.Compare",
    "name": "ops"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.Compare",
    "name": "comparators"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Call",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Call",
    "name": "func"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.Call",
    "name": "args"
   },
   {
    "annotation": "list[keyword]",
    "className": "_ast.Call",
    "name": "keywords"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.FormattedValue",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.FormattedValue",
    "name": "value"
   },
   {
    "annotation": "(int | None)",
    "className": "_ast.FormattedValue",
    "name": "conversion"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.FormattedValue",
    "name": "format_spec"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.JoinedStr",
  "fields": [
   {
    "annotation": "list[expr]",
    "className": "_ast.JoinedStr",
    "name": "values"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Constant",
  "fields": [
   {
    "annotation": "Any",
    "className": "_ast.Constant",
    "name": "value"
   },
   {
    "annotation": "(str | None)",
    "className": "_ast.Constant",
    "name": "kind"
   },
   {
    "annotation": "Any",
    "className": "_ast.Constant",
    "name": "s"
   },
   {
    "annotation": "complex",
    "className": "_ast.Constant",
    "name": "n"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.NamedExpr",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.NamedExpr",
    "name": "target"
   },
   {
    "annotation": "expr",
    "className": "_ast.NamedExpr",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Attribute",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Attribute",
    "name": "value"
   },
   {
    "annotation": "_identifier",
    "className": "_ast.Attribute",
    "name": "attr"
   },
   {
    "annotation": "expr_context",
    "className": "_ast.Attribute",
    "name": "ctx"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Slice",
  "fields": [
   {
    "annotation": "(expr | None)",
    "className": "_ast.Slice",
    "name": "lower"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.Slice",
    "name": "upper"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.Slice",
    "name": "step"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Subscript",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Subscript",
    "name": "value"
   },
   {
    "annotation": "_SliceT",
    "className": "_ast.Subscript",
    "name": "slice"
   },
   {
    "annotation": "expr_context",
    "className": "_ast.Subscript",
    "name": "ctx"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Starred",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Starred",
    "name": "value"
   },
   {
    "annotation": "expr_context",
    "className": "_ast.Starred",
    "name": "ctx"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Name",
  "fields": [
   {
    "annotation": "_identifier",
    "className": "_ast.Name",
    "name": "id"
   },
   {
    "annotation": "expr_context",
    "className": "_ast.Name",
    "name": "ctx"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.List",
  "fields": [
   {
    "annotation": "list[expr]",
    "className": "_ast.List",
    "name": "elts"
   },
   {
    "annotation": "expr_context",
    "className": "_ast.List",
    "name": "ctx"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Tuple",
  "fields": [
   {
    "annotation": "list[expr]",
    "className": "_ast.Tuple",
    "name": "elts"
   },
   {
    "annotation": "expr_context",
    "className": "_ast.Tuple",
    "name": "ctx"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.expr_context",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Del",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Load",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Store",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.boolop",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.And",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Or",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.operator",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Add",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.BitAnd",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.BitOr",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.BitXor",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Div",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.FloorDiv",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.LShift",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Mod",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Mult",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.MatMult",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Pow",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.RShift",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Sub",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.unaryop",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Invert",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Not",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.UAdd",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.USub",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.cmpop",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Eq",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Gt",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.GtE",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.In",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Is",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.IsNot",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.Lt",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.LtE",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.NotEq",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.NotIn",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.comprehension",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.comprehension",
    "name": "target"
   },
   {
    "annotation": "expr",
    "className": "_ast.comprehension",
    "name": "iter"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.comprehension",
    "name": "ifs"
   },
   {
    "annotation": "int",
    "className": "_ast.comprehension",
    "name": "is_async"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.excepthandler",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.ExceptHandler",
  "fields": [
   {
    "annotation": "(expr | None)",
    "className": "_ast.ExceptHandler",
    "name": "type"
   },
   {
    "annotation": "(_identifier | None)",
    "className": "_ast.ExceptHandler",
    "name": "name"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.ExceptHandler",
    "name": "body"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.arguments",
  "fields": [
   {
    "annotation": "list[arg]",
    "className": "_ast.arguments",
    "name": "args"
   },
   {
    "annotation": "(arg | None)",
    "className": "_ast.arguments",
    "name": "vararg"
   },
   {
    "annotation": "list[arg]",
    "className": "_ast.arguments",
    "name": "kwonlyargs"
   },
   {
    "annotation": "list[expr | None]",
    "className": "_ast.arguments",
    "name": "kw_defaults"
   },
   {
    "annotation": "(arg | None)",
    "className": "_ast.arguments",
    "name": "kwarg"
   },
   {
    "annotation": "list[expr]",
    "className": "_ast.arguments",
    "name": "defaults"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.arg",
  "fields": [
   {
    "annotation": "_identifier",
    "className": "_ast.arg",
    "name": "arg"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.arg",
    "name": "annotation"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.keyword",
  "fields": [
   {
    "annotation": "(_identifier | None)",
    "className": "_ast.keyword",
    "name": "arg"
   },
   {
    "annotation": "expr",
    "className": "_ast.keyword",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.alias",
  "fields": [
   {
    "annotation": "_identifier",
    "className": "_ast.alias",
    "name": "name"
   },
   {
    "annotation": "(_identifier | None)",
    "className": "_ast.alias",
    "name": "asname"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.withitem",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.withitem",
    "name": "context_expr"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.withitem",
    "name": "optional_vars"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.Match",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.Match",
    "name": "subject"
   },
   {
    "annotation": "list[match_case]",
    "className": "_ast.Match",
    "name": "cases"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.pattern",
  "fields": [],
  "methods": []
 },
 {
  "className": "_ast.match_case",
  "fields": [
   {
    "annotation": "_pattern",
    "className": "_ast.match_case",
    "name": "pattern"
   },
   {
    "annotation": "(expr | None)",
    "className": "_ast.match_case",
    "name": "guard"
   },
   {
    "annotation": "list[stmt]",
    "className": "_ast.match_case",
    "name": "body"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.MatchValue",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.MatchValue",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.MatchSingleton",
  "fields": [
   {
    "annotation": "Literal[True, False, None]",
    "className": "_ast.MatchSingleton",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.MatchSequence",
  "fields": [
   {
    "annotation": "list[pattern]",
    "className": "_ast.MatchSequence",
    "name": "patterns"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.MatchStar",
  "fields": [
   {
    "annotation": "(_identifier | None)",
    "className": "_ast.MatchStar",
    "name": "name"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.MatchMapping",
  "fields": [
   {
    "annotation": "list[expr]",
    "className": "_ast.MatchMapping",
    "name": "keys"
   },
   {
    "annotation": "list[pattern]",
    "className": "_ast.MatchMapping",
    "name": "patterns"
   },
   {
    "annotation": "(_identifier | None)",
    "className": "_ast.MatchMapping",
    "name": "rest"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.MatchClass",
  "fields": [
   {
    "annotation": "expr",
    "className": "_ast.MatchClass",
    "name": "cls"
   },
   {
    "annotation": "list[pattern]",
    "className": "_ast.MatchClass",
    "name": "patterns"
   },
   {
    "annotation": "list[_identifier]",
    "className": "_ast.MatchClass",
    "name": "kwd_attrs"
   },
   {
    "annotation": "list[pattern]",
    "className": "_ast.MatchClass",
    "name": "kwd_patterns"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.MatchAs",
  "fields": [
   {
    "annotation": "(_pattern | None)",
    "className": "_ast.MatchAs",
    "name": "pattern"
   },
   {
    "annotation": "(_identifier | None)",
    "className": "_ast.MatchAs",
    "name": "name"
   }
  ],
  "methods": []
 },
 {
  "className": "_ast.MatchOr",
  "fields": [
   {
    "annotation": "list[pattern]",
    "className": "_ast.MatchOr",
    "name": "patterns"
   }
  ],
  "methods": []
 },
 {
  "className": "_threading_local.local",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "_threading_local.local",
    "kwonlyargs": [],
    "name": "__getattribute__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "_threading_local.local",
    "kwonlyargs": [],
    "name": "__setattr__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "_threading_local.local",
    "kwonlyargs": [],
    "name": "__delattr__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "graphlib.TopologicalSorter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(SupportsItems[_T, Iterable[_T]] | None)",
      "arg": "graph"
     }
    ],
    "className": "graphlib.TopologicalSorter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "node"
     }
    ],
    "className": "graphlib.TopologicalSorter",
    "kwonlyargs": [],
    "name": "add",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "graphlib.TopologicalSorter",
    "kwonlyargs": [],
    "name": "prepare",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "graphlib.TopologicalSorter",
    "kwonlyargs": [],
    "name": "is_active",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "graphlib.TopologicalSorter",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "graphlib.TopologicalSorter",
    "kwonlyargs": [],
    "name": "done",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "graphlib.TopologicalSorter",
    "kwonlyargs": [],
    "name": "get_ready",
    "returns": "tuple[_T, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "graphlib.TopologicalSorter",
    "kwonlyargs": [],
    "name": "static_order",
    "returns": "Iterable[_T]"
   }
  ]
 },
 {
  "className": "graphlib.CycleError",
  "fields": [],
  "methods": []
 },
 {
  "className": "select.poll",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "select.poll",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fd"
     },
     {
      "annotation": "int",
      "arg": "eventmask"
     }
    ],
    "className": "select.poll",
    "kwonlyargs": [],
    "name": "register",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fd"
     },
     {
      "annotation": "int",
      "arg": "eventmask"
     }
    ],
    "className": "select.poll",
    "kwonlyargs": [],
    "name": "modify",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fd"
     }
    ],
    "className": "select.poll",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "select.poll",
    "kwonlyargs": [],
    "name": "poll",
    "returns": "list[tuple[int, int]]"
   }
  ]
 },
 {
  "className": "select.epoll",
  "fields": [
   {
    "annotation": "bool",
    "className": "select.epoll",
    "name": "closed"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "sizehint"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "__exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "__exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__exc_tb"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fd"
     },
     {
      "annotation": "int",
      "arg": "eventmask"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "register",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fd"
     },
     {
      "annotation": "int",
      "arg": "eventmask"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "modify",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fd"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     },
     {
      "annotation": "int",
      "arg": "maxevents"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "poll",
    "returns": "list[tuple[int, int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "__fd"
     }
    ],
    "className": "select.epoll",
    "kwonlyargs": [],
    "name": "fromfd",
    "returns": "epoll"
   }
  ]
 },
 {
  "className": "grp.struct_group",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "grp.struct_group",
    "kwonlyargs": [],
    "name": "gr_name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "grp.struct_group",
    "kwonlyargs": [],
    "name": "gr_passwd",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "grp.struct_group",
    "kwonlyargs": [],
    "name": "gr_gid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "grp.struct_group",
    "kwonlyargs": [],
    "name": "gr_mem",
    "returns": "list[str]"
   }
  ]
 },
 {
  "className": "selectors.SelectorKey",
  "fields": [
   {
    "annotation": "FileDescriptorLike",
    "className": "selectors.SelectorKey",
    "name": "fileobj"
   },
   {
    "annotation": "FileDescriptor",
    "className": "selectors.SelectorKey",
    "name": "fd"
   },
   {
    "annotation": "_EventMask",
    "className": "selectors.SelectorKey",
    "name": "events"
   },
   {
    "annotation": "Any",
    "className": "selectors.SelectorKey",
    "name": "data"
   }
  ],
  "methods": []
 },
 {
  "className": "selectors.BaseSelector",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     },
     {
      "annotation": "_EventMask",
      "arg": "events"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "register",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     },
     {
      "annotation": "_EventMask",
      "arg": "events"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "modify",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "select",
    "returns": "list[tuple[SelectorKey, _EventMask]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "get_key",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "get_map",
    "returns": "Mapping[FileDescriptorLike, SelectorKey]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.BaseSelector",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "selectors.SelectSelector",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     },
     {
      "annotation": "_EventMask",
      "arg": "events"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "selectors.SelectSelector",
    "kwonlyargs": [],
    "name": "register",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     }
    ],
    "className": "selectors.SelectSelector",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "selectors.SelectSelector",
    "kwonlyargs": [],
    "name": "select",
    "returns": "list[tuple[SelectorKey, _EventMask]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.SelectSelector",
    "kwonlyargs": [],
    "name": "get_map",
    "returns": "Mapping[FileDescriptorLike, SelectorKey]"
   }
  ]
 },
 {
  "className": "selectors.PollSelector",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     },
     {
      "annotation": "_EventMask",
      "arg": "events"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "selectors.PollSelector",
    "kwonlyargs": [],
    "name": "register",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     }
    ],
    "className": "selectors.PollSelector",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "selectors.PollSelector",
    "kwonlyargs": [],
    "name": "select",
    "returns": "list[tuple[SelectorKey, _EventMask]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.PollSelector",
    "kwonlyargs": [],
    "name": "get_map",
    "returns": "Mapping[FileDescriptorLike, SelectorKey]"
   }
  ]
 },
 {
  "className": "selectors.EpollSelector",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.EpollSelector",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     },
     {
      "annotation": "_EventMask",
      "arg": "events"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "selectors.EpollSelector",
    "kwonlyargs": [],
    "name": "register",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     }
    ],
    "className": "selectors.EpollSelector",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "selectors.EpollSelector",
    "kwonlyargs": [],
    "name": "select",
    "returns": "list[tuple[SelectorKey, _EventMask]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.EpollSelector",
    "kwonlyargs": [],
    "name": "get_map",
    "returns": "Mapping[FileDescriptorLike, SelectorKey]"
   }
  ]
 },
 {
  "className": "selectors.DevpollSelector",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.DevpollSelector",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     },
     {
      "annotation": "_EventMask",
      "arg": "events"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "selectors.DevpollSelector",
    "kwonlyargs": [],
    "name": "register",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     }
    ],
    "className": "selectors.DevpollSelector",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "selectors.DevpollSelector",
    "kwonlyargs": [],
    "name": "select",
    "returns": "list[tuple[SelectorKey, _EventMask]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.DevpollSelector",
    "kwonlyargs": [],
    "name": "get_map",
    "returns": "Mapping[FileDescriptorLike, SelectorKey]"
   }
  ]
 },
 {
  "className": "selectors.KqueueSelector",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.KqueueSelector",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     },
     {
      "annotation": "_EventMask",
      "arg": "events"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "selectors.KqueueSelector",
    "kwonlyargs": [],
    "name": "register",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     }
    ],
    "className": "selectors.KqueueSelector",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "selectors.KqueueSelector",
    "kwonlyargs": [],
    "name": "select",
    "returns": "list[tuple[SelectorKey, _EventMask]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.KqueueSelector",
    "kwonlyargs": [],
    "name": "get_map",
    "returns": "Mapping[FileDescriptorLike, SelectorKey]"
   }
  ]
 },
 {
  "className": "selectors.DefaultSelector",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     },
     {
      "annotation": "_EventMask",
      "arg": "events"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "selectors.DefaultSelector",
    "kwonlyargs": [],
    "name": "register",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fileobj"
     }
    ],
    "className": "selectors.DefaultSelector",
    "kwonlyargs": [],
    "name": "unregister",
    "returns": "SelectorKey"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "selectors.DefaultSelector",
    "kwonlyargs": [],
    "name": "select",
    "returns": "list[tuple[SelectorKey, _EventMask]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "selectors.DefaultSelector",
    "kwonlyargs": [],
    "name": "get_map",
    "returns": "Mapping[FileDescriptorLike, SelectorKey]"
   }
  ]
 },
 {
  "className": "gzip.BadGzipFile",
  "fields": [],
  "methods": []
 },
 {
  "className": "gzip.GzipFile",
  "fields": [
   {
    "annotation": "(FileIO | None)",
    "className": "gzip.GzipFile",
    "name": "myfileobj"
   },
   {
    "annotation": "Literal[1, 2]",
    "className": "gzip.GzipFile",
    "name": "mode"
   },
   {
    "annotation": "str",
    "className": "gzip.GzipFile",
    "name": "name"
   },
   {
    "annotation": "zlib._Compress",
    "className": "gzip.GzipFile",
    "name": "compress"
   },
   {
    "annotation": "(_ReadableFileobj | _WritableFileobj)",
    "className": "gzip.GzipFile",
    "name": "fileobj"
   },
   {
    "annotation": "int",
    "className": "gzip.GzipFile",
    "name": "crc"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "filename"
     },
     {
      "annotation": "_ReadBinaryMode",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     },
     {
      "annotation": "(_ReadableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "(float | None)",
      "arg": "mtime"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [
     {
      "annotation": "_ReadBinaryMode",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     },
     {
      "annotation": "(_ReadableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "(float | None)",
      "arg": "mtime"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "filename"
     },
     {
      "annotation": "_WriteBinaryMode",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     },
     {
      "annotation": "(_WritableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "(float | None)",
      "arg": "mtime"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [
     {
      "annotation": "_WriteBinaryMode",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     },
     {
      "annotation": "(_WritableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "(float | None)",
      "arg": "mtime"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "filename"
     },
     {
      "annotation": "(str | None)",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     },
     {
      "annotation": "(_ReadableFileobj | _WritableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "(float | None)",
      "arg": "mtime"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "filename",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "mtime",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "read1",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "peek",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "closed",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "zlib_mode"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "rewind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "seekable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "offset"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "gzip.GzipFile",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "shelve.Shelf",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "MutableMapping[bytes, bytes]",
      "arg": "dict"
     },
     {
      "annotation": "(int | None)",
      "arg": "protocol"
     },
     {
      "annotation": "bool",
      "arg": "writeback"
     },
     {
      "annotation": "str",
      "arg": "keyencoding"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_VT | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "_T",
      "arg": "default"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_VT | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "value"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "traceback"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shelve.Shelf",
    "kwonlyargs": [],
    "name": "sync",
    "returns": "None"
   }
  ]
 },
 {
  "className": "shelve.BsdDbShelf",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "shelve.BsdDbShelf",
    "kwonlyargs": [],
    "name": "set_location",
    "returns": "tuple[str, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shelve.BsdDbShelf",
    "kwonlyargs": [],
    "name": "next",
    "returns": "tuple[str, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shelve.BsdDbShelf",
    "kwonlyargs": [],
    "name": "previous",
    "returns": "tuple[str, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shelve.BsdDbShelf",
    "kwonlyargs": [],
    "name": "first",
    "returns": "tuple[str, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shelve.BsdDbShelf",
    "kwonlyargs": [],
    "name": "last",
    "returns": "tuple[str, _VT]"
   }
  ]
 },
 {
  "className": "shelve.DbfilenameShelf",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "_TFlags",
      "arg": "flag"
     },
     {
      "annotation": "(int | None)",
      "arg": "protocol"
     },
     {
      "annotation": "bool",
      "arg": "writeback"
     }
    ],
    "className": "shelve.DbfilenameShelf",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "_weakref.CallableProxyType",
  "fields": [
   {
    "annotation": "_C",
    "className": "_weakref.CallableProxyType",
    "name": "__call__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "attr"
     }
    ],
    "className": "_weakref.CallableProxyType",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "_weakref.ProxyType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "attr"
     }
    ],
    "className": "_weakref.ProxyType",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "_weakref.ReferenceType",
  "fields": [
   {
    "annotation": "Callable[[ReferenceType[_T]], Any]",
    "className": "_weakref.ReferenceType",
    "name": "__callback__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "o"
     },
     {
      "annotation": "(Callable[[ReferenceType[_T]], Any] | None)",
      "arg": "callback"
     }
    ],
    "className": "_weakref.ReferenceType",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_weakref.ReferenceType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "(_T | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_weakref.ReferenceType",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "shlex.shlex",
  "fields": [
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "commenters"
   },
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "wordchars"
   },
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "whitespace"
   },
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "escape"
   },
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "quotes"
   },
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "escapedquotes"
   },
   {
    "annotation": "bool",
    "className": "shlex.shlex",
    "name": "whitespace_split"
   },
   {
    "annotation": "(str | None)",
    "className": "shlex.shlex",
    "name": "infile"
   },
   {
    "annotation": "TextIO",
    "className": "shlex.shlex",
    "name": "instream"
   },
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "source"
   },
   {
    "annotation": "int",
    "className": "shlex.shlex",
    "name": "debug"
   },
   {
    "annotation": "int",
    "className": "shlex.shlex",
    "name": "lineno"
   },
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "token"
   },
   {
    "annotation": "str",
    "className": "shlex.shlex",
    "name": "eof"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | TextIO | None)",
      "arg": "instream"
     },
     {
      "annotation": "(str | None)",
      "arg": "infile"
     },
     {
      "annotation": "bool",
      "arg": "posix"
     },
     {
      "annotation": "(bool | str)",
      "arg": "punctuation_chars"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "get_token",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tok"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "push_token",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "read_token",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newfile"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "sourcehook",
    "returns": "tuple[str, TextIO]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | TextIO)",
      "arg": "newstream"
     },
     {
      "annotation": "(str | None)",
      "arg": "newfile"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "push_source",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "pop_source",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "infile"
     },
     {
      "annotation": "(int | None)",
      "arg": "lineno"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "error_leader",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "shlex.shlex",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "str"
   }
  ]
 },
 {
  "className": "_weakrefset.WeakSet",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Iterable[_T] | None)",
      "arg": "data"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "add",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "discard",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "item"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_T]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__ior__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "difference",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "difference_update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__isub__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "intersection",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "intersection_update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__iand__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "issubset",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "issuperset",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_S]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "symmetric_difference",
    "returns": "WeakSet[_S | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_S]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "WeakSet[_S | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "symmetric_difference_update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__ixor__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_S]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "union",
    "returns": "WeakSet[_S | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_S]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "WeakSet[_S | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "_weakrefset.WeakSet",
    "kwonlyargs": [],
    "name": "isdisjoint",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "hmac.HMAC",
  "fields": [
   {
    "annotation": "int",
    "className": "hmac.HMAC",
    "name": "digest_size"
   },
   {
    "annotation": "int",
    "className": "hmac.HMAC",
    "name": "block_size"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "hmac.HMAC",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "key"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "msg"
     },
     {
      "annotation": "_DigestMod",
      "arg": "digestmod"
     }
    ],
    "className": "hmac.HMAC",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "msg"
     }
    ],
    "className": "hmac.HMAC",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "hmac.HMAC",
    "kwonlyargs": [],
    "name": "digest",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "hmac.HMAC",
    "kwonlyargs": [],
    "name": "hexdigest",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "hmac.HMAC",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "HMAC"
   }
  ]
 },
 {
  "className": "shutil.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "shutil.SameFileError",
  "fields": [],
  "methods": []
 },
 {
  "className": "shutil.SpecialFileError",
  "fields": [],
  "methods": []
 },
 {
  "className": "shutil.ExecError",
  "fields": [],
  "methods": []
 },
 {
  "className": "shutil.ReadError",
  "fields": [],
  "methods": []
 },
 {
  "className": "shutil.RegistryError",
  "fields": [],
  "methods": []
 },
 {
  "className": "signal.Signals",
  "fields": [
   {
    "annotation": "int",
    "className": "signal.Signals",
    "name": "SIGABRT"
   },
   {
    "annotation": "int",
    "className": "signal.Signals",
    "name": "SIGEMT"
   },
   {
    "annotation": "int",
    "className": "signal.Signals",
    "name": "SIGFPE"
   },
   {
    "annotation": "int",
    "className": "signal.Signals",
    "name": "SIGILL"
   },
   {
    "annotation": "int",
    "className": "signal.Signals",
    "name": "SIGINFO"
   },
   {
    "annotation": "int",
    "className": "signal.Signals",
    "name": "SIGINT"
   },
   {
    "annotation": "int",
    "className": "signal.Signals",
    "name": "SIGSEGV"
   },
   {
    "annotation": "int",
    "className": "signal.Signals",
    "name": "SIGTERM"
   }
  ],
  "methods": []
 },
 {
  "className": "signal.Handlers",
  "fields": [
   {
    "annotation": "int",
    "className": "signal.Handlers",
    "name": "SIG_DFL"
   },
   {
    "annotation": "int",
    "className": "signal.Handlers",
    "name": "SIG_IGN"
   }
  ],
  "methods": []
 },
 {
  "className": "signal.ItimerError",
  "fields": [],
  "methods": []
 },
 {
  "className": "signal.Sigmasks",
  "fields": [
   {
    "annotation": "int",
    "className": "signal.Sigmasks",
    "name": "SIG_BLOCK"
   },
   {
    "annotation": "int",
    "className": "signal.Sigmasks",
    "name": "SIG_UNBLOCK"
   },
   {
    "annotation": "int",
    "className": "signal.Sigmasks",
    "name": "SIG_SETMASK"
   }
  ],
  "methods": []
 },
 {
  "className": "signal.struct_siginfo",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "signal.struct_siginfo",
    "kwonlyargs": [],
    "name": "si_signo",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "signal.struct_siginfo",
    "kwonlyargs": [],
    "name": "si_code",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "signal.struct_siginfo",
    "kwonlyargs": [],
    "name": "si_errno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "signal.struct_siginfo",
    "kwonlyargs": [],
    "name": "si_pid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "signal.struct_siginfo",
    "kwonlyargs": [],
    "name": "si_uid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "signal.struct_siginfo",
    "kwonlyargs": [],
    "name": "si_status",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "signal.struct_siginfo",
    "kwonlyargs": [],
    "name": "si_band",
    "returns": "int"
   }
  ]
 },
 {
  "className": "http.HTTPStatus",
  "fields": [
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "CONTINUE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "SWITCHING_PROTOCOLS"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "PROCESSING"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "OK"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "CREATED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "ACCEPTED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "NON_AUTHORITATIVE_INFORMATION"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "NO_CONTENT"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "RESET_CONTENT"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "PARTIAL_CONTENT"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "MULTI_STATUS"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "ALREADY_REPORTED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "IM_USED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "MULTIPLE_CHOICES"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "MOVED_PERMANENTLY"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "FOUND"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "SEE_OTHER"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "NOT_MODIFIED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "USE_PROXY"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "TEMPORARY_REDIRECT"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "PERMANENT_REDIRECT"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "BAD_REQUEST"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "UNAUTHORIZED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "PAYMENT_REQUIRED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "FORBIDDEN"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "NOT_FOUND"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "METHOD_NOT_ALLOWED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "NOT_ACCEPTABLE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "PROXY_AUTHENTICATION_REQUIRED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "REQUEST_TIMEOUT"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "CONFLICT"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "GONE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "LENGTH_REQUIRED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "PRECONDITION_FAILED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "REQUEST_ENTITY_TOO_LARGE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "REQUEST_URI_TOO_LONG"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "UNSUPPORTED_MEDIA_TYPE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "REQUESTED_RANGE_NOT_SATISFIABLE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "EXPECTATION_FAILED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "UNPROCESSABLE_ENTITY"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "LOCKED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "FAILED_DEPENDENCY"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "UPGRADE_REQUIRED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "PRECONDITION_REQUIRED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "TOO_MANY_REQUESTS"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "REQUEST_HEADER_FIELDS_TOO_LARGE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "INTERNAL_SERVER_ERROR"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "NOT_IMPLEMENTED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "BAD_GATEWAY"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "SERVICE_UNAVAILABLE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "GATEWAY_TIMEOUT"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "HTTP_VERSION_NOT_SUPPORTED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "VARIANT_ALSO_NEGOTIATES"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "INSUFFICIENT_STORAGE"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "LOOP_DETECTED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "NOT_EXTENDED"
   },
   {
    "annotation": "int",
    "className": "http.HTTPStatus",
    "name": "NETWORK_AUTHENTICATION_REQUIRED"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "http.HTTPStatus",
    "kwonlyargs": [],
    "name": "phrase",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "http.HTTPStatus",
    "kwonlyargs": [],
    "name": "description",
    "returns": "str"
   }
  ]
 },
 {
  "className": "smtpd.SMTPChannel",
  "fields": [
   {
    "annotation": "int",
    "className": "smtpd.SMTPChannel",
    "name": "COMMAND"
   },
   {
    "annotation": "int",
    "className": "smtpd.SMTPChannel",
    "name": "DATA"
   },
   {
    "annotation": "defaultdict[str, int]",
    "className": "smtpd.SMTPChannel",
    "name": "command_size_limits"
   },
   {
    "annotation": "SMTPServer",
    "className": "smtpd.SMTPChannel",
    "name": "smtp_server"
   },
   {
    "annotation": "socket.socket",
    "className": "smtpd.SMTPChannel",
    "name": "conn"
   },
   {
    "annotation": "Any",
    "className": "smtpd.SMTPChannel",
    "name": "addr"
   },
   {
    "annotation": "list[str]",
    "className": "smtpd.SMTPChannel",
    "name": "received_lines"
   },
   {
    "annotation": "int",
    "className": "smtpd.SMTPChannel",
    "name": "smtp_state"
   },
   {
    "annotation": "str",
    "className": "smtpd.SMTPChannel",
    "name": "seen_greeting"
   },
   {
    "annotation": "str",
    "className": "smtpd.SMTPChannel",
    "name": "mailfrom"
   },
   {
    "annotation": "list[str]",
    "className": "smtpd.SMTPChannel",
    "name": "rcpttos"
   },
   {
    "annotation": "str",
    "className": "smtpd.SMTPChannel",
    "name": "received_data"
   },
   {
    "annotation": "str",
    "className": "smtpd.SMTPChannel",
    "name": "fqdn"
   },
   {
    "annotation": "str",
    "className": "smtpd.SMTPChannel",
    "name": "peer"
   },
   {
    "annotation": "int",
    "className": "smtpd.SMTPChannel",
    "name": "command_size_limit"
   },
   {
    "annotation": "int",
    "className": "smtpd.SMTPChannel",
    "name": "data_size_limit"
   },
   {
    "annotation": "bool",
    "className": "smtpd.SMTPChannel",
    "name": "enable_SMTPUTF8"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "max_command_size_limit",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SMTPServer",
      "arg": "server"
     },
     {
      "annotation": "socket.socket",
      "arg": "conn"
     },
     {
      "annotation": "Any",
      "arg": "addr"
     },
     {
      "annotation": "int",
      "arg": "data_size_limit"
     },
     {
      "annotation": "(asyncore._maptype | None)",
      "arg": "map"
     },
     {
      "annotation": "bool",
      "arg": "enable_SMTPUTF8"
     },
     {
      "annotation": "bool",
      "arg": "decode_data"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "push",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "collect_incoming_data",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "found_terminator",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_HELO",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_NOOP",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_QUIT",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_MAIL",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_RCPT",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_RSET",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_DATA",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_EHLO",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_HELP",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_VRFY",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "smtpd.SMTPChannel",
    "kwonlyargs": [],
    "name": "smtp_EXPN",
    "returns": "None"
   }
  ]
 },
 {
  "className": "smtpd.SMTPServer",
  "fields": [
   {
    "annotation": "type[SMTPChannel]",
    "className": "smtpd.SMTPServer",
    "name": "channel_class"
   },
   {
    "annotation": "int",
    "className": "smtpd.SMTPServer",
    "name": "data_size_limit"
   },
   {
    "annotation": "bool",
    "className": "smtpd.SMTPServer",
    "name": "enable_SMTPUTF8"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Address",
      "arg": "localaddr"
     },
     {
      "annotation": "_Address",
      "arg": "remoteaddr"
     },
     {
      "annotation": "int",
      "arg": "data_size_limit"
     },
     {
      "annotation": "(asyncore._maptype | None)",
      "arg": "map"
     },
     {
      "annotation": "bool",
      "arg": "enable_SMTPUTF8"
     },
     {
      "annotation": "bool",
      "arg": "decode_data"
     }
    ],
    "className": "smtpd.SMTPServer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "socket.socket",
      "arg": "conn"
     },
     {
      "annotation": "Any",
      "arg": "addr"
     }
    ],
    "className": "smtpd.SMTPServer",
    "kwonlyargs": [],
    "name": "handle_accepted",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Address",
      "arg": "peer"
     },
     {
      "annotation": "str",
      "arg": "mailfrom"
     },
     {
      "annotation": "list[str]",
      "arg": "rcpttos"
     },
     {
      "annotation": "(bytes | str)",
      "arg": "data"
     }
    ],
    "className": "smtpd.SMTPServer",
    "kwonlyargs": [],
    "name": "process_message",
    "returns": "(str | None)"
   }
  ]
 },
 {
  "className": "smtpd.DebuggingServer",
  "fields": [],
  "methods": []
 },
 {
  "className": "smtpd.PureProxy",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Address",
      "arg": "peer"
     },
     {
      "annotation": "str",
      "arg": "mailfrom"
     },
     {
      "annotation": "list[str]",
      "arg": "rcpttos"
     },
     {
      "annotation": "(bytes | str)",
      "arg": "data"
     }
    ],
    "className": "smtpd.PureProxy",
    "kwonlyargs": [],
    "name": "process_message",
    "returns": "(str | None)"
   }
  ]
 },
 {
  "className": "smtpd.MailmanProxy",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Address",
      "arg": "peer"
     },
     {
      "annotation": "str",
      "arg": "mailfrom"
     },
     {
      "annotation": "list[str]",
      "arg": "rcpttos"
     },
     {
      "annotation": "(bytes | str)",
      "arg": "data"
     }
    ],
    "className": "smtpd.MailmanProxy",
    "kwonlyargs": [],
    "name": "process_message",
    "returns": "(str | None)"
   }
  ]
 },
 {
  "className": "abc.ABCMeta",
  "fields": [
   {
    "annotation": "frozenset[str]",
    "className": "abc.ABCMeta",
    "name": "__abstractmethods__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "tuple[type, ...]",
      "arg": "bases"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "namespace"
     }
    ],
    "className": "abc.ABCMeta",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "ABCMeta",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "instance"
     }
    ],
    "className": "abc.ABCMeta",
    "kwonlyargs": [],
    "name": "__instancecheck__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "ABCMeta",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "subclass"
     }
    ],
    "className": "abc.ABCMeta",
    "kwonlyargs": [],
    "name": "__subclasscheck__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "ABCMeta",
      "arg": "cls"
     },
     {
      "annotation": "(SupportsWrite[str] | None)",
      "arg": "file"
     }
    ],
    "className": "abc.ABCMeta",
    "kwonlyargs": [],
    "name": "_dump_registry",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "ABCMeta",
      "arg": "cls"
     },
     {
      "annotation": "type[_T]",
      "arg": "subclass"
     }
    ],
    "className": "abc.ABCMeta",
    "kwonlyargs": [],
    "name": "register",
    "returns": "type[_T]"
   }
  ]
 },
 {
  "className": "abc.abstractclassmethod",
  "fields": [
   {
    "annotation": "Literal[True]",
    "className": "abc.abstractclassmethod",
    "name": "__isabstractmethod__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "abstractclassmethod[_R_co]",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _R_co]",
      "arg": "callable"
     }
    ],
    "className": "abc.abstractclassmethod",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "abc.abstractstaticmethod",
  "fields": [
   {
    "annotation": "Literal[True]",
    "className": "abc.abstractstaticmethod",
    "name": "__isabstractmethod__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _R_co]",
      "arg": "callable"
     }
    ],
    "className": "abc.abstractstaticmethod",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "abc.abstractproperty",
  "fields": [
   {
    "annotation": "Literal[True]",
    "className": "abc.abstractproperty",
    "name": "__isabstractmethod__"
   }
  ],
  "methods": []
 },
 {
  "className": "abc.ABC",
  "fields": [],
  "methods": []
 },
 {
  "className": "imaplib.IMAP4",
  "fields": [
   {
    "annotation": "type[Exception]",
    "className": "imaplib.IMAP4",
    "name": "error"
   },
   {
    "annotation": "type[Exception]",
    "className": "imaplib.IMAP4",
    "name": "abort"
   },
   {
    "annotation": "type[Exception]",
    "className": "imaplib.IMAP4",
    "name": "readonly"
   },
   {
    "annotation": "Pattern[str]",
    "className": "imaplib.IMAP4",
    "name": "mustquote"
   },
   {
    "annotation": "int",
    "className": "imaplib.IMAP4",
    "name": "debug"
   },
   {
    "annotation": "str",
    "className": "imaplib.IMAP4",
    "name": "state"
   },
   {
    "annotation": "(str | None)",
    "className": "imaplib.IMAP4",
    "name": "literal"
   },
   {
    "annotation": "dict[bytes, _list[bytes] | None]",
    "className": "imaplib.IMAP4",
    "name": "tagged_commands"
   },
   {
    "annotation": "dict[str, _list[bytes | tuple[bytes, bytes]]]",
    "className": "imaplib.IMAP4",
    "name": "untagged_responses"
   },
   {
    "annotation": "str",
    "className": "imaplib.IMAP4",
    "name": "continuation_response"
   },
   {
    "annotation": "bool",
    "className": "imaplib.IMAP4",
    "name": "is_readonly"
   },
   {
    "annotation": "int",
    "className": "imaplib.IMAP4",
    "name": "tagnum"
   },
   {
    "annotation": "str",
    "className": "imaplib.IMAP4",
    "name": "tagpre"
   },
   {
    "annotation": "Pattern[str]",
    "className": "imaplib.IMAP4",
    "name": "tagre"
   },
   {
    "annotation": "bytes",
    "className": "imaplib.IMAP4",
    "name": "welcome"
   },
   {
    "annotation": "tuple[str, ...]",
    "className": "imaplib.IMAP4",
    "name": "capabilities"
   },
   {
    "annotation": "str",
    "className": "imaplib.IMAP4",
    "name": "PROTOCOL_VERSION"
   },
   {
    "annotation": "str",
    "className": "imaplib.IMAP4",
    "name": "host"
   },
   {
    "annotation": "int",
    "className": "imaplib.IMAP4",
    "name": "port"
   },
   {
    "annotation": "_socket",
    "className": "imaplib.IMAP4",
    "name": "sock"
   },
   {
    "annotation": "(IO[str] | IO[bytes])",
    "className": "imaplib.IMAP4",
    "name": "file"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "attr"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "send",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "shutdown",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "socket",
    "returns": "_socket"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "recent",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "code"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "response",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     },
     {
      "annotation": "str",
      "arg": "flags"
     },
     {
      "annotation": "str",
      "arg": "date_time"
     },
     {
      "annotation": "str",
      "arg": "message"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "append",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mechanism"
     },
     {
      "annotation": "Callable[[bytes], bytes | None]",
      "arg": "authobject"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "authenticate",
    "returns": "tuple[str, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "capability",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "check",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "close",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message_set"
     },
     {
      "annotation": "str",
      "arg": "new_mailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "create",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "delete",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     },
     {
      "annotation": "str",
      "arg": "who"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "deleteacl",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "capability"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "enable",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "t"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "v"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "expunge",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message_set"
     },
     {
      "annotation": "str",
      "arg": "message_parts"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "fetch",
    "returns": "tuple[str, _AnyResponseData]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "getacl",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     },
     {
      "annotation": "str",
      "arg": "entry"
     },
     {
      "annotation": "str",
      "arg": "attribute"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "getannotation",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "root"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "getquota",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "getquotaroot",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "directory"
     },
     {
      "annotation": "str",
      "arg": "pattern"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "list",
    "returns": "tuple[str, _AnyResponseData]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     },
     {
      "annotation": "str",
      "arg": "password"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "login",
    "returns": "tuple[Literal['OK'], _list[bytes]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     },
     {
      "annotation": "str",
      "arg": "password"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "login_cram_md5",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "logout",
    "returns": "tuple[str, _AnyResponseData]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "directory"
     },
     {
      "annotation": "str",
      "arg": "pattern"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "lsub",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "myrights",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "namespace",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "noop",
    "returns": "tuple[str, _list[bytes]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message_num"
     },
     {
      "annotation": "str",
      "arg": "message_part"
     },
     {
      "annotation": "str",
      "arg": "start"
     },
     {
      "annotation": "str",
      "arg": "length"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "partial",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "proxyauth",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "oldmailbox"
     },
     {
      "annotation": "str",
      "arg": "newmailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "rename",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "charset"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "search",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     },
     {
      "annotation": "bool",
      "arg": "readonly"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "select",
    "returns": "tuple[str, _list[bytes | None]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     },
     {
      "annotation": "str",
      "arg": "who"
     },
     {
      "annotation": "str",
      "arg": "what"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "setacl",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "setannotation",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "root"
     },
     {
      "annotation": "str",
      "arg": "limits"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "setquota",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sort_criteria"
     },
     {
      "annotation": "str",
      "arg": "charset"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "sort",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "ssl_context"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "starttls",
    "returns": "tuple[Literal['OK'], _list[None]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     },
     {
      "annotation": "str",
      "arg": "names"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "status",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message_set"
     },
     {
      "annotation": "str",
      "arg": "command"
     },
     {
      "annotation": "str",
      "arg": "flags"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "store",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "subscribe",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "threading_algorithm"
     },
     {
      "annotation": "str",
      "arg": "charset"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "thread",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "command"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "uid",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mailbox"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "unsubscribe",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "xatom",
    "returns": "_CommandResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4",
    "kwonlyargs": [],
    "name": "print_log",
    "returns": "None"
   }
  ]
 },
 {
  "className": "imaplib.IMAP4_SSL",
  "fields": [
   {
    "annotation": "str",
    "className": "imaplib.IMAP4_SSL",
    "name": "keyfile"
   },
   {
    "annotation": "str",
    "className": "imaplib.IMAP4_SSL",
    "name": "certfile"
   },
   {
    "annotation": "str",
    "className": "imaplib.IMAP4_SSL",
    "name": "host"
   },
   {
    "annotation": "int",
    "className": "imaplib.IMAP4_SSL",
    "name": "port"
   },
   {
    "annotation": "_socket",
    "className": "imaplib.IMAP4_SSL",
    "name": "sock"
   },
   {
    "annotation": "SSLSocket",
    "className": "imaplib.IMAP4_SSL",
    "name": "sslobj"
   },
   {
    "annotation": "IO[Any]",
    "className": "imaplib.IMAP4_SSL",
    "name": "file"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "imaplib.IMAP4_SSL",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4_SSL",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "imaplib.IMAP4_SSL",
    "kwonlyargs": [],
    "name": "send",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4_SSL",
    "kwonlyargs": [],
    "name": "shutdown",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4_SSL",
    "kwonlyargs": [],
    "name": "socket",
    "returns": "_socket"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4_SSL",
    "kwonlyargs": [],
    "name": "ssl",
    "returns": "SSLSocket"
   }
  ]
 },
 {
  "className": "imaplib.IMAP4_stream",
  "fields": [
   {
    "annotation": "str",
    "className": "imaplib.IMAP4_stream",
    "name": "command"
   },
   {
    "annotation": "str",
    "className": "imaplib.IMAP4_stream",
    "name": "host"
   },
   {
    "annotation": "int",
    "className": "imaplib.IMAP4_stream",
    "name": "port"
   },
   {
    "annotation": "_socket",
    "className": "imaplib.IMAP4_stream",
    "name": "sock"
   },
   {
    "annotation": "IO[Any]",
    "className": "imaplib.IMAP4_stream",
    "name": "file"
   },
   {
    "annotation": "subprocess.Popen[bytes]",
    "className": "imaplib.IMAP4_stream",
    "name": "process"
   },
   {
    "annotation": "IO[Any]",
    "className": "imaplib.IMAP4_stream",
    "name": "writefile"
   },
   {
    "annotation": "IO[Any]",
    "className": "imaplib.IMAP4_stream",
    "name": "readfile"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "command"
     }
    ],
    "className": "imaplib.IMAP4_stream",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "imaplib.IMAP4_stream",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4_stream",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "imaplib.IMAP4_stream",
    "kwonlyargs": [],
    "name": "send",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "imaplib.IMAP4_stream",
    "kwonlyargs": [],
    "name": "shutdown",
    "returns": "None"
   }
  ]
 },
 {
  "className": "smtplib.SMTPException",
  "fields": [],
  "methods": []
 },
 {
  "className": "smtplib.SMTPNotSupportedError",
  "fields": [],
  "methods": []
 },
 {
  "className": "smtplib.SMTPServerDisconnected",
  "fields": [],
  "methods": []
 },
 {
  "className": "smtplib.SMTPResponseException",
  "fields": [
   {
    "annotation": "int",
    "className": "smtplib.SMTPResponseException",
    "name": "smtp_code"
   },
   {
    "annotation": "(bytes | str)",
    "className": "smtplib.SMTPResponseException",
    "name": "smtp_error"
   },
   {
    "annotation": "(tuple[int, bytes | str] | tuple[int, bytes, str])",
    "className": "smtplib.SMTPResponseException",
    "name": "args"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "code"
     },
     {
      "annotation": "(bytes | str)",
      "arg": "msg"
     }
    ],
    "className": "smtplib.SMTPResponseException",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "smtplib.SMTPSenderRefused",
  "fields": [
   {
    "annotation": "int",
    "className": "smtplib.SMTPSenderRefused",
    "name": "smtp_code"
   },
   {
    "annotation": "bytes",
    "className": "smtplib.SMTPSenderRefused",
    "name": "smtp_error"
   },
   {
    "annotation": "str",
    "className": "smtplib.SMTPSenderRefused",
    "name": "sender"
   },
   {
    "annotation": "tuple[int, bytes, str]",
    "className": "smtplib.SMTPSenderRefused",
    "name": "args"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "code"
     },
     {
      "annotation": "bytes",
      "arg": "msg"
     },
     {
      "annotation": "str",
      "arg": "sender"
     }
    ],
    "className": "smtplib.SMTPSenderRefused",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "smtplib.SMTPRecipientsRefused",
  "fields": [
   {
    "annotation": "_SendErrs",
    "className": "smtplib.SMTPRecipientsRefused",
    "name": "recipients"
   },
   {
    "annotation": "tuple[_SendErrs]",
    "className": "smtplib.SMTPRecipientsRefused",
    "name": "args"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_SendErrs",
      "arg": "recipients"
     }
    ],
    "className": "smtplib.SMTPRecipientsRefused",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "smtplib.SMTPDataError",
  "fields": [],
  "methods": []
 },
 {
  "className": "smtplib.SMTPConnectError",
  "fields": [],
  "methods": []
 },
 {
  "className": "smtplib.SMTPHeloError",
  "fields": [],
  "methods": []
 },
 {
  "className": "smtplib.SMTPAuthenticationError",
  "fields": [],
  "methods": []
 },
 {
  "className": "smtplib.SMTP",
  "fields": [
   {
    "annotation": "int",
    "className": "smtplib.SMTP",
    "name": "debuglevel"
   },
   {
    "annotation": "(socket | None)",
    "className": "smtplib.SMTP",
    "name": "sock"
   },
   {
    "annotation": "(Any | None)",
    "className": "smtplib.SMTP",
    "name": "file"
   },
   {
    "annotation": "(bytes | None)",
    "className": "smtplib.SMTP",
    "name": "helo_resp"
   },
   {
    "annotation": "str",
    "className": "smtplib.SMTP",
    "name": "ehlo_msg"
   },
   {
    "annotation": "(bytes | None)",
    "className": "smtplib.SMTP",
    "name": "ehlo_resp"
   },
   {
    "annotation": "bool",
    "className": "smtplib.SMTP",
    "name": "does_esmtp"
   },
   {
    "annotation": "int",
    "className": "smtplib.SMTP",
    "name": "default_port"
   },
   {
    "annotation": "float",
    "className": "smtplib.SMTP",
    "name": "timeout"
   },
   {
    "annotation": "dict[str, str]",
    "className": "smtplib.SMTP",
    "name": "esmtp_features"
   },
   {
    "annotation": "str",
    "className": "smtplib.SMTP",
    "name": "command_encoding"
   },
   {
    "annotation": "(_SourceAddress | None)",
    "className": "smtplib.SMTP",
    "name": "source_address"
   },
   {
    "annotation": "str",
    "className": "smtplib.SMTP",
    "name": "local_hostname"
   },
   {
    "annotation": "str",
    "className": "smtplib.SMTP",
    "name": "user"
   },
   {
    "annotation": "str",
    "className": "smtplib.SMTP",
    "name": "password"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "(str | None)",
      "arg": "local_hostname"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     },
     {
      "annotation": "(_SourceAddress | None)",
      "arg": "source_address"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "debuglevel"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "set_debuglevel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "(_SourceAddress | None)",
      "arg": "source_address"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "connect",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bytes | str)",
      "arg": "s"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "send",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "str",
      "arg": "args"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "putcmd",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "getreply",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "str",
      "arg": "args"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "docmd",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "helo",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "ehlo",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "has_extn",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "args"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "help",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "rset",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "noop",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sender"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "options"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "mail",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "recip"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "options"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "rcpt",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bytes | str)",
      "arg": "msg"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "data",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "address"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "verify",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "address"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "expn",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "ehlo_or_helo_if_needed",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mechanism"
     },
     {
      "annotation": "_AuthObject",
      "arg": "authobject"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "initial_response_ok"
     }
    ],
    "name": "auth",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "challenge"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "auth_cram_md5",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "challenge"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "auth_cram_md5",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bytes | None)",
      "arg": "challenge"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "auth_plain",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bytes | None)",
      "arg": "challenge"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "auth_login",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     },
     {
      "annotation": "str",
      "arg": "password"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "initial_response_ok"
     }
    ],
    "name": "login",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "keyfile"
     },
     {
      "annotation": "(str | None)",
      "arg": "certfile"
     },
     {
      "annotation": "(SSLContext | None)",
      "arg": "context"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "starttls",
    "returns": "_Reply"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "from_addr"
     },
     {
      "annotation": "(str | Sequence[str])",
      "arg": "to_addrs"
     },
     {
      "annotation": "(bytes | str)",
      "arg": "msg"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "mail_options"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "rcpt_options"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "sendmail",
    "returns": "_SendErrs"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Message",
      "arg": "msg"
     },
     {
      "annotation": "(str | None)",
      "arg": "from_addr"
     },
     {
      "annotation": "(str | Sequence[str] | None)",
      "arg": "to_addrs"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "mail_options"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "rcpt_options"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "send_message",
    "returns": "_SendErrs"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "smtplib.SMTP",
    "kwonlyargs": [],
    "name": "quit",
    "returns": "_Reply"
   }
  ]
 },
 {
  "className": "smtplib.SMTP_SSL",
  "fields": [
   {
    "annotation": "int",
    "className": "smtplib.SMTP_SSL",
    "name": "default_port"
   },
   {
    "annotation": "(str | None)",
    "className": "smtplib.SMTP_SSL",
    "name": "keyfile"
   },
   {
    "annotation": "(str | None)",
    "className": "smtplib.SMTP_SSL",
    "name": "certfile"
   },
   {
    "annotation": "SSLContext",
    "className": "smtplib.SMTP_SSL",
    "name": "context"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "(str | None)",
      "arg": "local_hostname"
     },
     {
      "annotation": "(str | None)",
      "arg": "keyfile"
     },
     {
      "annotation": "(str | None)",
      "arg": "certfile"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     },
     {
      "annotation": "(_SourceAddress | None)",
      "arg": "source_address"
     },
     {
      "annotation": "(SSLContext | None)",
      "arg": "context"
     }
    ],
    "className": "smtplib.SMTP_SSL",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "smtplib.LMTP",
  "fields": [],
  "methods": []
 },
 {
  "className": "aifc.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "aifc.Aifc_read",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_File",
      "arg": "f"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "exc_tb"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[bytes]",
      "arg": "file"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "initfp",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getfp",
    "returns": "IO[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "rewind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getnchannels",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getnframes",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getsampwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getframerate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getcomptype",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getcompname",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getparams",
    "returns": "_aifc_params"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getmarkers",
    "returns": "(list[_Marker] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "id"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "getmark",
    "returns": "_Marker"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "pos"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "setpos",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nframes"
     }
    ],
    "className": "aifc.Aifc_read",
    "kwonlyargs": [],
    "name": "readframes",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "aifc.Aifc_write",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_File",
      "arg": "f"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "__del__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "exc_tb"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[bytes]",
      "arg": "file"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "initfp",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "aiff",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "aifc",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nchannels"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "setnchannels",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getnchannels",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "sampwidth"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "setsampwidth",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getsampwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "framerate"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "setframerate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getframerate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nframes"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "setnframes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getnframes",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "comptype"
     },
     {
      "annotation": "bytes",
      "arg": "compname"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "setcomptype",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getcomptype",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getcompname",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[int, int, int, int, bytes, bytes]",
      "arg": "params"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "setparams",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getparams",
    "returns": "_aifc_params"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "id"
     },
     {
      "annotation": "int",
      "arg": "pos"
     },
     {
      "annotation": "bytes",
      "arg": "name"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "setmark",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "id"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getmark",
    "returns": "_Marker"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "getmarkers",
    "returns": "(list[_Marker] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "writeframesraw",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "data"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "writeframes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "aifc.Aifc_write",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "sndhdr.SndHeaders",
  "fields": [
   {
    "annotation": "str",
    "className": "sndhdr.SndHeaders",
    "name": "filetype"
   },
   {
    "annotation": "int",
    "className": "sndhdr.SndHeaders",
    "name": "framerate"
   },
   {
    "annotation": "int",
    "className": "sndhdr.SndHeaders",
    "name": "nchannels"
   },
   {
    "annotation": "int",
    "className": "sndhdr.SndHeaders",
    "name": "nframes"
   },
   {
    "annotation": "(int | str)",
    "className": "sndhdr.SndHeaders",
    "name": "sampwidth"
   }
  ],
  "methods": []
 },
 {
  "className": "imp.NullImporter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrPath",
      "arg": "path"
     }
    ],
    "className": "imp.NullImporter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "fullname"
     }
    ],
    "className": "imp.NullImporter",
    "kwonlyargs": [],
    "name": "find_module",
    "returns": "None"
   }
  ]
 },
 {
  "className": "socket.AddressFamily",
  "fields": [
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_UNIX"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_INET"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_INET6"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_AAL5"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_ALG"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_APPLETALK"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_ASH"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_ATMPVC"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_ATMSVC"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_AX25"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_BLUETOOTH"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_BRIDGE"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_CAN"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_DECnet"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_ECONET"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_IPX"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_IRDA"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_KEY"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_LINK"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_LLC"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_NETBEUI"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_NETLINK"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_NETROM"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_PACKET"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_PPPOX"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_QIPCRTR"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_RDS"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_ROSE"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_ROUTE"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_SECURITY"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_SNA"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_SYSTEM"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_TIPC"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_UNSPEC"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_VSOCK"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_WANPIPE"
   },
   {
    "annotation": "int",
    "className": "socket.AddressFamily",
    "name": "AF_X25"
   }
  ],
  "methods": []
 },
 {
  "className": "socket.SocketKind",
  "fields": [
   {
    "annotation": "int",
    "className": "socket.SocketKind",
    "name": "SOCK_STREAM"
   },
   {
    "annotation": "int",
    "className": "socket.SocketKind",
    "name": "SOCK_DGRAM"
   },
   {
    "annotation": "int",
    "className": "socket.SocketKind",
    "name": "SOCK_RAW"
   },
   {
    "annotation": "int",
    "className": "socket.SocketKind",
    "name": "SOCK_RDM"
   },
   {
    "annotation": "int",
    "className": "socket.SocketKind",
    "name": "SOCK_SEQPACKET"
   },
   {
    "annotation": "int",
    "className": "socket.SocketKind",
    "name": "SOCK_CLOEXEC"
   },
   {
    "annotation": "int",
    "className": "socket.SocketKind",
    "name": "SOCK_NONBLOCK"
   }
  ],
  "methods": []
 },
 {
  "className": "socket.MsgFlag",
  "fields": [
   {
    "annotation": "int",
    "className": "socket.MsgFlag",
    "name": "MSG_CTRUNC"
   },
   {
    "annotation": "int",
    "className": "socket.MsgFlag",
    "name": "MSG_DONTROUTE"
   },
   {
    "annotation": "int",
    "className": "socket.MsgFlag",
    "name": "MSG_DONTWAIT"
   },
   {
    "annotation": "int",
    "className": "socket.MsgFlag",
    "name": "MSG_EOR"
   },
   {
    "annotation": "int",
    "className": "socket.MsgFlag",
    "name": "MSG_OOB"
   },
   {
    "annotation": "int",
    "className": "socket.MsgFlag",
    "name": "MSG_PEEK"
   },
   {
    "annotation": "int",
    "className": "socket.MsgFlag",
    "name": "MSG_TRUNC"
   },
   {
    "annotation": "int",
    "className": "socket.MsgFlag",
    "name": "MSG_WAITALL"
   }
  ],
  "methods": []
 },
 {
  "className": "socket.AddressInfo",
  "fields": [
   {
    "annotation": "int",
    "className": "socket.AddressInfo",
    "name": "AI_ADDRCONFIG"
   },
   {
    "annotation": "int",
    "className": "socket.AddressInfo",
    "name": "AI_ALL"
   },
   {
    "annotation": "int",
    "className": "socket.AddressInfo",
    "name": "AI_CANONNAME"
   },
   {
    "annotation": "int",
    "className": "socket.AddressInfo",
    "name": "AI_NUMERICHOST"
   },
   {
    "annotation": "int",
    "className": "socket.AddressInfo",
    "name": "AI_NUMERICSERV"
   },
   {
    "annotation": "int",
    "className": "socket.AddressInfo",
    "name": "AI_PASSIVE"
   },
   {
    "annotation": "int",
    "className": "socket.AddressInfo",
    "name": "AI_V4MAPPED"
   }
  ],
  "methods": []
 },
 {
  "className": "socket.socket",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(AddressFamily | int)",
      "arg": "family"
     },
     {
      "annotation": "(SocketKind | int)",
      "arg": "type"
     },
     {
      "annotation": "int",
      "arg": "proto"
     },
     {
      "annotation": "(int | None)",
      "arg": "fileno"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "dup",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "accept",
    "returns": "tuple[socket, _RetAddress]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal['r', 'w', 'rw', 'wr', '']",
      "arg": "mode"
     },
     {
      "annotation": "(int | None)",
      "arg": "buffering"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(str | None)",
      "arg": "errors"
     },
     {
      "annotation": "(str | None)",
      "arg": "newline"
     }
    ],
    "name": "makefile",
    "returns": "TextIO"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal['b', 'rb', 'br', 'wb', 'bw', 'rwb', 'rbw', 'wrb', 'wbr', 'brw', 'bwr']",
      "arg": "mode"
     },
     {
      "annotation": "(int | None)",
      "arg": "buffering"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(str | None)",
      "arg": "errors"
     },
     {
      "annotation": "(str | None)",
      "arg": "newline"
     }
    ],
    "name": "makefile",
    "returns": "BinaryIO"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BinaryIO",
      "arg": "file"
     },
     {
      "annotation": "int",
      "arg": "offset"
     },
     {
      "annotation": "(int | None)",
      "arg": "count"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "sendfile",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "family",
    "returns": "AddressFamily"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "type",
    "returns": "SocketKind"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "get_inheritable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "inheritable"
     }
    ],
    "className": "socket.socket",
    "kwonlyargs": [],
    "name": "set_inheritable",
    "returns": "None"
   }
  ]
 },
 {
  "className": "socket.SocketIO",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "socket",
      "arg": "sock"
     },
     {
      "annotation": "Literal['r', 'w', 'rw', 'rb', 'wb', 'rwb']",
      "arg": "mode"
     }
    ],
    "className": "socket.SocketIO",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "b"
     }
    ],
    "className": "socket.SocketIO",
    "kwonlyargs": [],
    "name": "readinto",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "b"
     }
    ],
    "className": "socket.SocketIO",
    "kwonlyargs": [],
    "name": "write",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socket.SocketIO",
    "kwonlyargs": [],
    "name": "name",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socket.SocketIO",
    "kwonlyargs": [],
    "name": "mode",
    "returns": "Literal['rb', 'wb', 'rwb']"
   }
  ]
 },
 {
  "className": "argparse.ArgumentError",
  "fields": [
   {
    "annotation": "(str | None)",
    "className": "argparse.ArgumentError",
    "name": "argument_name"
   },
   {
    "annotation": "str",
    "className": "argparse.ArgumentError",
    "name": "message"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Action | None)",
      "arg": "argument"
     },
     {
      "annotation": "str",
      "arg": "message"
     }
    ],
    "className": "argparse.ArgumentError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "argparse.ArgumentParser",
  "fields": [
   {
    "annotation": "str",
    "className": "argparse.ArgumentParser",
    "name": "prog"
   },
   {
    "annotation": "(str | None)",
    "className": "argparse.ArgumentParser",
    "name": "usage"
   },
   {
    "annotation": "(str | None)",
    "className": "argparse.ArgumentParser",
    "name": "epilog"
   },
   {
    "annotation": "_FormatterClass",
    "className": "argparse.ArgumentParser",
    "name": "formatter_class"
   },
   {
    "annotation": "(str | None)",
    "className": "argparse.ArgumentParser",
    "name": "fromfile_prefix_chars"
   },
   {
    "annotation": "bool",
    "className": "argparse.ArgumentParser",
    "name": "add_help"
   },
   {
    "annotation": "bool",
    "className": "argparse.ArgumentParser",
    "name": "allow_abbrev"
   },
   {
    "annotation": "_ArgumentGroup",
    "className": "argparse.ArgumentParser",
    "name": "_positionals"
   },
   {
    "annotation": "_ArgumentGroup",
    "className": "argparse.ArgumentParser",
    "name": "_optionals"
   },
   {
    "annotation": "(_ArgumentGroup | None)",
    "className": "argparse.ArgumentParser",
    "name": "_subparsers"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Sequence[str] | None)",
      "arg": "args"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "parse_args",
    "returns": "Namespace"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Sequence[str] | None)",
      "arg": "args"
     },
     {
      "annotation": "None",
      "arg": "namespace"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "parse_args",
    "returns": "Namespace"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Sequence[str] | None)",
      "arg": "args"
     },
     {
      "annotation": "_N",
      "arg": "namespace"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "parse_args",
    "returns": "_N"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [
     {
      "annotation": "None",
      "arg": "namespace"
     }
    ],
    "name": "parse_args",
    "returns": "Namespace"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [
     {
      "annotation": "_N",
      "arg": "namespace"
     }
    ],
    "name": "parse_args",
    "returns": "_N"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "file"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "print_usage",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "file"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "print_help",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "format_usage",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "format_help",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Sequence[str] | None)",
      "arg": "args"
     },
     {
      "annotation": "(Namespace | None)",
      "arg": "namespace"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "parse_known_args",
    "returns": "tuple[Namespace, list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg_line"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "convert_arg_line_to_args",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "status"
     },
     {
      "annotation": "(str | None)",
      "arg": "message"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "exit",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "error",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_get_optional_actions",
    "returns": "list[Action]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_get_positional_actions",
    "returns": "list[Action]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[str]",
      "arg": "arg_strings"
     },
     {
      "annotation": "Namespace",
      "arg": "namespace"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_parse_known_args",
    "returns": "tuple[Namespace, list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[str]",
      "arg": "arg_strings"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_read_args_from_files",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     },
     {
      "annotation": "str",
      "arg": "arg_strings_pattern"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_match_argument",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[Action]",
      "arg": "actions"
     },
     {
      "annotation": "str",
      "arg": "arg_strings_pattern"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_match_arguments_partial",
    "returns": "list[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg_string"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_parse_optional",
    "returns": "(tuple[Action | None, str, str | None] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option_string"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_get_option_tuples",
    "returns": "list[tuple[Action, str, str | None]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_get_nargs_pattern",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     },
     {
      "annotation": "list[str]",
      "arg": "arg_strings"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_get_values",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     },
     {
      "annotation": "str",
      "arg": "arg_string"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_get_value",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_check_value",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_get_formatter",
    "returns": "HelpFormatter"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "file"
     }
    ],
    "className": "argparse.ArgumentParser",
    "kwonlyargs": [],
    "name": "_print_message",
    "returns": "None"
   }
  ]
 },
 {
  "className": "argparse.HelpFormatter",
  "fields": [
   {
    "annotation": "str",
    "className": "argparse.HelpFormatter",
    "name": "_prog"
   },
   {
    "annotation": "int",
    "className": "argparse.HelpFormatter",
    "name": "_indent_increment"
   },
   {
    "annotation": "int",
    "className": "argparse.HelpFormatter",
    "name": "_max_help_position"
   },
   {
    "annotation": "int",
    "className": "argparse.HelpFormatter",
    "name": "_width"
   },
   {
    "annotation": "int",
    "className": "argparse.HelpFormatter",
    "name": "_current_indent"
   },
   {
    "annotation": "int",
    "className": "argparse.HelpFormatter",
    "name": "_level"
   },
   {
    "annotation": "int",
    "className": "argparse.HelpFormatter",
    "name": "_action_max_length"
   },
   {
    "annotation": "Any",
    "className": "argparse.HelpFormatter",
    "name": "_root_section"
   },
   {
    "annotation": "Any",
    "className": "argparse.HelpFormatter",
    "name": "_current_section"
   },
   {
    "annotation": "Pattern[str]",
    "className": "argparse.HelpFormatter",
    "name": "_whitespace_matcher"
   },
   {
    "annotation": "Pattern[str]",
    "className": "argparse.HelpFormatter",
    "name": "_long_break_matcher"
   },
   {
    "annotation": "type[Any]",
    "className": "argparse.HelpFormatter",
    "name": "_Section"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "prog"
     },
     {
      "annotation": "int",
      "arg": "indent_increment"
     },
     {
      "annotation": "int",
      "arg": "max_help_position"
     },
     {
      "annotation": "(int | None)",
      "arg": "width"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_indent",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_dedent",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., str]",
      "arg": "func"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "args"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_add_item",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "heading"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "start_section",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "end_section",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "text"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "add_text",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "usage"
     },
     {
      "annotation": "Iterable[Action]",
      "arg": "actions"
     },
     {
      "annotation": "Iterable[_ArgumentGroup]",
      "arg": "groups"
     },
     {
      "annotation": "(str | None)",
      "arg": "prefix"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "add_usage",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "add_argument",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Action]",
      "arg": "actions"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "add_arguments",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "format_help",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "part_strings"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_join_parts",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "usage"
     },
     {
      "annotation": "Iterable[Action]",
      "arg": "actions"
     },
     {
      "annotation": "Iterable[_ArgumentGroup]",
      "arg": "groups"
     },
     {
      "annotation": "(str | None)",
      "arg": "prefix"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_format_usage",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Action]",
      "arg": "actions"
     },
     {
      "annotation": "Iterable[_ArgumentGroup]",
      "arg": "groups"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_format_actions_usage",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_format_text",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_format_action",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_format_action_invocation",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     },
     {
      "annotation": "str",
      "arg": "default_metavar"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_metavar_formatter",
    "returns": "Callable[[int], tuple[str, ...]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     },
     {
      "annotation": "str",
      "arg": "default_metavar"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_format_args",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_expand_help",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_iter_indented_subactions",
    "returns": "Generator[Action, None, None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_split_lines",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "str",
      "arg": "indent"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_fill_text",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_get_help_string",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_get_default_metavar_for_optional",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Action",
      "arg": "action"
     }
    ],
    "className": "argparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "_get_default_metavar_for_positional",
    "returns": "str"
   }
  ]
 },
 {
  "className": "argparse.RawDescriptionHelpFormatter",
  "fields": [],
  "methods": []
 },
 {
  "className": "argparse.RawTextHelpFormatter",
  "fields": [],
  "methods": []
 },
 {
  "className": "argparse.ArgumentDefaultsHelpFormatter",
  "fields": [],
  "methods": []
 },
 {
  "className": "argparse.MetavarTypeHelpFormatter",
  "fields": [],
  "methods": []
 },
 {
  "className": "argparse.Action",
  "fields": [
   {
    "annotation": "Sequence[str]",
    "className": "argparse.Action",
    "name": "option_strings"
   },
   {
    "annotation": "str",
    "className": "argparse.Action",
    "name": "dest"
   },
   {
    "annotation": "(int | str | None)",
    "className": "argparse.Action",
    "name": "nargs"
   },
   {
    "annotation": "Any",
    "className": "argparse.Action",
    "name": "const"
   },
   {
    "annotation": "Any",
    "className": "argparse.Action",
    "name": "default"
   },
   {
    "annotation": "(Callable[[str], Any] | FileType | None)",
    "className": "argparse.Action",
    "name": "type"
   },
   {
    "annotation": "(Iterable[Any] | None)",
    "className": "argparse.Action",
    "name": "choices"
   },
   {
    "annotation": "bool",
    "className": "argparse.Action",
    "name": "required"
   },
   {
    "annotation": "(str | None)",
    "className": "argparse.Action",
    "name": "help"
   },
   {
    "annotation": "(str | tuple[str, ...] | None)",
    "className": "argparse.Action",
    "name": "metavar"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "option_strings"
     },
     {
      "annotation": "str",
      "arg": "dest"
     },
     {
      "annotation": "(int | str | None)",
      "arg": "nargs"
     },
     {
      "annotation": "(_T | None)",
      "arg": "const"
     },
     {
      "annotation": "(_T | str | None)",
      "arg": "default"
     },
     {
      "annotation": "(Callable[[str], _T] | FileType | None)",
      "arg": "type"
     },
     {
      "annotation": "(Iterable[_T] | None)",
      "arg": "choices"
     },
     {
      "annotation": "bool",
      "arg": "required"
     },
     {
      "annotation": "(str | None)",
      "arg": "help"
     },
     {
      "annotation": "(str | tuple[str, ...] | None)",
      "arg": "metavar"
     }
    ],
    "className": "argparse.Action",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ArgumentParser",
      "arg": "parser"
     },
     {
      "annotation": "Namespace",
      "arg": "namespace"
     },
     {
      "annotation": "(str | Sequence[Any] | None)",
      "arg": "values"
     },
     {
      "annotation": "(str | None)",
      "arg": "option_string"
     }
    ],
    "className": "argparse.Action",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "argparse.BooleanOptionalAction",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "option_strings"
     },
     {
      "annotation": "str",
      "arg": "dest"
     },
     {
      "annotation": "(_T | str | None)",
      "arg": "default"
     },
     {
      "annotation": "(Callable[[str], _T] | FileType | None)",
      "arg": "type"
     },
     {
      "annotation": "(Iterable[_T] | None)",
      "arg": "choices"
     },
     {
      "annotation": "bool",
      "arg": "required"
     },
     {
      "annotation": "(str | None)",
      "arg": "help"
     },
     {
      "annotation": "(str | tuple[str, ...] | None)",
      "arg": "metavar"
     }
    ],
    "className": "argparse.BooleanOptionalAction",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "argparse.Namespace",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "argparse.Namespace",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "argparse.Namespace",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "argparse.Namespace",
    "kwonlyargs": [],
    "name": "__setattr__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "argparse.Namespace",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "argparse.Namespace",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "argparse.FileType",
  "fields": [
   {
    "annotation": "str",
    "className": "argparse.FileType",
    "name": "_mode"
   },
   {
    "annotation": "int",
    "className": "argparse.FileType",
    "name": "_bufsize"
   },
   {
    "annotation": "(str | None)",
    "className": "argparse.FileType",
    "name": "_encoding"
   },
   {
    "annotation": "(str | None)",
    "className": "argparse.FileType",
    "name": "_errors"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "bufsize"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(str | None)",
      "arg": "errors"
     }
    ],
    "className": "argparse.FileType",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "string"
     }
    ],
    "className": "argparse.FileType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "IO[Any]"
   }
  ]
 },
 {
  "className": "argparse.ArgumentTypeError",
  "fields": [],
  "methods": []
 },
 {
  "className": "socketserver.BaseServer",
  "fields": [
   {
    "annotation": "int",
    "className": "socketserver.BaseServer",
    "name": "address_family"
   },
   {
    "annotation": "tuple[str, int]",
    "className": "socketserver.BaseServer",
    "name": "server_address"
   },
   {
    "annotation": "_socket",
    "className": "socketserver.BaseServer",
    "name": "socket"
   },
   {
    "annotation": "bool",
    "className": "socketserver.BaseServer",
    "name": "allow_reuse_address"
   },
   {
    "annotation": "int",
    "className": "socketserver.BaseServer",
    "name": "request_queue_size"
   },
   {
    "annotation": "int",
    "className": "socketserver.BaseServer",
    "name": "socket_type"
   },
   {
    "annotation": "(float | None)",
    "className": "socketserver.BaseServer",
    "name": "timeout"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "server_address"
     },
     {
      "annotation": "Callable[[Any, Any, Self], BaseRequestHandler]",
      "arg": "RequestHandlerClass"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "RequestHandlerClass",
    "returns": "Callable[[Any, Any, Self], BaseRequestHandler]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Callable[[Any, Any, Self], BaseRequestHandler]",
      "arg": "val"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "RequestHandlerClass",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "handle_request",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "poll_interval"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "serve_forever",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "shutdown",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "server_close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     },
     {
      "annotation": "_AddressType",
      "arg": "client_address"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "finish_request",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "get_request",
    "returns": "tuple[Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     },
     {
      "annotation": "_AddressType",
      "arg": "client_address"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "handle_error",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "handle_timeout",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     },
     {
      "annotation": "_AddressType",
      "arg": "client_address"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "process_request",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "server_activate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "server_bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     },
     {
      "annotation": "_AddressType",
      "arg": "client_address"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "verify_request",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_val"
     },
     {
      "annotation": "(types.TracebackType | None)",
      "arg": "exc_tb"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "service_actions",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "shutdown_request",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     }
    ],
    "className": "socketserver.BaseServer",
    "kwonlyargs": [],
    "name": "close_request",
    "returns": "None"
   }
  ]
 },
 {
  "className": "socketserver.TCPServer",
  "fields": [
   {
    "annotation": "bool",
    "className": "socketserver.TCPServer",
    "name": "allow_reuse_port"
   },
   {
    "annotation": "int",
    "className": "socketserver.TCPServer",
    "name": "request_queue_size"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "tuple[str, int]",
      "arg": "server_address"
     },
     {
      "annotation": "Callable[[Any, Any, Self], BaseRequestHandler]",
      "arg": "RequestHandlerClass"
     },
     {
      "annotation": "bool",
      "arg": "bind_and_activate"
     }
    ],
    "className": "socketserver.TCPServer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.TCPServer",
    "kwonlyargs": [],
    "name": "get_request",
    "returns": "tuple[_socket, Any]"
   }
  ]
 },
 {
  "className": "socketserver.UDPServer",
  "fields": [
   {
    "annotation": "ClassVar[int]",
    "className": "socketserver.UDPServer",
    "name": "max_packet_size"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.UDPServer",
    "kwonlyargs": [],
    "name": "get_request",
    "returns": "tuple[tuple[bytes, _socket], Any]"
   }
  ]
 },
 {
  "className": "socketserver.UnixStreamServer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(str | bytes)",
      "arg": "server_address"
     },
     {
      "annotation": "Callable[[Any, Any, Self], BaseRequestHandler]",
      "arg": "RequestHandlerClass"
     },
     {
      "annotation": "bool",
      "arg": "bind_and_activate"
     }
    ],
    "className": "socketserver.UnixStreamServer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "socketserver.UnixDatagramServer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(str | bytes)",
      "arg": "server_address"
     },
     {
      "annotation": "Callable[[Any, Any, Self], BaseRequestHandler]",
      "arg": "RequestHandlerClass"
     },
     {
      "annotation": "bool",
      "arg": "bind_and_activate"
     }
    ],
    "className": "socketserver.UnixDatagramServer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "socketserver.ForkingMixIn",
  "fields": [
   {
    "annotation": "(float | None)",
    "className": "socketserver.ForkingMixIn",
    "name": "timeout"
   },
   {
    "annotation": "(set[int] | None)",
    "className": "socketserver.ForkingMixIn",
    "name": "active_children"
   },
   {
    "annotation": "int",
    "className": "socketserver.ForkingMixIn",
    "name": "max_children"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.ForkingMixIn",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "blocking"
     }
    ],
    "name": "collect_children",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.ForkingMixIn",
    "kwonlyargs": [],
    "name": "handle_timeout",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.ForkingMixIn",
    "kwonlyargs": [],
    "name": "service_actions",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     },
     {
      "annotation": "_AddressType",
      "arg": "client_address"
     }
    ],
    "className": "socketserver.ForkingMixIn",
    "kwonlyargs": [],
    "name": "process_request",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.ForkingMixIn",
    "kwonlyargs": [],
    "name": "server_close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "socketserver.ThreadingMixIn",
  "fields": [
   {
    "annotation": "bool",
    "className": "socketserver.ThreadingMixIn",
    "name": "daemon_threads"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     },
     {
      "annotation": "_AddressType",
      "arg": "client_address"
     }
    ],
    "className": "socketserver.ThreadingMixIn",
    "kwonlyargs": [],
    "name": "process_request_thread",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     },
     {
      "annotation": "_AddressType",
      "arg": "client_address"
     }
    ],
    "className": "socketserver.ThreadingMixIn",
    "kwonlyargs": [],
    "name": "process_request",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.ThreadingMixIn",
    "kwonlyargs": [],
    "name": "server_close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "socketserver.ForkingTCPServer",
  "fields": [],
  "methods": []
 },
 {
  "className": "socketserver.ForkingUDPServer",
  "fields": [],
  "methods": []
 },
 {
  "className": "socketserver.ThreadingTCPServer",
  "fields": [],
  "methods": []
 },
 {
  "className": "socketserver.ThreadingUDPServer",
  "fields": [],
  "methods": []
 },
 {
  "className": "socketserver.ThreadingUnixStreamServer",
  "fields": [],
  "methods": []
 },
 {
  "className": "socketserver.ThreadingUnixDatagramServer",
  "fields": [],
  "methods": []
 },
 {
  "className": "socketserver.BaseRequestHandler",
  "fields": [
   {
    "annotation": "Any",
    "className": "socketserver.BaseRequestHandler",
    "name": "request"
   },
   {
    "annotation": "Any",
    "className": "socketserver.BaseRequestHandler",
    "name": "client_address"
   },
   {
    "annotation": "BaseServer",
    "className": "socketserver.BaseRequestHandler",
    "name": "server"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_RequestType",
      "arg": "request"
     },
     {
      "annotation": "_AddressType",
      "arg": "client_address"
     },
     {
      "annotation": "BaseServer",
      "arg": "server"
     }
    ],
    "className": "socketserver.BaseRequestHandler",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseRequestHandler",
    "kwonlyargs": [],
    "name": "setup",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseRequestHandler",
    "kwonlyargs": [],
    "name": "handle",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "socketserver.BaseRequestHandler",
    "kwonlyargs": [],
    "name": "finish",
    "returns": "None"
   }
  ]
 },
 {
  "className": "socketserver.StreamRequestHandler",
  "fields": [
   {
    "annotation": "ClassVar[int]",
    "className": "socketserver.StreamRequestHandler",
    "name": "rbufsize"
   },
   {
    "annotation": "ClassVar[int]",
    "className": "socketserver.StreamRequestHandler",
    "name": "wbufsize"
   },
   {
    "annotation": "ClassVar[float | None]",
    "className": "socketserver.StreamRequestHandler",
    "name": "timeout"
   },
   {
    "annotation": "ClassVar[bool]",
    "className": "socketserver.StreamRequestHandler",
    "name": "disable_nagle_algorithm"
   },
   {
    "annotation": "_socket",
    "className": "socketserver.StreamRequestHandler",
    "name": "connection"
   },
   {
    "annotation": "BinaryIO",
    "className": "socketserver.StreamRequestHandler",
    "name": "rfile"
   },
   {
    "annotation": "BinaryIO",
    "className": "socketserver.StreamRequestHandler",
    "name": "wfile"
   }
  ],
  "methods": []
 },
 {
  "className": "socketserver.DatagramRequestHandler",
  "fields": [
   {
    "annotation": "_socket",
    "className": "socketserver.DatagramRequestHandler",
    "name": "packet"
   },
   {
    "annotation": "_socket",
    "className": "socketserver.DatagramRequestHandler",
    "name": "socket"
   },
   {
    "annotation": "BinaryIO",
    "className": "socketserver.DatagramRequestHandler",
    "name": "rfile"
   },
   {
    "annotation": "BinaryIO",
    "className": "socketserver.DatagramRequestHandler",
    "name": "wfile"
   }
  ],
  "methods": []
 },
 {
  "className": "array.array",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "typecode",
    "returns": "_TypeCode"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "itemsize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "array[int]",
      "arg": "self"
     },
     {
      "annotation": "_IntTypeCode",
      "arg": "__typecode"
     },
     {
      "annotation": "(bytes | Iterable[_T])",
      "arg": "__initializer"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "array[float]",
      "arg": "self"
     },
     {
      "annotation": "_FloatTypeCode",
      "arg": "__typecode"
     },
     {
      "annotation": "(bytes | Iterable[_T])",
      "arg": "__initializer"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "array[str]",
      "arg": "self"
     },
     {
      "annotation": "_UnicodeTypeCode",
      "arg": "__typecode"
     },
     {
      "annotation": "(bytes | Iterable[_T])",
      "arg": "__initializer"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "typecode"
     },
     {
      "annotation": "(bytes | Iterable[_T])",
      "arg": "__initializer"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__v"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "buffer_info",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "byteswap",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__v"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__bb"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "extend",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__buffer"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "frombytes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BinaryIO",
      "arg": "__f"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "fromfile",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[_T]",
      "arg": "__list"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "fromlist",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__ustr"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "fromunicode",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__i"
     },
     {
      "annotation": "_T",
      "arg": "__v"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__i"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__v"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "reverse",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "tobytes",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BinaryIO",
      "arg": "__f"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "tofile",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "tolist",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "tounicode",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__key"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "array[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     },
     {
      "annotation": "_T",
      "arg": "__o"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     },
     {
      "annotation": "array[_T]",
      "arg": "__o"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(SupportsIndex | slice)",
      "arg": "__i"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "array[_T]",
      "arg": "__x"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "array[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "array[_T]",
      "arg": "__other"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "array[_T]",
      "arg": "__other"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "array[_T]",
      "arg": "__x"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__iadd__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__imul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "array[_T]",
      "arg": "__other"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "array[_T]",
      "arg": "__other"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "array[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "array[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__copy__",
    "returns": "array[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__unused"
     }
    ],
    "className": "array.array",
    "kwonlyargs": [],
    "name": "__deepcopy__",
    "returns": "array[_T]"
   }
  ]
 },
 {
  "className": "inspect.EndOfBlock",
  "fields": [],
  "methods": []
 },
 {
  "className": "inspect.BlockFinder",
  "fields": [
   {
    "annotation": "int",
    "className": "inspect.BlockFinder",
    "name": "indent"
   },
   {
    "annotation": "bool",
    "className": "inspect.BlockFinder",
    "name": "islambda"
   },
   {
    "annotation": "bool",
    "className": "inspect.BlockFinder",
    "name": "started"
   },
   {
    "annotation": "bool",
    "className": "inspect.BlockFinder",
    "name": "passline"
   },
   {
    "annotation": "bool",
    "className": "inspect.BlockFinder",
    "name": "indecorator"
   },
   {
    "annotation": "bool",
    "className": "inspect.BlockFinder",
    "name": "decoratorhasargs"
   },
   {
    "annotation": "int",
    "className": "inspect.BlockFinder",
    "name": "last"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "type"
     },
     {
      "annotation": "str",
      "arg": "token"
     },
     {
      "annotation": "tuple[int, int]",
      "arg": "srowcol"
     },
     {
      "annotation": "tuple[int, int]",
      "arg": "erowcol"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "inspect.BlockFinder",
    "kwonlyargs": [],
    "name": "tokeneater",
    "returns": "None"
   }
  ]
 },
 {
  "className": "inspect.Signature",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Sequence[Parameter] | None)",
      "arg": "parameters"
     }
    ],
    "className": "inspect.Signature",
    "kwonlyargs": [
     {
      "annotation": "Any",
      "arg": "return_annotation"
     },
     {
      "annotation": "bool",
      "arg": "__validate_parameters__"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.Signature",
    "kwonlyargs": [],
    "name": "parameters",
    "returns": "types.MappingProxyType[str, Parameter]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.Signature",
    "kwonlyargs": [],
    "name": "return_annotation",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.Signature",
    "kwonlyargs": [],
    "name": "bind",
    "returns": "BoundArguments"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.Signature",
    "kwonlyargs": [],
    "name": "bind_partial",
    "returns": "BoundArguments"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "inspect.Signature",
    "kwonlyargs": [
     {
      "annotation": "(Sequence[Parameter] | type[_void] | None)",
      "arg": "parameters"
     },
     {
      "annotation": "Any",
      "arg": "return_annotation"
     }
    ],
    "name": "replace",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "inspect.Signature",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "inspect.Parameter",
  "fields": [
   {
    "annotation": "ClassVar[Literal[_ParameterKind.POSITIONAL_ONLY]]",
    "className": "inspect.Parameter",
    "name": "POSITIONAL_ONLY"
   },
   {
    "annotation": "ClassVar[Literal[_ParameterKind.POSITIONAL_OR_KEYWORD]]",
    "className": "inspect.Parameter",
    "name": "POSITIONAL_OR_KEYWORD"
   },
   {
    "annotation": "ClassVar[Literal[_ParameterKind.VAR_POSITIONAL]]",
    "className": "inspect.Parameter",
    "name": "VAR_POSITIONAL"
   },
   {
    "annotation": "ClassVar[Literal[_ParameterKind.KEYWORD_ONLY]]",
    "className": "inspect.Parameter",
    "name": "KEYWORD_ONLY"
   },
   {
    "annotation": "ClassVar[Literal[_ParameterKind.VAR_KEYWORD]]",
    "className": "inspect.Parameter",
    "name": "VAR_KEYWORD"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_ParameterKind",
      "arg": "kind"
     }
    ],
    "className": "inspect.Parameter",
    "kwonlyargs": [
     {
      "annotation": "Any",
      "arg": "default"
     },
     {
      "annotation": "Any",
      "arg": "annotation"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.Parameter",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.Parameter",
    "kwonlyargs": [],
    "name": "default",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.Parameter",
    "kwonlyargs": [],
    "name": "kind",
    "returns": "_ParameterKind"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.Parameter",
    "kwonlyargs": [],
    "name": "annotation",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "inspect.Parameter",
    "kwonlyargs": [
     {
      "annotation": "(str | type[_void])",
      "arg": "name"
     },
     {
      "annotation": "(_ParameterKind | type[_void])",
      "arg": "kind"
     },
     {
      "annotation": "Any",
      "arg": "default"
     },
     {
      "annotation": "Any",
      "arg": "annotation"
     }
    ],
    "name": "replace",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "inspect.Parameter",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "inspect.BoundArguments",
  "fields": [
   {
    "annotation": "OrderedDict[str, Any]",
    "className": "inspect.BoundArguments",
    "name": "arguments"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.BoundArguments",
    "kwonlyargs": [],
    "name": "args",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.BoundArguments",
    "kwonlyargs": [],
    "name": "kwargs",
    "returns": "dict[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.BoundArguments",
    "kwonlyargs": [],
    "name": "signature",
    "returns": "Signature"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Signature",
      "arg": "signature"
     },
     {
      "annotation": "OrderedDict[str, Any]",
      "arg": "arguments"
     }
    ],
    "className": "inspect.BoundArguments",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "inspect.BoundArguments",
    "kwonlyargs": [],
    "name": "apply_defaults",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "inspect.BoundArguments",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "inspect.Arguments",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "inspect.Arguments",
    "name": "args"
   },
   {
    "annotation": "(str | None)",
    "className": "inspect.Arguments",
    "name": "varargs"
   },
   {
    "annotation": "(str | None)",
    "className": "inspect.Arguments",
    "name": "varkw"
   }
  ],
  "methods": []
 },
 {
  "className": "inspect.ArgSpec",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "inspect.ArgSpec",
    "name": "args"
   },
   {
    "annotation": "(str | None)",
    "className": "inspect.ArgSpec",
    "name": "varargs"
   },
   {
    "annotation": "(str | None)",
    "className": "inspect.ArgSpec",
    "name": "keywords"
   },
   {
    "annotation": "tuple[Any, ...]",
    "className": "inspect.ArgSpec",
    "name": "defaults"
   }
  ],
  "methods": []
 },
 {
  "className": "inspect.FullArgSpec",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "inspect.FullArgSpec",
    "name": "args"
   },
   {
    "annotation": "(str | None)",
    "className": "inspect.FullArgSpec",
    "name": "varargs"
   },
   {
    "annotation": "(str | None)",
    "className": "inspect.FullArgSpec",
    "name": "varkw"
   },
   {
    "annotation": "(tuple[Any, ...] | None)",
    "className": "inspect.FullArgSpec",
    "name": "defaults"
   },
   {
    "annotation": "list[str]",
    "className": "inspect.FullArgSpec",
    "name": "kwonlyargs"
   },
   {
    "annotation": "(dict[str, Any] | None)",
    "className": "inspect.FullArgSpec",
    "name": "kwonlydefaults"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "inspect.FullArgSpec",
    "name": "annotations"
   }
  ],
  "methods": []
 },
 {
  "className": "inspect.ArgInfo",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "inspect.ArgInfo",
    "name": "args"
   },
   {
    "annotation": "(str | None)",
    "className": "inspect.ArgInfo",
    "name": "varargs"
   },
   {
    "annotation": "(str | None)",
    "className": "inspect.ArgInfo",
    "name": "keywords"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "inspect.ArgInfo",
    "name": "locals"
   }
  ],
  "methods": []
 },
 {
  "className": "inspect.ClosureVars",
  "fields": [
   {
    "annotation": "Mapping[str, Any]",
    "className": "inspect.ClosureVars",
    "name": "nonlocals"
   },
   {
    "annotation": "Mapping[str, Any]",
    "className": "inspect.ClosureVars",
    "name": "globals"
   },
   {
    "annotation": "Mapping[str, Any]",
    "className": "inspect.ClosureVars",
    "name": "builtins"
   },
   {
    "annotation": "AbstractSet[str]",
    "className": "inspect.ClosureVars",
    "name": "unbound"
   }
  ],
  "methods": []
 },
 {
  "className": "inspect.Traceback",
  "fields": [
   {
    "annotation": "str",
    "className": "inspect.Traceback",
    "name": "filename"
   },
   {
    "annotation": "int",
    "className": "inspect.Traceback",
    "name": "lineno"
   },
   {
    "annotation": "str",
    "className": "inspect.Traceback",
    "name": "function"
   },
   {
    "annotation": "(list[str] | None)",
    "className": "inspect.Traceback",
    "name": "code_context"
   },
   {
    "annotation": "(int | None)",
    "className": "inspect.Traceback",
    "name": "index"
   }
  ],
  "methods": []
 },
 {
  "className": "inspect.FrameInfo",
  "fields": [
   {
    "annotation": "FrameType",
    "className": "inspect.FrameInfo",
    "name": "frame"
   },
   {
    "annotation": "str",
    "className": "inspect.FrameInfo",
    "name": "filename"
   },
   {
    "annotation": "int",
    "className": "inspect.FrameInfo",
    "name": "lineno"
   },
   {
    "annotation": "str",
    "className": "inspect.FrameInfo",
    "name": "function"
   },
   {
    "annotation": "(list[str] | None)",
    "className": "inspect.FrameInfo",
    "name": "code_context"
   },
   {
    "annotation": "(int | None)",
    "className": "inspect.FrameInfo",
    "name": "index"
   }
  ],
  "methods": []
 },
 {
  "className": "inspect.Attribute",
  "fields": [
   {
    "annotation": "str",
    "className": "inspect.Attribute",
    "name": "name"
   },
   {
    "annotation": "str",
    "className": "inspect.Attribute",
    "name": "kind"
   },
   {
    "annotation": "type",
    "className": "inspect.Attribute",
    "name": "defining_class"
   },
   {
    "annotation": "_Object",
    "className": "inspect.Attribute",
    "name": "object"
   }
  ],
  "methods": []
 },
 {
  "className": "inspect.ClassFoundException",
  "fields": [],
  "methods": []
 },
 {
  "className": "spwd.struct_spwd",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_namp",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_pwdp",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_lstchg",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_min",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_max",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_warn",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_inact",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_expire",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "spwd.struct_spwd",
    "kwonlyargs": [],
    "name": "sp_flag",
    "returns": "int"
   }
  ]
 },
 {
  "className": "_collections_abc.dict_keys",
  "fields": [],
  "methods": []
 },
 {
  "className": "_collections_abc.dict_values",
  "fields": [],
  "methods": []
 },
 {
  "className": "_collections_abc.dict_items",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.Num",
  "fields": [
   {
    "annotation": "complex",
    "className": "ast.Num",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "ast.Str",
  "fields": [
   {
    "annotation": "str",
    "className": "ast.Str",
    "name": "value"
   },
   {
    "annotation": "str",
    "className": "ast.Str",
    "name": "s"
   }
  ],
  "methods": []
 },
 {
  "className": "ast.Bytes",
  "fields": [
   {
    "annotation": "bytes",
    "className": "ast.Bytes",
    "name": "value"
   },
   {
    "annotation": "bytes",
    "className": "ast.Bytes",
    "name": "s"
   }
  ],
  "methods": []
 },
 {
  "className": "ast.NameConstant",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.Ellipsis",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.slice",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.ExtSlice",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.Index",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.Suite",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.AugLoad",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.AugStore",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.Param",
  "fields": [],
  "methods": []
 },
 {
  "className": "ast.NodeVisitor",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AST",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AST",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "generic_visit",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Module",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Module",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Interactive",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Interactive",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Expression",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Expression",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FunctionDef",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_FunctionDef",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AsyncFunctionDef",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_AsyncFunctionDef",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ClassDef",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_ClassDef",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Return",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Return",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Delete",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Delete",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Assign",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Assign",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AugAssign",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_AugAssign",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnnAssign",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_AnnAssign",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "For",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_For",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AsyncFor",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_AsyncFor",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "While",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_While",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "If",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_If",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "With",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_With",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AsyncWith",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_AsyncWith",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Raise",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Raise",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Try",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Try",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Assert",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Assert",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Import",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Import",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ImportFrom",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_ImportFrom",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Global",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Global",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Nonlocal",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Nonlocal",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Expr",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Expr",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Pass",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Pass",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Break",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Break",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Continue",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Continue",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Slice",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Slice",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BoolOp",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_BoolOp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BinOp",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_BinOp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "UnaryOp",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_UnaryOp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Lambda",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Lambda",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IfExp",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_IfExp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Dict",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Dict",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Set",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Set",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ListComp",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_ListComp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SetComp",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_SetComp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "DictComp",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_DictComp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "GeneratorExp",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_GeneratorExp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Await",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Await",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Yield",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Yield",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "YieldFrom",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_YieldFrom",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Compare",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Compare",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Call",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Call",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FormattedValue",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_FormattedValue",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "JoinedStr",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_JoinedStr",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Constant",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Constant",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Attribute",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Attribute",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Subscript",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Subscript",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Starred",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Starred",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Name",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Name",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "List",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_List",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Tuple",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Tuple",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Del",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Del",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Load",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Load",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Store",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Store",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "And",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_And",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Or",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Or",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Add",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Add",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BitAnd",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_BitAnd",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BitOr",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_BitOr",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BitXor",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_BitXor",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Div",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Div",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FloorDiv",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_FloorDiv",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LShift",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_LShift",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mod",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Mod",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mult",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Mult",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "MatMult",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_MatMult",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Pow",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Pow",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "RShift",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_RShift",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sub",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Sub",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Invert",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Invert",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Not",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Not",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "UAdd",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_UAdd",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "USub",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_USub",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Eq",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Eq",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Gt",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Gt",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "GtE",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_GtE",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "In",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_In",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Is",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Is",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IsNot",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_IsNot",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Lt",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Lt",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LtE",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_LtE",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "NotEq",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_NotEq",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "NotIn",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_NotIn",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "comprehension",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_comprehension",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ExceptHandler",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_ExceptHandler",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "arguments",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_arguments",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "arg",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_arg",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "keyword",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_keyword",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "alias",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_alias",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "withitem",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_withitem",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ExtSlice",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_ExtSlice",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Index",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Index",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Suite",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Suite",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AugLoad",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_AugLoad",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AugStore",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_AugStore",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Param",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Param",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Num",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Num",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Str",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Str",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Bytes",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Bytes",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "NameConstant",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_NameConstant",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Ellipsis",
      "arg": "node"
     }
    ],
    "className": "ast.NodeVisitor",
    "kwonlyargs": [],
    "name": "visit_Ellipsis",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "ast.NodeTransformer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AST",
      "arg": "node"
     }
    ],
    "className": "ast.NodeTransformer",
    "kwonlyargs": [],
    "name": "generic_visit",
    "returns": "AST"
   }
  ]
 },
 {
  "className": "io.UnsupportedOperation",
  "fields": [],
  "methods": []
 },
 {
  "className": "io.IOBase",
  "fields": [
   {
    "annotation": "Callable[..., Any]",
    "className": "io.IOBase",
    "name": "read"
   },
   {
    "annotation": "Callable[..., Any]",
    "className": "io.IOBase",
    "name": "write"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "exc_tb"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "isatty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__hint"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__offset"
     },
     {
      "annotation": "int",
      "arg": "__whence"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "seekable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "__size"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "truncate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[ReadableBuffer]",
      "arg": "__lines"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "__size"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "__del__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "closed",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "msg"
     }
    ],
    "className": "io.IOBase",
    "kwonlyargs": [],
    "name": "_checkClosed",
    "returns": "None"
   }
  ]
 },
 {
  "className": "io.RawIOBase",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.RawIOBase",
    "kwonlyargs": [],
    "name": "readall",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "__buffer"
     }
    ],
    "className": "io.RawIOBase",
    "kwonlyargs": [],
    "name": "readinto",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__b"
     }
    ],
    "className": "io.RawIOBase",
    "kwonlyargs": [],
    "name": "write",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__size"
     }
    ],
    "className": "io.RawIOBase",
    "kwonlyargs": [],
    "name": "read",
    "returns": "(bytes | None)"
   }
  ]
 },
 {
  "className": "io.BufferedIOBase",
  "fields": [
   {
    "annotation": "RawIOBase",
    "className": "io.BufferedIOBase",
    "name": "raw"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.BufferedIOBase",
    "kwonlyargs": [],
    "name": "detach",
    "returns": "RawIOBase"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "__buffer"
     }
    ],
    "className": "io.BufferedIOBase",
    "kwonlyargs": [],
    "name": "readinto",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__buffer"
     }
    ],
    "className": "io.BufferedIOBase",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "__buffer"
     }
    ],
    "className": "io.BufferedIOBase",
    "kwonlyargs": [],
    "name": "readinto1",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "__size"
     }
    ],
    "className": "io.BufferedIOBase",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__size"
     }
    ],
    "className": "io.BufferedIOBase",
    "kwonlyargs": [],
    "name": "read1",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "io.FileIO",
  "fields": [
   {
    "annotation": "str",
    "className": "io.FileIO",
    "name": "mode"
   },
   {
    "annotation": "(StrOrBytesPath | int)",
    "className": "io.FileIO",
    "name": "name"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(StrOrBytesPath | int)",
      "arg": "file"
     },
     {
      "annotation": "str",
      "arg": "mode"
     },
     {
      "annotation": "bool",
      "arg": "closefd"
     },
     {
      "annotation": "(_Opener | None)",
      "arg": "opener"
     }
    ],
    "className": "io.FileIO",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.FileIO",
    "kwonlyargs": [],
    "name": "closefd",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__b"
     }
    ],
    "className": "io.FileIO",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__size"
     }
    ],
    "className": "io.FileIO",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "io.FileIO",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "io.BytesIO",
  "fields": [
   {
    "annotation": "Any",
    "className": "io.BytesIO",
    "name": "name"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "initial_bytes"
     }
    ],
    "className": "io.BytesIO",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "io.BytesIO",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.BytesIO",
    "kwonlyargs": [],
    "name": "getvalue",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.BytesIO",
    "kwonlyargs": [],
    "name": "getbuffer",
    "returns": "memoryview"
   }
  ]
 },
 {
  "className": "io.BufferedReader",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "io.BufferedReader",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "RawIOBase",
      "arg": "raw"
     },
     {
      "annotation": "int",
      "arg": "buffer_size"
     }
    ],
    "className": "io.BufferedReader",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__size"
     }
    ],
    "className": "io.BufferedReader",
    "kwonlyargs": [],
    "name": "peek",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "io.BufferedWriter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "io.BufferedWriter",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "RawIOBase",
      "arg": "raw"
     },
     {
      "annotation": "int",
      "arg": "buffer_size"
     }
    ],
    "className": "io.BufferedWriter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__buffer"
     }
    ],
    "className": "io.BufferedWriter",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   }
  ]
 },
 {
  "className": "io.BufferedRandom",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "io.BufferedRandom",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "RawIOBase",
      "arg": "raw"
     },
     {
      "annotation": "int",
      "arg": "buffer_size"
     }
    ],
    "className": "io.BufferedRandom",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__target"
     },
     {
      "annotation": "int",
      "arg": "__whence"
     }
    ],
    "className": "io.BufferedRandom",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   }
  ]
 },
 {
  "className": "io.BufferedRWPair",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "RawIOBase",
      "arg": "reader"
     },
     {
      "annotation": "RawIOBase",
      "arg": "writer"
     },
     {
      "annotation": "int",
      "arg": "buffer_size"
     }
    ],
    "className": "io.BufferedRWPair",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__size"
     }
    ],
    "className": "io.BufferedRWPair",
    "kwonlyargs": [],
    "name": "peek",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "io.TextIOBase",
  "fields": [
   {
    "annotation": "str",
    "className": "io.TextIOBase",
    "name": "encoding"
   },
   {
    "annotation": "(str | None)",
    "className": "io.TextIOBase",
    "name": "errors"
   },
   {
    "annotation": "(str | tuple[str, ...] | None)",
    "className": "io.TextIOBase",
    "name": "newlines"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "detach",
    "returns": "BinaryIO"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__s"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "__lines"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__size"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__hint"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "__size"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "read",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOBase",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   }
  ]
 },
 {
  "className": "io.TextIOWrapper",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[bytes]",
      "arg": "buffer"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(str | None)",
      "arg": "errors"
     },
     {
      "annotation": "(str | None)",
      "arg": "newline"
     },
     {
      "annotation": "bool",
      "arg": "line_buffering"
     },
     {
      "annotation": "bool",
      "arg": "write_through"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "buffer",
    "returns": "BinaryIO"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "closed",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "line_buffering",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "__lines"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__size"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__hint"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__cookie"
     },
     {
      "annotation": "int",
      "arg": "__whence"
     }
    ],
    "className": "io.TextIOWrapper",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   }
  ]
 },
 {
  "className": "io.StringIO",
  "fields": [
   {
    "annotation": "Any",
    "className": "io.StringIO",
    "name": "name"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "initial_value"
     },
     {
      "annotation": "(str | None)",
      "arg": "newline"
     }
    ],
    "className": "io.StringIO",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.StringIO",
    "kwonlyargs": [],
    "name": "getvalue",
    "returns": "str"
   }
  ]
 },
 {
  "className": "io.IncrementalNewlineDecoder",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(codecs.IncrementalDecoder | None)",
      "arg": "decoder"
     },
     {
      "annotation": "bool",
      "arg": "translate"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "io.IncrementalNewlineDecoder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bytes | str)",
      "arg": "input"
     },
     {
      "annotation": "bool",
      "arg": "final"
     }
    ],
    "className": "io.IncrementalNewlineDecoder",
    "kwonlyargs": [],
    "name": "decode",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "io.IncrementalNewlineDecoder",
    "kwonlyargs": [],
    "name": "newlines",
    "returns": "(str | tuple[str, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[bytes, int]",
      "arg": "__state"
     }
    ],
    "className": "io.IncrementalNewlineDecoder",
    "kwonlyargs": [],
    "name": "setstate",
    "returns": "None"
   }
  ]
 },
 {
  "className": "asynchat.simple_producer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     },
     {
      "annotation": "int",
      "arg": "buffer_size"
     }
    ],
    "className": "asynchat.simple_producer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.simple_producer",
    "kwonlyargs": [],
    "name": "more",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "asynchat.async_chat",
  "fields": [
   {
    "annotation": "int",
    "className": "asynchat.async_chat",
    "name": "ac_in_buffer_size"
   },
   {
    "annotation": "int",
    "className": "asynchat.async_chat",
    "name": "ac_out_buffer_size"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(socket.socket | None)",
      "arg": "sock"
     },
     {
      "annotation": "(asyncore._maptype | None)",
      "arg": "map"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "collect_incoming_data",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "found_terminator",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bytes | int | None)",
      "arg": "term"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "set_terminator",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "get_terminator",
    "returns": "(bytes | int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "handle_read",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "handle_write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "handle_close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "push",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "simple_producer",
      "arg": "producer"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "push_with_producer",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "close_when_done",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "initiate_send",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asynchat.async_chat",
    "kwonlyargs": [],
    "name": "discard_buffers",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ipaddress.IPv4Address",
  "fields": [],
  "methods": []
 },
 {
  "className": "ipaddress.IPv4Network",
  "fields": [],
  "methods": []
 },
 {
  "className": "ipaddress.IPv4Interface",
  "fields": [],
  "methods": []
 },
 {
  "className": "ipaddress.IPv6Address",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ipaddress.IPv6Address",
    "kwonlyargs": [],
    "name": "ipv4_mapped",
    "returns": "(IPv4Address | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ipaddress.IPv6Address",
    "kwonlyargs": [],
    "name": "is_site_local",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ipaddress.IPv6Address",
    "kwonlyargs": [],
    "name": "sixtofour",
    "returns": "(IPv4Address | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ipaddress.IPv6Address",
    "kwonlyargs": [],
    "name": "teredo",
    "returns": "(tuple[IPv4Address, IPv4Address] | None)"
   }
  ]
 },
 {
  "className": "ipaddress.IPv6Network",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ipaddress.IPv6Network",
    "kwonlyargs": [],
    "name": "is_site_local",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "ipaddress.IPv6Interface",
  "fields": [],
  "methods": []
 },
 {
  "className": "ipaddress.AddressValueError",
  "fields": [],
  "methods": []
 },
 {
  "className": "ipaddress.NetmaskValueError",
  "fields": [],
  "methods": []
 },
 {
  "className": "_compression.BaseStream",
  "fields": [],
  "methods": []
 },
 {
  "className": "_compression.DecompressReader",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Reader",
      "arg": "fp"
     },
     {
      "annotation": "Callable[..., object]",
      "arg": "decomp_factory"
     },
     {
      "annotation": "(type[Exception] | tuple[type[Exception], ...])",
      "arg": "trailing_error"
     }
    ],
    "className": "_compression.DecompressReader",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_compression.DecompressReader",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_compression.DecompressReader",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_compression.DecompressReader",
    "kwonlyargs": [],
    "name": "seekable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "b"
     }
    ],
    "className": "_compression.DecompressReader",
    "kwonlyargs": [],
    "name": "readinto",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "_compression.DecompressReader",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "offset"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "_compression.DecompressReader",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_compression.DecompressReader",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   }
  ]
 },
 {
  "className": "itertools.count",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "itertools.count",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "count[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "_N",
      "arg": "start"
     },
     {
      "annotation": "_Step",
      "arg": "step"
     }
    ],
    "className": "itertools.count",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "count[_N]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "itertools.count",
    "kwonlyargs": [
     {
      "annotation": "_N",
      "arg": "step"
     }
    ],
    "name": "__new__",
    "returns": "count[_N]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.count",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_N"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.count",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "itertools.cycle",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "itertools.cycle",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.cycle",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.cycle",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "itertools.repeat",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "object"
     }
    ],
    "className": "itertools.repeat",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "object"
     },
     {
      "annotation": "int",
      "arg": "times"
     }
    ],
    "className": "itertools.repeat",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.repeat",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.repeat",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.repeat",
    "kwonlyargs": [],
    "name": "__length_hint__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "itertools.accumulate",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.accumulate",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.accumulate",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "itertools.chain",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.chain",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.chain",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.chain",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Any]",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[Iterable[_S]]",
      "arg": "__iterable"
     }
    ],
    "className": "itertools.chain",
    "kwonlyargs": [],
    "name": "from_iterable",
    "returns": "chain[_S]"
   }
  ]
 },
 {
  "className": "itertools.compress",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "data"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "selectors"
     }
    ],
    "className": "itertools.compress",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.compress",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.compress",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "itertools.dropwhile",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Predicate[_T]",
      "arg": "__predicate"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "itertools.dropwhile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.dropwhile",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.dropwhile",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "itertools.filterfalse",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Predicate[_T] | None)",
      "arg": "__predicate"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "itertools.filterfalse",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.filterfalse",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.filterfalse",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "itertools.groupby",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "iterable"
     },
     {
      "annotation": "None",
      "arg": "key"
     }
    ],
    "className": "itertools.groupby",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "groupby[_T1, _T1]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "iterable"
     },
     {
      "annotation": "Callable[[_T1], _T2]",
      "arg": "key"
     }
    ],
    "className": "itertools.groupby",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "groupby[_T2, _T1]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.groupby",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.groupby",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "tuple[_T, Iterator[_S]]"
   }
  ]
 },
 {
  "className": "itertools.islice",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     },
     {
      "annotation": "(int | None)",
      "arg": "__stop"
     }
    ],
    "className": "itertools.islice",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     },
     {
      "annotation": "(int | None)",
      "arg": "__start"
     },
     {
      "annotation": "(int | None)",
      "arg": "__stop"
     },
     {
      "annotation": "(int | None)",
      "arg": "__step"
     }
    ],
    "className": "itertools.islice",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.islice",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.islice",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "itertools.starmap",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _T]",
      "arg": "__function"
     },
     {
      "annotation": "Iterable[Iterable[Any]]",
      "arg": "__iterable"
     }
    ],
    "className": "itertools.starmap",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.starmap",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.starmap",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "itertools.takewhile",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Predicate[_T]",
      "arg": "__predicate"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "itertools.takewhile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.takewhile",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.takewhile",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "itertools.zip_longest",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [
     {
      "annotation": "object",
      "arg": "fillvalue"
     }
    ],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1 | Any, _T2 | Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [
     {
      "annotation": "_T",
      "arg": "fillvalue"
     }
    ],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1 | _T, _T2 | _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1 | Any, _T2 | Any, _T3 | Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [
     {
      "annotation": "_T",
      "arg": "fillvalue"
     }
    ],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1 | _T, _T2 | _T, _T3 | _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1 | Any, _T2 | Any, _T3 | Any, _T4 | Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [
     {
      "annotation": "_T",
      "arg": "fillvalue"
     }
    ],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1 | _T, _T2 | _T, _T3 | _T, _T4 | _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[_T5]",
      "arg": "__iter5"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1 | Any, _T2 | Any, _T3 | Any, _T4 | Any, _T5 | Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[_T5]",
      "arg": "__iter5"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [
     {
      "annotation": "_T",
      "arg": "fillvalue"
     }
    ],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T1 | _T, _T2 | _T, _T3 | _T, _T4 | _T, _T5 | _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter5"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter6"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T | Any, ...]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter5"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iter6"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [
     {
      "annotation": "_T",
      "arg": "fillvalue"
     }
    ],
    "name": "__new__",
    "returns": "zip_longest[tuple[_T, ...]]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.zip_longest",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "itertools.product",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "product[tuple[_T1]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "product[tuple[_T1, _T2]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "product[tuple[_T1, _T2, _T3]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "product[tuple[_T1, _T2, _T3, _T4]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[_T5]",
      "arg": "__iter5"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "product[tuple[_T1, _T2, _T3, _T4, _T5]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[_T5]",
      "arg": "__iter5"
     },
     {
      "annotation": "Iterable[_T6]",
      "arg": "__iter6"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "product[tuple[_T1, _T2, _T3, _T4, _T5, _T6]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter5"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter6"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter7"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "product[tuple[Any, ...]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [
     {
      "annotation": "int",
      "arg": "repeat"
     }
    ],
    "name": "__new__",
    "returns": "product[tuple[_T1, ...]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [
     {
      "annotation": "int",
      "arg": "repeat"
     }
    ],
    "name": "__new__",
    "returns": "product[tuple[Any, ...]]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.product",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "itertools.permutations",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "(int | None)",
      "arg": "r"
     }
    ],
    "className": "itertools.permutations",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.permutations",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.permutations",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "tuple[_T, ...]"
   }
  ]
 },
 {
  "className": "itertools.combinations",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "Literal[2]",
      "arg": "r"
     }
    ],
    "className": "itertools.combinations",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "combinations[tuple[_T, _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "Literal[3]",
      "arg": "r"
     }
    ],
    "className": "itertools.combinations",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "combinations[tuple[_T, _T, _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "Literal[4]",
      "arg": "r"
     }
    ],
    "className": "itertools.combinations",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "combinations[tuple[_T, _T, _T, _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "Literal[5]",
      "arg": "r"
     }
    ],
    "className": "itertools.combinations",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "combinations[tuple[_T, _T, _T, _T, _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "int",
      "arg": "r"
     }
    ],
    "className": "itertools.combinations",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "combinations[tuple[_T, ...]]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.combinations",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.combinations",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "itertools.combinations_with_replacement",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "int",
      "arg": "r"
     }
    ],
    "className": "itertools.combinations_with_replacement",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.combinations_with_replacement",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.combinations_with_replacement",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "tuple[_T, ...]"
   }
  ]
 },
 {
  "className": "itertools.pairwise",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "itertools.pairwise",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "pairwise[tuple[_T, _T]]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "itertools.pairwise",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "itertools.pairwise",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "sre_constants.error",
  "fields": [
   {
    "annotation": "str",
    "className": "sre_constants.error",
    "name": "msg"
   },
   {
    "annotation": "(str | bytes | None)",
    "className": "sre_constants.error",
    "name": "pattern"
   },
   {
    "annotation": "(int | None)",
    "className": "sre_constants.error",
    "name": "pos"
   },
   {
    "annotation": "int",
    "className": "sre_constants.error",
    "name": "lineno"
   },
   {
    "annotation": "int",
    "className": "sre_constants.error",
    "name": "colno"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     },
     {
      "annotation": "(str | bytes | None)",
      "arg": "pattern"
     },
     {
      "annotation": "(int | None)",
      "arg": "pos"
     }
    ],
    "className": "sre_constants.error",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "asyncore.ExitNow",
  "fields": [],
  "methods": []
 },
 {
  "className": "asyncore.dispatcher",
  "fields": [
   {
    "annotation": "bool",
    "className": "asyncore.dispatcher",
    "name": "debug"
   },
   {
    "annotation": "bool",
    "className": "asyncore.dispatcher",
    "name": "connected"
   },
   {
    "annotation": "bool",
    "className": "asyncore.dispatcher",
    "name": "accepting"
   },
   {
    "annotation": "bool",
    "className": "asyncore.dispatcher",
    "name": "connecting"
   },
   {
    "annotation": "bool",
    "className": "asyncore.dispatcher",
    "name": "closing"
   },
   {
    "annotation": "frozenset[str]",
    "className": "asyncore.dispatcher",
    "name": "ignore_log_types"
   },
   {
    "annotation": "(_socket | None)",
    "className": "asyncore.dispatcher",
    "name": "socket"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_socket | None)",
      "arg": "sock"
     },
     {
      "annotation": "(_maptype | None)",
      "arg": "map"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_maptype | None)",
      "arg": "map"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "add_channel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_maptype | None)",
      "arg": "map"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "del_channel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "family"
     },
     {
      "annotation": "int",
      "arg": "type"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "create_socket",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_socket",
      "arg": "sock"
     },
     {
      "annotation": "(_maptype | None)",
      "arg": "map"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "set_socket",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "set_reuse_addr",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "num"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "listen",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(tuple[Any, ...] | str)",
      "arg": "addr"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(tuple[Any, ...] | str)",
      "arg": "address"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "connect",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "accept",
    "returns": "(tuple[_socket, Any] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "send",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "buffer_size"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "recv",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "message"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "log",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "message"
     },
     {
      "annotation": "str",
      "arg": "type"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "log_info",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_read_event",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_connect_event",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_write_event",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_expt_event",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_error",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_expt",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_read",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_connect",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_accept",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher",
    "kwonlyargs": [],
    "name": "handle_close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "asyncore.dispatcher_with_send",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(socket | None)",
      "arg": "sock"
     },
     {
      "annotation": "(_maptype | None)",
      "arg": "map"
     }
    ],
    "className": "asyncore.dispatcher_with_send",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher_with_send",
    "kwonlyargs": [],
    "name": "initiate_send",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.dispatcher_with_send",
    "kwonlyargs": [],
    "name": "handle_write",
    "returns": "None"
   }
  ]
 },
 {
  "className": "asyncore.file_wrapper",
  "fields": [
   {
    "annotation": "int",
    "className": "asyncore.file_wrapper",
    "name": "fd"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "fd"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "bufsize"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "recv",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "send",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     },
     {
      "annotation": "int",
      "arg": "optname"
     },
     {
      "annotation": "None",
      "arg": "buflen"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "getsockopt",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     },
     {
      "annotation": "int",
      "arg": "optname"
     },
     {
      "annotation": "int",
      "arg": "buflen"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "getsockopt",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "bufsize"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "asyncore.file_wrapper",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   }
  ]
 },
 {
  "className": "asyncore.file_dispatcher",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FileDescriptorLike",
      "arg": "fd"
     },
     {
      "annotation": "(_maptype | None)",
      "arg": "map"
     }
    ],
    "className": "asyncore.file_dispatcher",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "fd"
     }
    ],
    "className": "asyncore.file_dispatcher",
    "kwonlyargs": [],
    "name": "set_file",
    "returns": "None"
   }
  ]
 },
 {
  "className": "sre_parse.Verbose",
  "fields": [],
  "methods": []
 },
 {
  "className": "sre_parse.SubPattern",
  "fields": [
   {
    "annotation": "list[_CodeType]",
    "className": "sre_parse.SubPattern",
    "name": "data"
   },
   {
    "annotation": "(int | None)",
    "className": "sre_parse.SubPattern",
    "name": "width"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "sre_parse.SubPattern",
    "kwonlyargs": [],
    "name": "dump",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sre_parse.SubPattern",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | slice)",
      "arg": "index"
     }
    ],
    "className": "sre_parse.SubPattern",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | slice)",
      "arg": "index"
     }
    ],
    "className": "sre_parse.SubPattern",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "(SubPattern | _CodeType)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | slice)",
      "arg": "index"
     },
     {
      "annotation": "_CodeType",
      "arg": "code"
     }
    ],
    "className": "sre_parse.SubPattern",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "index"
     },
     {
      "annotation": "_CodeType",
      "arg": "code"
     }
    ],
    "className": "sre_parse.SubPattern",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_CodeType",
      "arg": "code"
     }
    ],
    "className": "sre_parse.SubPattern",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sre_parse.SubPattern",
    "kwonlyargs": [],
    "name": "getwidth",
    "returns": "int"
   }
  ]
 },
 {
  "className": "sre_parse.Tokenizer",
  "fields": [
   {
    "annotation": "bool",
    "className": "sre_parse.Tokenizer",
    "name": "istext"
   },
   {
    "annotation": "Any",
    "className": "sre_parse.Tokenizer",
    "name": "string"
   },
   {
    "annotation": "str",
    "className": "sre_parse.Tokenizer",
    "name": "decoded_string"
   },
   {
    "annotation": "int",
    "className": "sre_parse.Tokenizer",
    "name": "index"
   },
   {
    "annotation": "(str | None)",
    "className": "sre_parse.Tokenizer",
    "name": "next"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "string"
     }
    ],
    "className": "sre_parse.Tokenizer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "char"
     }
    ],
    "className": "sre_parse.Tokenizer",
    "kwonlyargs": [],
    "name": "match",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sre_parse.Tokenizer",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "charset"
     }
    ],
    "className": "sre_parse.Tokenizer",
    "kwonlyargs": [],
    "name": "getwhile",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sre_parse.Tokenizer",
    "kwonlyargs": [],
    "name": "pos",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sre_parse.Tokenizer",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "index"
     }
    ],
    "className": "sre_parse.Tokenizer",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     },
     {
      "annotation": "int",
      "arg": "offset"
     }
    ],
    "className": "sre_parse.Tokenizer",
    "kwonlyargs": [],
    "name": "error",
    "returns": "_Error"
   }
  ]
 },
 {
  "className": "ssl.SSLError",
  "fields": [
   {
    "annotation": "str",
    "className": "ssl.SSLError",
    "name": "library"
   },
   {
    "annotation": "str",
    "className": "ssl.SSLError",
    "name": "reason"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.SSLZeroReturnError",
  "fields": [],
  "methods": []
 },
 {
  "className": "ssl.SSLWantReadError",
  "fields": [],
  "methods": []
 },
 {
  "className": "ssl.SSLWantWriteError",
  "fields": [],
  "methods": []
 },
 {
  "className": "ssl.SSLSyscallError",
  "fields": [],
  "methods": []
 },
 {
  "className": "ssl.SSLEOFError",
  "fields": [],
  "methods": []
 },
 {
  "className": "ssl.SSLCertVerificationError",
  "fields": [
   {
    "annotation": "int",
    "className": "ssl.SSLCertVerificationError",
    "name": "verify_code"
   },
   {
    "annotation": "str",
    "className": "ssl.SSLCertVerificationError",
    "name": "verify_message"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.DefaultVerifyPaths",
  "fields": [
   {
    "annotation": "str",
    "className": "ssl.DefaultVerifyPaths",
    "name": "cafile"
   },
   {
    "annotation": "str",
    "className": "ssl.DefaultVerifyPaths",
    "name": "capath"
   },
   {
    "annotation": "str",
    "className": "ssl.DefaultVerifyPaths",
    "name": "openssl_cafile_env"
   },
   {
    "annotation": "str",
    "className": "ssl.DefaultVerifyPaths",
    "name": "openssl_cafile"
   },
   {
    "annotation": "str",
    "className": "ssl.DefaultVerifyPaths",
    "name": "openssl_capath_env"
   },
   {
    "annotation": "str",
    "className": "ssl.DefaultVerifyPaths",
    "name": "openssl_capath"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.VerifyMode",
  "fields": [
   {
    "annotation": "int",
    "className": "ssl.VerifyMode",
    "name": "CERT_NONE"
   },
   {
    "annotation": "int",
    "className": "ssl.VerifyMode",
    "name": "CERT_OPTIONAL"
   },
   {
    "annotation": "int",
    "className": "ssl.VerifyMode",
    "name": "CERT_REQUIRED"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.VerifyFlags",
  "fields": [
   {
    "annotation": "int",
    "className": "ssl.VerifyFlags",
    "name": "VERIFY_DEFAULT"
   },
   {
    "annotation": "int",
    "className": "ssl.VerifyFlags",
    "name": "VERIFY_CRL_CHECK_LEAF"
   },
   {
    "annotation": "int",
    "className": "ssl.VerifyFlags",
    "name": "VERIFY_CRL_CHECK_CHAIN"
   },
   {
    "annotation": "int",
    "className": "ssl.VerifyFlags",
    "name": "VERIFY_X509_STRICT"
   },
   {
    "annotation": "int",
    "className": "ssl.VerifyFlags",
    "name": "VERIFY_X509_TRUSTED_FIRST"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.Options",
  "fields": [
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_ALL"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_NO_SSLv2"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_NO_SSLv3"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_NO_TLSv1"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_NO_TLSv1_1"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_NO_TLSv1_2"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_NO_TLSv1_3"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_CIPHER_SERVER_PREFERENCE"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_SINGLE_DH_USE"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_SINGLE_ECDH_USE"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_NO_COMPRESSION"
   },
   {
    "annotation": "int",
    "className": "ssl.Options",
    "name": "OP_NO_TICKET"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.AlertDescription",
  "fields": [
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_ACCESS_DENIED"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_BAD_CERTIFICATE"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_BAD_RECORD_MAC"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_CERTIFICATE_EXPIRED"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_CERTIFICATE_REVOKED"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_CLOSE_NOTIFY"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_DECODE_ERROR"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_DECOMPRESSION_FAILURE"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_DECRYPT_ERROR"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_HANDSHAKE_FAILURE"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_ILLEGAL_PARAMETER"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_INSUFFICIENT_SECURITY"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_INTERNAL_ERROR"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_NO_RENEGOTIATION"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_PROTOCOL_VERSION"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_RECORD_OVERFLOW"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_UNEXPECTED_MESSAGE"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_UNKNOWN_CA"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_UNRECOGNIZED_NAME"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION"
   },
   {
    "annotation": "int",
    "className": "ssl.AlertDescription",
    "name": "ALERT_DESCRIPTION_USER_CANCELLED"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.Purpose",
  "fields": [
   {
    "annotation": "_ASN1Object",
    "className": "ssl.Purpose",
    "name": "SERVER_AUTH"
   },
   {
    "annotation": "_ASN1Object",
    "className": "ssl.Purpose",
    "name": "CLIENT_AUTH"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.SSLSocket",
  "fields": [
   {
    "annotation": "SSLContext",
    "className": "ssl.SSLSocket",
    "name": "context"
   },
   {
    "annotation": "bool",
    "className": "ssl.SSLSocket",
    "name": "server_side"
   },
   {
    "annotation": "(str | None)",
    "className": "ssl.SSLSocket",
    "name": "server_hostname"
   },
   {
    "annotation": "(SSLSession | None)",
    "className": "ssl.SSLSocket",
    "name": "session"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "session_reused",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(socket._Address | bytes)",
      "arg": "addr"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "connect",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(socket._Address | bytes)",
      "arg": "addr"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "connect_ex",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "buflen"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "recv",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "buffer"
     },
     {
      "annotation": "(int | None)",
      "arg": "nbytes"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "recv_into",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "buflen"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "recvfrom",
    "returns": "tuple[bytes, socket._RetAddress]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "buffer"
     },
     {
      "annotation": "(int | None)",
      "arg": "nbytes"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "recvfrom_into",
    "returns": "tuple[int, socket._RetAddress]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "send",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "sendall",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     },
     {
      "annotation": "socket._Address",
      "arg": "flags_or_addr"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "sendto",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     },
     {
      "annotation": "(int | socket._Address)",
      "arg": "flags_or_addr"
     },
     {
      "annotation": "(socket._Address | None)",
      "arg": "addr"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "sendto",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "how"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "shutdown",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "len"
     },
     {
      "annotation": "(bytearray | None)",
      "arg": "buffer"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "block"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "do_handshake",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[False]",
      "arg": "binary_form"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "getpeercert",
    "returns": "(_PeerCertRetDictType | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[True]",
      "arg": "binary_form"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "getpeercert",
    "returns": "(bytes | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "binary_form"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "getpeercert",
    "returns": "_PeerCertRetType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "cipher",
    "returns": "(tuple[str, str, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "shared_ciphers",
    "returns": "(list[tuple[str, str, int]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "compression",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cb_type"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "get_channel_binding",
    "returns": "(bytes | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "selected_alpn_protocol",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "selected_npn_protocol",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "accept",
    "returns": "tuple[SSLSocket, socket._RetAddress]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "unwrap",
    "returns": "socket.socket"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "version",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLSocket",
    "kwonlyargs": [],
    "name": "pending",
    "returns": "int"
   }
  ]
 },
 {
  "className": "ssl.TLSVersion",
  "fields": [
   {
    "annotation": "int",
    "className": "ssl.TLSVersion",
    "name": "MINIMUM_SUPPORTED"
   },
   {
    "annotation": "int",
    "className": "ssl.TLSVersion",
    "name": "MAXIMUM_SUPPORTED"
   },
   {
    "annotation": "int",
    "className": "ssl.TLSVersion",
    "name": "SSLv3"
   },
   {
    "annotation": "int",
    "className": "ssl.TLSVersion",
    "name": "TLSv1"
   },
   {
    "annotation": "int",
    "className": "ssl.TLSVersion",
    "name": "TLSv1_1"
   },
   {
    "annotation": "int",
    "className": "ssl.TLSVersion",
    "name": "TLSv1_2"
   },
   {
    "annotation": "int",
    "className": "ssl.TLSVersion",
    "name": "TLSv1_3"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.SSLContext",
  "fields": [
   {
    "annotation": "bool",
    "className": "ssl.SSLContext",
    "name": "check_hostname"
   },
   {
    "annotation": "Options",
    "className": "ssl.SSLContext",
    "name": "options"
   },
   {
    "annotation": "VerifyFlags",
    "className": "ssl.SSLContext",
    "name": "verify_flags"
   },
   {
    "annotation": "VerifyMode",
    "className": "ssl.SSLContext",
    "name": "verify_mode"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "protocol",
    "returns": "_SSLMethod"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "int",
      "arg": "protocol"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "protocol"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "cert_store_stats",
    "returns": "dict[str, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "certfile"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "keyfile"
     },
     {
      "annotation": "(_PasswordType | None)",
      "arg": "password"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "load_cert_chain",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Purpose",
      "arg": "purpose"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "load_default_certs",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "cafile"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "capath"
     },
     {
      "annotation": "(str | bytes | None)",
      "arg": "cadata"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "load_verify_locations",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "binary_form"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "get_ca_certs",
    "returns": "(list[_PeerCertRetDictType] | list[bytes])"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "get_ciphers",
    "returns": "list[_Cipher]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "set_default_verify_paths",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__cipherlist"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "set_ciphers",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "alpn_protocols"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "set_alpn_protocols",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "npn_protocols"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "set_npn_protocols",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__path"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "load_dh_params",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "set_ecdh_curve",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "socket.socket",
      "arg": "sock"
     },
     {
      "annotation": "bool",
      "arg": "server_side"
     },
     {
      "annotation": "bool",
      "arg": "do_handshake_on_connect"
     },
     {
      "annotation": "bool",
      "arg": "suppress_ragged_eofs"
     },
     {
      "annotation": "(str | None)",
      "arg": "server_hostname"
     },
     {
      "annotation": "(SSLSession | None)",
      "arg": "session"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "wrap_socket",
    "returns": "SSLSocket"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "MemoryBIO",
      "arg": "incoming"
     },
     {
      "annotation": "MemoryBIO",
      "arg": "outgoing"
     },
     {
      "annotation": "bool",
      "arg": "server_side"
     },
     {
      "annotation": "(str | None)",
      "arg": "server_hostname"
     },
     {
      "annotation": "(SSLSession | None)",
      "arg": "session"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "wrap_bio",
    "returns": "SSLObject"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLContext",
    "kwonlyargs": [],
    "name": "session_stats",
    "returns": "dict[str, int]"
   }
  ]
 },
 {
  "className": "ssl.SSLObject",
  "fields": [
   {
    "annotation": "SSLContext",
    "className": "ssl.SSLObject",
    "name": "context"
   },
   {
    "annotation": "(SSLSession | None)",
    "className": "ssl.SSLObject",
    "name": "session"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "server_side",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "server_hostname",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "session_reused",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "len"
     },
     {
      "annotation": "(bytearray | None)",
      "arg": "buffer"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[False]",
      "arg": "binary_form"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "getpeercert",
    "returns": "(_PeerCertRetDictType | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[True]",
      "arg": "binary_form"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "getpeercert",
    "returns": "(bytes | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "binary_form"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "getpeercert",
    "returns": "_PeerCertRetType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "selected_alpn_protocol",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "selected_npn_protocol",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "cipher",
    "returns": "(tuple[str, str, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "shared_ciphers",
    "returns": "(list[tuple[str, str, int]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "compression",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "pending",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "do_handshake",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "unwrap",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "version",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cb_type"
     }
    ],
    "className": "ssl.SSLObject",
    "kwonlyargs": [],
    "name": "get_channel_binding",
    "returns": "(bytes | None)"
   }
  ]
 },
 {
  "className": "ssl.MemoryBIO",
  "fields": [
   {
    "annotation": "int",
    "className": "ssl.MemoryBIO",
    "name": "pending"
   },
   {
    "annotation": "bool",
    "className": "ssl.MemoryBIO",
    "name": "eof"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__size"
     }
    ],
    "className": "ssl.MemoryBIO",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__buf"
     }
    ],
    "className": "ssl.MemoryBIO",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ssl.MemoryBIO",
    "kwonlyargs": [],
    "name": "write_eof",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ssl.SSLSession",
  "fields": [
   {
    "annotation": "bytes",
    "className": "ssl.SSLSession",
    "name": "id"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLSession",
    "name": "time"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLSession",
    "name": "timeout"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLSession",
    "name": "ticket_lifetime_hint"
   },
   {
    "annotation": "bool",
    "className": "ssl.SSLSession",
    "name": "has_ticket"
   }
  ],
  "methods": []
 },
 {
  "className": "ssl.SSLErrorNumber",
  "fields": [
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_EOF"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_INVALID_ERROR_CODE"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_SSL"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_SYSCALL"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_WANT_CONNECT"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_WANT_READ"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_WANT_WRITE"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_WANT_X509_LOOKUP"
   },
   {
    "annotation": "int",
    "className": "ssl.SSLErrorNumber",
    "name": "SSL_ERROR_ZERO_RETURN"
   }
  ],
  "methods": []
 },
 {
  "className": "_csv.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "_csv.Dialect",
  "fields": [
   {
    "annotation": "str",
    "className": "_csv.Dialect",
    "name": "delimiter"
   },
   {
    "annotation": "(str | None)",
    "className": "_csv.Dialect",
    "name": "quotechar"
   },
   {
    "annotation": "(str | None)",
    "className": "_csv.Dialect",
    "name": "escapechar"
   },
   {
    "annotation": "bool",
    "className": "_csv.Dialect",
    "name": "doublequote"
   },
   {
    "annotation": "bool",
    "className": "_csv.Dialect",
    "name": "skipinitialspace"
   },
   {
    "annotation": "str",
    "className": "_csv.Dialect",
    "name": "lineterminator"
   },
   {
    "annotation": "int",
    "className": "_csv.Dialect",
    "name": "quoting"
   },
   {
    "annotation": "int",
    "className": "_csv.Dialect",
    "name": "strict"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_csv.Dialect",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "audioop.error",
  "fields": [],
  "methods": []
 },
 {
  "className": "statistics.StatisticsError",
  "fields": [],
  "methods": []
 },
 {
  "className": "statistics.NormalDist",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "mu"
     },
     {
      "annotation": "float",
      "arg": "sigma"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "mean",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "median",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "mode",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "stdev",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "variance",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[SupportsFloat]",
      "arg": "data"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "from_samples",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [
     {
      "annotation": "(Any | None)",
      "arg": "seed"
     }
    ],
    "name": "samples",
    "returns": "list[float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "pdf",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "cdf",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "p"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "inv_cdf",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "NormalDist",
      "arg": "other"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "overlap",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "quantiles",
    "returns": "list[float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "x2"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | NormalDist)",
      "arg": "x2"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "NormalDist"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | NormalDist)",
      "arg": "x2"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "NormalDist"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x2"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "NormalDist"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x2"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "NormalDist"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "NormalDist"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "NormalDist"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | NormalDist)",
      "arg": "x2"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "NormalDist"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "statistics.NormalDist",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "statistics.LinearRegression",
  "fields": [
   {
    "annotation": "float",
    "className": "statistics.LinearRegression",
    "name": "slope"
   },
   {
    "annotation": "float",
    "className": "statistics.LinearRegression",
    "name": "intercept"
   }
  ],
  "methods": []
 },
 {
  "className": "bdb.BdbQuit",
  "fields": [],
  "methods": []
 },
 {
  "className": "bdb.Bdb",
  "fields": [
   {
    "annotation": "(set[str] | None)",
    "className": "bdb.Bdb",
    "name": "skip"
   },
   {
    "annotation": "dict[str, list[int]]",
    "className": "bdb.Bdb",
    "name": "breaks"
   },
   {
    "annotation": "dict[str, str]",
    "className": "bdb.Bdb",
    "name": "fncache"
   },
   {
    "annotation": "(FrameType | None)",
    "className": "bdb.Bdb",
    "name": "frame_returning"
   },
   {
    "annotation": "(FrameType | None)",
    "className": "bdb.Bdb",
    "name": "botframe"
   },
   {
    "annotation": "bool",
    "className": "bdb.Bdb",
    "name": "quitting"
   },
   {
    "annotation": "(FrameType | None)",
    "className": "bdb.Bdb",
    "name": "stopframe"
   },
   {
    "annotation": "(FrameType | None)",
    "className": "bdb.Bdb",
    "name": "returnframe"
   },
   {
    "annotation": "int",
    "className": "bdb.Bdb",
    "name": "stoplineno"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Iterable[str] | None)",
      "arg": "skip"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "canonic",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     },
     {
      "annotation": "str",
      "arg": "event"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "trace_dispatch",
    "returns": "_TraceDispatch"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "dispatch_line",
    "returns": "_TraceDispatch"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     },
     {
      "annotation": "None",
      "arg": "arg"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "dispatch_call",
    "returns": "_TraceDispatch"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "dispatch_return",
    "returns": "_TraceDispatch"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     },
     {
      "annotation": "ExcInfo",
      "arg": "arg"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "dispatch_exception",
    "returns": "_TraceDispatch"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "module_name"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "is_skipped_module",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "stop_here",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "break_here",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "do_clear",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "break_anywhere",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     },
     {
      "annotation": "None",
      "arg": "argument_list"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "user_call",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "user_line",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     },
     {
      "annotation": "Any",
      "arg": "return_value"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "user_return",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     },
     {
      "annotation": "ExcInfo",
      "arg": "exc_info"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "user_exception",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     },
     {
      "annotation": "(int | None)",
      "arg": "lineno"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "set_until",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "set_step",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "set_next",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "set_return",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(FrameType | None)",
      "arg": "frame"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "set_trace",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "set_continue",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "set_quit",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     },
     {
      "annotation": "bool",
      "arg": "temporary"
     },
     {
      "annotation": "(str | None)",
      "arg": "cond"
     },
     {
      "annotation": "(str | None)",
      "arg": "funcname"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "set_break",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "clear_break",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsInt",
      "arg": "arg"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "clear_bpbynumber",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "clear_all_file_breaks",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "clear_all_breaks",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsInt",
      "arg": "arg"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "get_bpbynumber",
    "returns": "Breakpoint"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "get_break",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "get_breaks",
    "returns": "list[Breakpoint]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "get_file_breaks",
    "returns": "list[Breakpoint]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "get_all_breaks",
    "returns": "list[Breakpoint]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(FrameType | None)",
      "arg": "f"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "t"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "get_stack",
    "returns": "tuple[list[tuple[FrameType, int]], int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "frame_lineno"
     },
     {
      "annotation": "str",
      "arg": "lprefix"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "format_stack_entry",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | CodeType)",
      "arg": "cmd"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "globals"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "locals"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "run",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "expr"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "globals"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "locals"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "runeval",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | CodeType)",
      "arg": "cmd"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "globals"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "locals"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "runctx",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[_P, _T]",
      "arg": "__func"
     }
    ],
    "className": "bdb.Bdb",
    "kwonlyargs": [],
    "name": "runcall",
    "returns": "(_T | None)"
   }
  ]
 },
 {
  "className": "bdb.Breakpoint",
  "fields": [
   {
    "annotation": "int",
    "className": "bdb.Breakpoint",
    "name": "next"
   },
   {
    "annotation": "dict[tuple[str, int], list[Breakpoint]]",
    "className": "bdb.Breakpoint",
    "name": "bplist"
   },
   {
    "annotation": "list[Breakpoint | None]",
    "className": "bdb.Breakpoint",
    "name": "bpbynumber"
   },
   {
    "annotation": "(str | None)",
    "className": "bdb.Breakpoint",
    "name": "funcname"
   },
   {
    "annotation": "(int | None)",
    "className": "bdb.Breakpoint",
    "name": "func_first_executable_line"
   },
   {
    "annotation": "str",
    "className": "bdb.Breakpoint",
    "name": "file"
   },
   {
    "annotation": "int",
    "className": "bdb.Breakpoint",
    "name": "line"
   },
   {
    "annotation": "bool",
    "className": "bdb.Breakpoint",
    "name": "temporary"
   },
   {
    "annotation": "(str | None)",
    "className": "bdb.Breakpoint",
    "name": "cond"
   },
   {
    "annotation": "bool",
    "className": "bdb.Breakpoint",
    "name": "enabled"
   },
   {
    "annotation": "int",
    "className": "bdb.Breakpoint",
    "name": "ignore"
   },
   {
    "annotation": "int",
    "className": "bdb.Breakpoint",
    "name": "hits"
   },
   {
    "annotation": "int",
    "className": "bdb.Breakpoint",
    "name": "number"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "file"
     },
     {
      "annotation": "int",
      "arg": "line"
     },
     {
      "annotation": "bool",
      "arg": "temporary"
     },
     {
      "annotation": "(str | None)",
      "arg": "cond"
     },
     {
      "annotation": "(str | None)",
      "arg": "funcname"
     }
    ],
    "className": "bdb.Breakpoint",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Breakpoint",
    "kwonlyargs": [],
    "name": "deleteMe",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Breakpoint",
    "kwonlyargs": [],
    "name": "enable",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Breakpoint",
    "kwonlyargs": [],
    "name": "disable",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "out"
     }
    ],
    "className": "bdb.Breakpoint",
    "kwonlyargs": [],
    "name": "bpprint",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bdb.Breakpoint",
    "kwonlyargs": [],
    "name": "bpformat",
    "returns": "str"
   }
  ]
 },
 {
  "className": "locale.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "string.Template",
  "fields": [
   {
    "annotation": "str",
    "className": "string.Template",
    "name": "template"
   },
   {
    "annotation": "str",
    "className": "string.Template",
    "name": "delimiter"
   },
   {
    "annotation": "str",
    "className": "string.Template",
    "name": "idpattern"
   },
   {
    "annotation": "(str | None)",
    "className": "string.Template",
    "name": "braceidpattern"
   },
   {
    "annotation": "RegexFlag",
    "className": "string.Template",
    "name": "flags"
   },
   {
    "annotation": "Pattern[str]",
    "className": "string.Template",
    "name": "pattern"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "template"
     }
    ],
    "className": "string.Template",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, object]",
      "arg": "__mapping"
     }
    ],
    "className": "string.Template",
    "kwonlyargs": [],
    "name": "substitute",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, object]",
      "arg": "__mapping"
     }
    ],
    "className": "string.Template",
    "kwonlyargs": [],
    "name": "safe_substitute",
    "returns": "str"
   }
  ]
 },
 {
  "className": "string.Formatter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__format_string"
     }
    ],
    "className": "string.Formatter",
    "kwonlyargs": [],
    "name": "format",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "format_string"
     },
     {
      "annotation": "Sequence[Any]",
      "arg": "args"
     },
     {
      "annotation": "Mapping[str, Any]",
      "arg": "kwargs"
     }
    ],
    "className": "string.Formatter",
    "kwonlyargs": [],
    "name": "vformat",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "format_string"
     }
    ],
    "className": "string.Formatter",
    "kwonlyargs": [],
    "name": "parse",
    "returns": "Iterable[tuple[str, str | None, str | None, str | None]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "field_name"
     },
     {
      "annotation": "Sequence[Any]",
      "arg": "args"
     },
     {
      "annotation": "Mapping[str, Any]",
      "arg": "kwargs"
     }
    ],
    "className": "string.Formatter",
    "kwonlyargs": [],
    "name": "get_field",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | str)",
      "arg": "key"
     },
     {
      "annotation": "Sequence[Any]",
      "arg": "args"
     },
     {
      "annotation": "Mapping[str, Any]",
      "arg": "kwargs"
     }
    ],
    "className": "string.Formatter",
    "kwonlyargs": [],
    "name": "get_value",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[int | str]",
      "arg": "used_args"
     },
     {
      "annotation": "Sequence[Any]",
      "arg": "args"
     },
     {
      "annotation": "Mapping[str, Any]",
      "arg": "kwargs"
     }
    ],
    "className": "string.Formatter",
    "kwonlyargs": [],
    "name": "check_unused_args",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "str",
      "arg": "format_spec"
     }
    ],
    "className": "string.Formatter",
    "kwonlyargs": [],
    "name": "format_field",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "str",
      "arg": "conversion"
     }
    ],
    "className": "string.Formatter",
    "kwonlyargs": [],
    "name": "convert_field",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "_curses.error",
  "fields": [],
  "methods": []
 },
 {
  "className": "binascii.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "binascii.Incomplete",
  "fields": [],
  "methods": []
 },
 {
  "className": "logging.Filterer",
  "fields": [
   {
    "annotation": "list[Filter]",
    "className": "logging.Filterer",
    "name": "filters"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Filterer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_FilterType",
      "arg": "filter"
     }
    ],
    "className": "logging.Filterer",
    "kwonlyargs": [],
    "name": "addFilter",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_FilterType",
      "arg": "filter"
     }
    ],
    "className": "logging.Filterer",
    "kwonlyargs": [],
    "name": "removeFilter",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Filterer",
    "kwonlyargs": [],
    "name": "filter",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "logging.Manager",
  "fields": [
   {
    "annotation": "RootLogger",
    "className": "logging.Manager",
    "name": "root"
   },
   {
    "annotation": "int",
    "className": "logging.Manager",
    "name": "disable"
   },
   {
    "annotation": "bool",
    "className": "logging.Manager",
    "name": "emittedNoHandlerWarning"
   },
   {
    "annotation": "dict[str, Logger | PlaceHolder]",
    "className": "logging.Manager",
    "name": "loggerDict"
   },
   {
    "annotation": "(type[Logger] | None)",
    "className": "logging.Manager",
    "name": "loggerClass"
   },
   {
    "annotation": "(Callable[..., LogRecord] | None)",
    "className": "logging.Manager",
    "name": "logRecordFactory"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "RootLogger",
      "arg": "rootnode"
     }
    ],
    "className": "logging.Manager",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "logging.Manager",
    "kwonlyargs": [],
    "name": "getLogger",
    "returns": "Logger"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[Logger]",
      "arg": "klass"
     }
    ],
    "className": "logging.Manager",
    "kwonlyargs": [],
    "name": "setLoggerClass",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., LogRecord]",
      "arg": "factory"
     }
    ],
    "className": "logging.Manager",
    "kwonlyargs": [],
    "name": "setLogRecordFactory",
    "returns": "None"
   }
  ]
 },
 {
  "className": "logging.Logger",
  "fields": [
   {
    "annotation": "str",
    "className": "logging.Logger",
    "name": "name"
   },
   {
    "annotation": "int",
    "className": "logging.Logger",
    "name": "level"
   },
   {
    "annotation": "(Logger | None)",
    "className": "logging.Logger",
    "name": "parent"
   },
   {
    "annotation": "bool",
    "className": "logging.Logger",
    "name": "propagate"
   },
   {
    "annotation": "list[Handler]",
    "className": "logging.Logger",
    "name": "handlers"
   },
   {
    "annotation": "bool",
    "className": "logging.Logger",
    "name": "disabled"
   },
   {
    "annotation": "ClassVar[RootLogger]",
    "className": "logging.Logger",
    "name": "root"
   },
   {
    "annotation": "Manager",
    "className": "logging.Logger",
    "name": "manager"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_Level",
      "arg": "level"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Level",
      "arg": "level"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "setLevel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "isEnabledFor",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "getEffectiveLevel",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "suffix"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "getChild",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "filter",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Handler",
      "arg": "hdlr"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "addHandler",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Handler",
      "arg": "hdlr"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "removeHandler",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "handle",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "int",
      "arg": "level"
     },
     {
      "annotation": "str",
      "arg": "fn"
     },
     {
      "annotation": "int",
      "arg": "lno"
     },
     {
      "annotation": "object",
      "arg": "msg"
     },
     {
      "annotation": "_ArgsType",
      "arg": "args"
     },
     {
      "annotation": "(_SysExcInfoType | None)",
      "arg": "exc_info"
     },
     {
      "annotation": "(str | None)",
      "arg": "func"
     },
     {
      "annotation": "(Mapping[str, object] | None)",
      "arg": "extra"
     },
     {
      "annotation": "(str | None)",
      "arg": "sinfo"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "makeRecord",
    "returns": "LogRecord"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "hasHandlers",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Logger",
    "kwonlyargs": [],
    "name": "callHandlers",
    "returns": "None"
   }
  ]
 },
 {
  "className": "logging.Handler",
  "fields": [
   {
    "annotation": "int",
    "className": "logging.Handler",
    "name": "level"
   },
   {
    "annotation": "(Formatter | None)",
    "className": "logging.Handler",
    "name": "formatter"
   },
   {
    "annotation": "(threading.Lock | None)",
    "className": "logging.Handler",
    "name": "lock"
   },
   {
    "annotation": "(str | None)",
    "className": "logging.Handler",
    "name": "name"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Level",
      "arg": "level"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "get_name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "set_name",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "createLock",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "acquire",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "release",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Level",
      "arg": "level"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "setLevel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Formatter | None)",
      "arg": "fmt"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "setFormatter",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "filter",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "handle",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "handleError",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "format",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Handler",
    "kwonlyargs": [],
    "name": "emit",
    "returns": "None"
   }
  ]
 },
 {
  "className": "logging.Formatter",
  "fields": [
   {
    "annotation": "Callable[[float | None], struct_time]",
    "className": "logging.Formatter",
    "name": "converter"
   },
   {
    "annotation": "(str | None)",
    "className": "logging.Formatter",
    "name": "_fmt"
   },
   {
    "annotation": "(str | None)",
    "className": "logging.Formatter",
    "name": "datefmt"
   },
   {
    "annotation": "PercentStyle",
    "className": "logging.Formatter",
    "name": "_style"
   },
   {
    "annotation": "str",
    "className": "logging.Formatter",
    "name": "default_time_format"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Formatter",
    "kwonlyargs": [],
    "name": "format",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     },
     {
      "annotation": "(str | None)",
      "arg": "datefmt"
     }
    ],
    "className": "logging.Formatter",
    "kwonlyargs": [],
    "name": "formatTime",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_SysExcInfoType",
      "arg": "ei"
     }
    ],
    "className": "logging.Formatter",
    "kwonlyargs": [],
    "name": "formatException",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Formatter",
    "kwonlyargs": [],
    "name": "formatMessage",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "stack_info"
     }
    ],
    "className": "logging.Formatter",
    "kwonlyargs": [],
    "name": "formatStack",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.Formatter",
    "kwonlyargs": [],
    "name": "usesTime",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "logging.BufferingFormatter",
  "fields": [
   {
    "annotation": "Formatter",
    "className": "logging.BufferingFormatter",
    "name": "linefmt"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Formatter | None)",
      "arg": "linefmt"
     }
    ],
    "className": "logging.BufferingFormatter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[LogRecord]",
      "arg": "records"
     }
    ],
    "className": "logging.BufferingFormatter",
    "kwonlyargs": [],
    "name": "formatHeader",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[LogRecord]",
      "arg": "records"
     }
    ],
    "className": "logging.BufferingFormatter",
    "kwonlyargs": [],
    "name": "formatFooter",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[LogRecord]",
      "arg": "records"
     }
    ],
    "className": "logging.BufferingFormatter",
    "kwonlyargs": [],
    "name": "format",
    "returns": "str"
   }
  ]
 },
 {
  "className": "logging.Filter",
  "fields": [
   {
    "annotation": "str",
    "className": "logging.Filter",
    "name": "name"
   },
   {
    "annotation": "int",
    "className": "logging.Filter",
    "name": "nlen"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "logging.Filter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "LogRecord",
      "arg": "record"
     }
    ],
    "className": "logging.Filter",
    "kwonlyargs": [],
    "name": "filter",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "logging.LogRecord",
  "fields": [
   {
    "annotation": "(_ArgsType | None)",
    "className": "logging.LogRecord",
    "name": "args"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "asctime"
   },
   {
    "annotation": "float",
    "className": "logging.LogRecord",
    "name": "created"
   },
   {
    "annotation": "(_SysExcInfoType | None)",
    "className": "logging.LogRecord",
    "name": "exc_info"
   },
   {
    "annotation": "(str | None)",
    "className": "logging.LogRecord",
    "name": "exc_text"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "filename"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "funcName"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "levelname"
   },
   {
    "annotation": "int",
    "className": "logging.LogRecord",
    "name": "levelno"
   },
   {
    "annotation": "int",
    "className": "logging.LogRecord",
    "name": "lineno"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "module"
   },
   {
    "annotation": "float",
    "className": "logging.LogRecord",
    "name": "msecs"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "message"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "msg"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "name"
   },
   {
    "annotation": "str",
    "className": "logging.LogRecord",
    "name": "pathname"
   },
   {
    "annotation": "(int | None)",
    "className": "logging.LogRecord",
    "name": "process"
   },
   {
    "annotation": "(str | None)",
    "className": "logging.LogRecord",
    "name": "processName"
   },
   {
    "annotation": "float",
    "className": "logging.LogRecord",
    "name": "relativeCreated"
   },
   {
    "annotation": "(str | None)",
    "className": "logging.LogRecord",
    "name": "stack_info"
   },
   {
    "annotation": "(int | None)",
    "className": "logging.LogRecord",
    "name": "thread"
   },
   {
    "annotation": "(str | None)",
    "className": "logging.LogRecord",
    "name": "threadName"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "int",
      "arg": "level"
     },
     {
      "annotation": "str",
      "arg": "pathname"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     },
     {
      "annotation": "object",
      "arg": "msg"
     },
     {
      "annotation": "(_ArgsType | None)",
      "arg": "args"
     },
     {
      "annotation": "(_SysExcInfoType | None)",
      "arg": "exc_info"
     },
     {
      "annotation": "(str | None)",
      "arg": "func"
     },
     {
      "annotation": "(str | None)",
      "arg": "sinfo"
     }
    ],
    "className": "logging.LogRecord",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.LogRecord",
    "kwonlyargs": [],
    "name": "getMessage",
    "returns": "str"
   }
  ]
 },
 {
  "className": "logging.LoggerAdapter",
  "fields": [
   {
    "annotation": "_L",
    "className": "logging.LoggerAdapter",
    "name": "logger"
   },
   {
    "annotation": "Manager",
    "className": "logging.LoggerAdapter",
    "name": "manager"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "msg"
     },
     {
      "annotation": "MutableMapping[str, Any]",
      "arg": "kwargs"
     }
    ],
    "className": "logging.LoggerAdapter",
    "kwonlyargs": [],
    "name": "process",
    "returns": "tuple[Any, MutableMapping[str, Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "logging.LoggerAdapter",
    "kwonlyargs": [],
    "name": "isEnabledFor",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.LoggerAdapter",
    "kwonlyargs": [],
    "name": "getEffectiveLevel",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Level",
      "arg": "level"
     }
    ],
    "className": "logging.LoggerAdapter",
    "kwonlyargs": [],
    "name": "setLevel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.LoggerAdapter",
    "kwonlyargs": [],
    "name": "hasHandlers",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     },
     {
      "annotation": "object",
      "arg": "msg"
     },
     {
      "annotation": "_ArgsType",
      "arg": "args"
     },
     {
      "annotation": "(_ExcInfoType | None)",
      "arg": "exc_info"
     },
     {
      "annotation": "(Mapping[str, object] | None)",
      "arg": "extra"
     },
     {
      "annotation": "bool",
      "arg": "stack_info"
     }
    ],
    "className": "logging.LoggerAdapter",
    "kwonlyargs": [],
    "name": "_log",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.LoggerAdapter",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   }
  ]
 },
 {
  "className": "logging.StreamHandler",
  "fields": [
   {
    "annotation": "_StreamT",
    "className": "logging.StreamHandler",
    "name": "stream"
   },
   {
    "annotation": "str",
    "className": "logging.StreamHandler",
    "name": "terminator"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "StreamHandler[TextIO]",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "stream"
     }
    ],
    "className": "logging.StreamHandler",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "StreamHandler[_StreamT]",
      "arg": "self"
     },
     {
      "annotation": "_StreamT",
      "arg": "stream"
     }
    ],
    "className": "logging.StreamHandler",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "logging.FileHandler",
  "fields": [
   {
    "annotation": "str",
    "className": "logging.FileHandler",
    "name": "baseFilename"
   },
   {
    "annotation": "str",
    "className": "logging.FileHandler",
    "name": "mode"
   },
   {
    "annotation": "(str | None)",
    "className": "logging.FileHandler",
    "name": "encoding"
   },
   {
    "annotation": "bool",
    "className": "logging.FileHandler",
    "name": "delay"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.FileHandler",
    "kwonlyargs": [],
    "name": "_open",
    "returns": "TextIOWrapper"
   }
  ]
 },
 {
  "className": "logging.NullHandler",
  "fields": [],
  "methods": []
 },
 {
  "className": "logging.PlaceHolder",
  "fields": [
   {
    "annotation": "dict[Logger, None]",
    "className": "logging.PlaceHolder",
    "name": "loggerMap"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Logger",
      "arg": "alogger"
     }
    ],
    "className": "logging.PlaceHolder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Logger",
      "arg": "alogger"
     }
    ],
    "className": "logging.PlaceHolder",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   }
  ]
 },
 {
  "className": "logging.RootLogger",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "logging.RootLogger",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "logging.PercentStyle",
  "fields": [
   {
    "annotation": "str",
    "className": "logging.PercentStyle",
    "name": "default_format"
   },
   {
    "annotation": "str",
    "className": "logging.PercentStyle",
    "name": "asctime_format"
   },
   {
    "annotation": "str",
    "className": "logging.PercentStyle",
    "name": "asctime_search"
   },
   {
    "annotation": "str",
    "className": "logging.PercentStyle",
    "name": "_fmt"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "logging.PercentStyle",
    "kwonlyargs": [],
    "name": "usesTime",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "record"
     }
    ],
    "className": "logging.PercentStyle",
    "kwonlyargs": [],
    "name": "format",
    "returns": "str"
   }
  ]
 },
 {
  "className": "logging.StrFormatStyle",
  "fields": [],
  "methods": []
 },
 {
  "className": "logging.StringTemplateStyle",
  "fields": [
   {
    "annotation": "Template",
    "className": "logging.StringTemplateStyle",
    "name": "_tpl"
   }
  ],
  "methods": []
 },
 {
  "className": "binhex.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "binhex.FInfo",
  "fields": [
   {
    "annotation": "str",
    "className": "binhex.FInfo",
    "name": "Type"
   },
   {
    "annotation": "str",
    "className": "binhex.FInfo",
    "name": "Creator"
   },
   {
    "annotation": "int",
    "className": "binhex.FInfo",
    "name": "Flags"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.FInfo",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "binhex.openrsrc",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.openrsrc",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.openrsrc",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.openrsrc",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.openrsrc",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "binhex.BinHex",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_FileInfoTuple",
      "arg": "name_finfo_dlen_rlen"
     },
     {
      "annotation": "_FileHandleUnion",
      "arg": "ofp"
     }
    ],
    "className": "binhex.BinHex",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "binhex.BinHex",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.BinHex",
    "kwonlyargs": [],
    "name": "close_data",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "binhex.BinHex",
    "kwonlyargs": [],
    "name": "write_rsrc",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.BinHex",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "binhex.HexBin",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_FileHandleUnion",
      "arg": "ifp"
     }
    ],
    "className": "binhex.HexBin",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.HexBin",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.HexBin",
    "kwonlyargs": [],
    "name": "close_data",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.HexBin",
    "kwonlyargs": [],
    "name": "read_rsrc",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "binhex.HexBin",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "lzma.LZMADecompressor",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(int | None)",
      "arg": "memlimit"
     },
     {
      "annotation": "(_FilterChain | None)",
      "arg": "filters"
     }
    ],
    "className": "lzma.LZMADecompressor",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     },
     {
      "annotation": "int",
      "arg": "max_length"
     }
    ],
    "className": "lzma.LZMADecompressor",
    "kwonlyargs": [],
    "name": "decompress",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMADecompressor",
    "kwonlyargs": [],
    "name": "check",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMADecompressor",
    "kwonlyargs": [],
    "name": "eof",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMADecompressor",
    "kwonlyargs": [],
    "name": "unused_data",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMADecompressor",
    "kwonlyargs": [],
    "name": "needs_input",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "lzma.LZMACompressor",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "int",
      "arg": "check"
     },
     {
      "annotation": "(int | None)",
      "arg": "preset"
     },
     {
      "annotation": "(_FilterChain | None)",
      "arg": "filters"
     }
    ],
    "className": "lzma.LZMACompressor",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__data"
     }
    ],
    "className": "lzma.LZMACompressor",
    "kwonlyargs": [],
    "name": "compress",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMACompressor",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "lzma.LZMAError",
  "fields": [],
  "methods": []
 },
 {
  "className": "lzma.LZMAFile",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_PathOrFile | None)",
      "arg": "filename"
     },
     {
      "annotation": "str",
      "arg": "mode"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "int",
      "arg": "check"
     },
     {
      "annotation": "(int | None)",
      "arg": "preset"
     },
     {
      "annotation": "(_FilterChain | None)",
      "arg": "filters"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "closed",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "seekable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "peek",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "read1",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "offset"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "lzma.LZMAFile",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   }
  ]
 },
 {
  "className": "struct.error",
  "fields": [],
  "methods": []
 },
 {
  "className": "struct.Struct",
  "fields": [
   {
    "annotation": "int",
    "className": "struct.Struct",
    "name": "size"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | bytes)",
      "arg": "format"
     }
    ],
    "className": "struct.Struct",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "struct.Struct",
    "kwonlyargs": [],
    "name": "pack",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "buffer"
     },
     {
      "annotation": "int",
      "arg": "offset"
     }
    ],
    "className": "struct.Struct",
    "kwonlyargs": [],
    "name": "pack_into",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__buffer"
     }
    ],
    "className": "struct.Struct",
    "kwonlyargs": [],
    "name": "unpack",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "buffer"
     },
     {
      "annotation": "int",
      "arg": "offset"
     }
    ],
    "className": "struct.Struct",
    "kwonlyargs": [],
    "name": "unpack_from",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__buffer"
     }
    ],
    "className": "struct.Struct",
    "kwonlyargs": [],
    "name": "iter_unpack",
    "returns": "Iterator[tuple[Any, ...]]"
   }
  ]
 },
 {
  "className": "mailbox.Mailbox",
  "fields": [
   {
    "annotation": "(bytes | str)",
    "className": "mailbox.Mailbox",
    "name": "_path"
   },
   {
    "annotation": "(Callable[[IO[Any]], _MessageT] | None)",
    "className": "mailbox.Mailbox",
    "name": "_factory"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "path"
     },
     {
      "annotation": "(Callable[[IO[Any]], _MessageT] | None)",
      "arg": "factory"
     },
     {
      "annotation": "bool",
      "arg": "create"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MessageData",
      "arg": "message"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "add",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "discard",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "_MessageData",
      "arg": "message"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "None",
      "arg": "default"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_MessageT | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "_T",
      "arg": "default"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_MessageT | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_MessageT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "get_message",
    "returns": "_MessageT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "get_string",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "get_bytes",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "get_file",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "iterkeys",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "itervalues",
    "returns": "Iterator[_MessageT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_MessageT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "values",
    "returns": "list[_MessageT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "iteritems",
    "returns": "Iterator[tuple[str, _MessageT]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "items",
    "returns": "list[tuple[str, _MessageT]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "None",
      "arg": "default"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "(_MessageT | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "_T",
      "arg": "default"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "(_MessageT | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "popitem",
    "returns": "tuple[str, _MessageT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_HasIteritems | _HasItems | Iterable[tuple[str, _MessageData]] | None)",
      "arg": "arg"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "lock",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "unlock",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Mailbox",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "mailbox.Maildir",
  "fields": [
   {
    "annotation": "str",
    "className": "mailbox.Maildir",
    "name": "colon"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "dirname"
     },
     {
      "annotation": "(Callable[[IO[Any]], MaildirMessage] | None)",
      "arg": "factory"
     },
     {
      "annotation": "bool",
      "arg": "create"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MessageData",
      "arg": "message"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "add",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "_MessageData",
      "arg": "message"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "get_message",
    "returns": "MaildirMessage"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "get_bytes",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "get_file",
    "returns": "_ProxyFile[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "iterkeys",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "lock",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "unlock",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "list_folders",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "folder"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "get_folder",
    "returns": "Maildir"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "folder"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "add_folder",
    "returns": "Maildir"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "folder"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "remove_folder",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "clean",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Maildir",
    "kwonlyargs": [],
    "name": "next",
    "returns": "(str | None)"
   }
  ]
 },
 {
  "className": "mailbox.mbox",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "path"
     },
     {
      "annotation": "(Callable[[IO[Any]], mboxMessage] | None)",
      "arg": "factory"
     },
     {
      "annotation": "bool",
      "arg": "create"
     }
    ],
    "className": "mailbox.mbox",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "mailbox.MMDF",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "path"
     },
     {
      "annotation": "(Callable[[IO[Any]], MMDFMessage] | None)",
      "arg": "factory"
     },
     {
      "annotation": "bool",
      "arg": "create"
     }
    ],
    "className": "mailbox.MMDF",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "mailbox.MH",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "path"
     },
     {
      "annotation": "(Callable[[IO[Any]], MHMessage] | None)",
      "arg": "factory"
     },
     {
      "annotation": "bool",
      "arg": "create"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MessageData",
      "arg": "message"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "add",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "_MessageData",
      "arg": "message"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "get_message",
    "returns": "MHMessage"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "get_bytes",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "get_file",
    "returns": "_ProxyFile[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "iterkeys",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "lock",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "unlock",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "list_folders",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "folder"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "get_folder",
    "returns": "MH"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "folder"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "add_folder",
    "returns": "MH"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "folder"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "remove_folder",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "get_sequences",
    "returns": "dict[str, list[int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, Sequence[int]]",
      "arg": "sequences"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "set_sequences",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MH",
    "kwonlyargs": [],
    "name": "pack",
    "returns": "None"
   }
  ]
 },
 {
  "className": "mailbox.Babyl",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "path"
     },
     {
      "annotation": "(Callable[[IO[Any]], BabylMessage] | None)",
      "arg": "factory"
     },
     {
      "annotation": "bool",
      "arg": "create"
     }
    ],
    "className": "mailbox.Babyl",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Babyl",
    "kwonlyargs": [],
    "name": "get_message",
    "returns": "BabylMessage"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Babyl",
    "kwonlyargs": [],
    "name": "get_bytes",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "mailbox.Babyl",
    "kwonlyargs": [],
    "name": "get_file",
    "returns": "IO[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.Babyl",
    "kwonlyargs": [],
    "name": "get_labels",
    "returns": "list[str]"
   }
  ]
 },
 {
  "className": "mailbox.Message",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_MessageData | None)",
      "arg": "message"
     }
    ],
    "className": "mailbox.Message",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "mailbox.MaildirMessage",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "get_subdir",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal['new', 'cur']",
      "arg": "subdir"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "set_subdir",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "get_flags",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "flags"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "set_flags",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "flag"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "add_flag",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "flag"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "remove_flag",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "get_date",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "date"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "set_date",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "get_info",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "info"
     }
    ],
    "className": "mailbox.MaildirMessage",
    "kwonlyargs": [],
    "name": "set_info",
    "returns": "None"
   }
  ]
 },
 {
  "className": "mailbox.mboxMessage",
  "fields": [],
  "methods": []
 },
 {
  "className": "mailbox.MHMessage",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.MHMessage",
    "kwonlyargs": [],
    "name": "get_sequences",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "sequences"
     }
    ],
    "className": "mailbox.MHMessage",
    "kwonlyargs": [],
    "name": "set_sequences",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sequence"
     }
    ],
    "className": "mailbox.MHMessage",
    "kwonlyargs": [],
    "name": "add_sequence",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sequence"
     }
    ],
    "className": "mailbox.MHMessage",
    "kwonlyargs": [],
    "name": "remove_sequence",
    "returns": "None"
   }
  ]
 },
 {
  "className": "mailbox.BabylMessage",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.BabylMessage",
    "kwonlyargs": [],
    "name": "get_labels",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "labels"
     }
    ],
    "className": "mailbox.BabylMessage",
    "kwonlyargs": [],
    "name": "set_labels",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "label"
     }
    ],
    "className": "mailbox.BabylMessage",
    "kwonlyargs": [],
    "name": "add_label",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "label"
     }
    ],
    "className": "mailbox.BabylMessage",
    "kwonlyargs": [],
    "name": "remove_label",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.BabylMessage",
    "kwonlyargs": [],
    "name": "get_visible",
    "returns": "Message"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MessageData",
      "arg": "visible"
     }
    ],
    "className": "mailbox.BabylMessage",
    "kwonlyargs": [],
    "name": "set_visible",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mailbox.BabylMessage",
    "kwonlyargs": [],
    "name": "update_visible",
    "returns": "None"
   }
  ]
 },
 {
  "className": "mailbox.MMDFMessage",
  "fields": [],
  "methods": []
 },
 {
  "className": "mailbox.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "mailbox.NoSuchMailboxError",
  "fields": [],
  "methods": []
 },
 {
  "className": "mailbox.NotEmptyError",
  "fields": [],
  "methods": []
 },
 {
  "className": "mailbox.ExternalClashError",
  "fields": [],
  "methods": []
 },
 {
  "className": "mailbox.FormatError",
  "fields": [],
  "methods": []
 },
 {
  "className": "subprocess.CompletedProcess",
  "fields": [
   {
    "annotation": "Any",
    "className": "subprocess.CompletedProcess",
    "name": "args"
   },
   {
    "annotation": "int",
    "className": "subprocess.CompletedProcess",
    "name": "returncode"
   },
   {
    "annotation": "_T",
    "className": "subprocess.CompletedProcess",
    "name": "stdout"
   },
   {
    "annotation": "_T",
    "className": "subprocess.CompletedProcess",
    "name": "stderr"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_CMD",
      "arg": "args"
     },
     {
      "annotation": "int",
      "arg": "returncode"
     },
     {
      "annotation": "(_T | None)",
      "arg": "stdout"
     },
     {
      "annotation": "(_T | None)",
      "arg": "stderr"
     }
    ],
    "className": "subprocess.CompletedProcess",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "subprocess.CompletedProcess",
    "kwonlyargs": [],
    "name": "check_returncode",
    "returns": "None"
   }
  ]
 },
 {
  "className": "subprocess.SubprocessError",
  "fields": [],
  "methods": []
 },
 {
  "className": "subprocess.TimeoutExpired",
  "fields": [
   {
    "annotation": "Any",
    "className": "subprocess.TimeoutExpired",
    "name": "cmd"
   },
   {
    "annotation": "float",
    "className": "subprocess.TimeoutExpired",
    "name": "timeout"
   },
   {
    "annotation": "Any",
    "className": "subprocess.TimeoutExpired",
    "name": "output"
   },
   {
    "annotation": "Any",
    "className": "subprocess.TimeoutExpired",
    "name": "stdout"
   },
   {
    "annotation": "Any",
    "className": "subprocess.TimeoutExpired",
    "name": "stderr"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_CMD",
      "arg": "cmd"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     },
     {
      "annotation": "(_TXT | None)",
      "arg": "output"
     },
     {
      "annotation": "(_TXT | None)",
      "arg": "stderr"
     }
    ],
    "className": "subprocess.TimeoutExpired",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "subprocess.CalledProcessError",
  "fields": [
   {
    "annotation": "int",
    "className": "subprocess.CalledProcessError",
    "name": "returncode"
   },
   {
    "annotation": "Any",
    "className": "subprocess.CalledProcessError",
    "name": "cmd"
   },
   {
    "annotation": "Any",
    "className": "subprocess.CalledProcessError",
    "name": "output"
   },
   {
    "annotation": "Any",
    "className": "subprocess.CalledProcessError",
    "name": "stdout"
   },
   {
    "annotation": "Any",
    "className": "subprocess.CalledProcessError",
    "name": "stderr"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "returncode"
     },
     {
      "annotation": "_CMD",
      "arg": "cmd"
     },
     {
      "annotation": "(_TXT | None)",
      "arg": "output"
     },
     {
      "annotation": "(_TXT | None)",
      "arg": "stderr"
     }
    ],
    "className": "subprocess.CalledProcessError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "subprocess.Popen",
  "fields": [
   {
    "annotation": "_CMD",
    "className": "subprocess.Popen",
    "name": "args"
   },
   {
    "annotation": "(IO[AnyStr] | None)",
    "className": "subprocess.Popen",
    "name": "stdin"
   },
   {
    "annotation": "(IO[AnyStr] | None)",
    "className": "subprocess.Popen",
    "name": "stdout"
   },
   {
    "annotation": "(IO[AnyStr] | None)",
    "className": "subprocess.Popen",
    "name": "stderr"
   },
   {
    "annotation": "int",
    "className": "subprocess.Popen",
    "name": "pid"
   },
   {
    "annotation": "int",
    "className": "subprocess.Popen",
    "name": "returncode"
   },
   {
    "annotation": "bool",
    "className": "subprocess.Popen",
    "name": "universal_newlines"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "subprocess.Popen",
    "kwonlyargs": [],
    "name": "poll",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(AnyStr | None)",
      "arg": "input"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "subprocess.Popen",
    "kwonlyargs": [],
    "name": "communicate",
    "returns": "tuple[AnyStr, AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "sig"
     }
    ],
    "className": "subprocess.Popen",
    "kwonlyargs": [],
    "name": "send_signal",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "subprocess.Popen",
    "kwonlyargs": [],
    "name": "terminate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "subprocess.Popen",
    "kwonlyargs": [],
    "name": "kill",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "subprocess.Popen",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "traceback"
     }
    ],
    "className": "subprocess.Popen",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.object",
  "fields": [
   {
    "annotation": "(str | None)",
    "className": "builtins.object",
    "name": "__doc__"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "builtins.object",
    "name": "__dict__"
   },
   {
    "annotation": "str",
    "className": "builtins.object",
    "name": "__module__"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "builtins.object",
    "name": "__annotations__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__class__",
    "returns": "type[Self]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[object]",
      "arg": "__type"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__class__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__setattr__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__delattr__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__str__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__repr__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__format_spec"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__format__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__getattribute__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__sizeof__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__reduce__",
    "returns": "(str | tuple[Any, ...])"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__dir__",
    "returns": "Iterable[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "builtins.object",
    "kwonlyargs": [],
    "name": "__init_subclass__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.staticmethod",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.staticmethod",
    "kwonlyargs": [],
    "name": "__func__",
    "returns": "Callable[..., _R_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.staticmethod",
    "kwonlyargs": [],
    "name": "__isabstractmethod__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "staticmethod[_R_co]",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _R_co]",
      "arg": "__f"
     }
    ],
    "className": "builtins.staticmethod",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__obj"
     },
     {
      "annotation": "(type[_T] | None)",
      "arg": "__type"
     }
    ],
    "className": "builtins.staticmethod",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Callable[..., _R_co]"
   }
  ]
 },
 {
  "className": "builtins.classmethod",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.classmethod",
    "kwonlyargs": [],
    "name": "__func__",
    "returns": "Callable[..., _R_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.classmethod",
    "kwonlyargs": [],
    "name": "__isabstractmethod__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "classmethod[_R_co]",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _R_co]",
      "arg": "__f"
     }
    ],
    "className": "builtins.classmethod",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__obj"
     },
     {
      "annotation": "(type[_T] | None)",
      "arg": "__type"
     }
    ],
    "className": "builtins.classmethod",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Callable[..., _R_co]"
   }
  ]
 },
 {
  "className": "builtins.type",
  "fields": [
   {
    "annotation": "tuple[type, ...]",
    "className": "builtins.type",
    "name": "__bases__"
   },
   {
    "annotation": "str",
    "className": "builtins.type",
    "name": "__module__"
   },
   {
    "annotation": "str",
    "className": "builtins.type",
    "name": "__name__"
   },
   {
    "annotation": "str",
    "className": "builtins.type",
    "name": "__qualname__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__base__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__basicsize__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__dict__",
    "returns": "types.MappingProxyType[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__dictoffset__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__flags__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__itemsize__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__mro__",
    "returns": "tuple[type, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__text_signature__",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__weakrefoffset__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "tuple[type, ...]",
      "arg": "__bases"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "__dict"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "tuple[type, ...]",
      "arg": "__bases"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "__namespace"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__subclasses__",
    "returns": "list[Self]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "mro",
    "returns": "list[type]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__instance"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__instancecheck__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type",
      "arg": "__subclass"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__subclasscheck__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "metacls"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "tuple[type, ...]",
      "arg": "__bases"
     }
    ],
    "className": "builtins.type",
    "kwonlyargs": [],
    "name": "__prepare__",
    "returns": "Mapping[str, object]"
   }
  ]
 },
 {
  "className": "builtins.super",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__t"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     }
    ],
    "className": "builtins.super",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__t"
     }
    ],
    "className": "builtins.super",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.super",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.int",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(str | ReadableBuffer | SupportsInt | SupportsIndex | SupportsTrunc)",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(str | bytes | bytearray)",
      "arg": "__x"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "base"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "real",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "imag",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "numerator",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "denominator",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "conjugate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "bit_length",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__floordiv__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__divmod__",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rfloordiv__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rmod__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rdivmod__",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     },
     {
      "annotation": "Literal[0]",
      "arg": "__modulo"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     },
     {
      "annotation": "int",
      "arg": "__modulo"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[0]",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__modulo"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "Literal[1]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_PositiveInteger",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__modulo"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_NegativeInteger",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__modulo"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__modulo"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     },
     {
      "annotation": "(int | None)",
      "arg": "__mod"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rpow__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__lshift__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rshift__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rand__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rxor__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rlshift__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__rrshift__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__invert__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__trunc__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__ceil__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__floor__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__ndigits"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__getnewargs__",
    "returns": "tuple[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__float__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__int__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__abs__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.int",
    "kwonlyargs": [],
    "name": "__index__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "builtins.float",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(SupportsFloat | SupportsIndex | str | ReadableBuffer)",
      "arg": "x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "as_integer_ratio",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "hex",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "is_integer",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "__s"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "fromhex",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "real",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "imag",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "conjugate",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__floordiv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__divmod__",
    "returns": "tuple[float, float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__mod"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__mod"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__rfloordiv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__rmod__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__rdivmod__",
    "returns": "tuple[float, float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__mod"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__rpow__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__getnewargs__",
    "returns": "tuple[float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__trunc__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "__ndigits"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__ndigits"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__int__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__float__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__abs__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.float",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "builtins.complex",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "float",
      "arg": "real"
     },
     {
      "annotation": "float",
      "arg": "imag"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(str | SupportsComplex | SupportsIndex | complex)",
      "arg": "real"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "real",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "imag",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "conjugate",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__mod"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     },
     {
      "annotation": "None",
      "arg": "__mod"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__rpow__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__abs__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.complex",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "builtins.str",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "object"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "capitalize",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "casefold",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "str",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "center",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "x"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "encode",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | tuple[str, ...])",
      "arg": "__suffix"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "endswith",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "find",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "format",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_FormatMapMapping",
      "arg": "map"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "format_map",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isalnum",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isalpha",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isdecimal",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isdigit",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isidentifier",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "islower",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isnumeric",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isprintable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isspace",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "istitle",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "isupper",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "join",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "str",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "ljust",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "lower",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "__chars"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "lstrip",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__sep"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "partition",
    "returns": "tuple[str, str, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__old"
     },
     {
      "annotation": "str",
      "arg": "__new"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__count"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "replace",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "rfind",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "rindex",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "str",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "rjust",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__sep"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "rpartition",
    "returns": "tuple[str, str, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sep"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "maxsplit"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "rsplit",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "__chars"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "rstrip",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sep"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "maxsplit"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "split",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "keepends"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "splitlines",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | tuple[str, ...])",
      "arg": "__prefix"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "startswith",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "__chars"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "strip",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "swapcase",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "title",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[int, int | str | None] | Sequence[int | str | None])",
      "arg": "__table"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "translate",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "upper",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "zfill",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "(dict[int, _T] | dict[str, _T] | dict[str | int, _T])",
      "arg": "__x"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "maketrans",
    "returns": "dict[int, _T]"
   },
   {
    "args": [
     {
      "annotation": "str",
      "arg": "__x"
     },
     {
      "annotation": "str",
      "arg": "__y"
     },
     {
      "annotation": "(str | None)",
      "arg": "__z"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "maketrans",
    "returns": "dict[int, int | None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__s"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__o"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__x"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(SupportsIndex | slice)",
      "arg": "__i"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__x"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__x"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__x"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__x"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.str",
    "kwonlyargs": [],
    "name": "__getnewargs__",
    "returns": "tuple[str]"
   }
  ]
 },
 {
  "className": "builtins.bytes",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[SupportsIndex]",
      "arg": "__ints"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "__string"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__length"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "SupportsBytes",
      "arg": "__o"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "capitalize",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "bytes",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "center",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "decode",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | tuple[ReadableBuffer, ...])",
      "arg": "__suffix"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "endswith",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "find",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "isalnum",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "isalpha",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "isdigit",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "islower",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "isspace",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "istitle",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "isupper",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[ReadableBuffer]",
      "arg": "__iterable_of_bytes"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "join",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "(bytes | bytearray)",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "ljust",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "lower",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "__bytes"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "lstrip",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__sep"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "partition",
    "returns": "tuple[bytes, bytes, bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__old"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__new"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__count"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "replace",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "rfind",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "rindex",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "(bytes | bytearray)",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "rjust",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__sep"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "rpartition",
    "returns": "tuple[bytes, bytes, bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "sep"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "maxsplit"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "rsplit",
    "returns": "list[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "__bytes"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "rstrip",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "sep"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "maxsplit"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "split",
    "returns": "list[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "keepends"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "splitlines",
    "returns": "list[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | tuple[ReadableBuffer, ...])",
      "arg": "__prefix"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "startswith",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "__bytes"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "strip",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "swapcase",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "title",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "__table"
     },
     {
      "annotation": "bytes",
      "arg": "delete"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "translate",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "upper",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "zfill",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "__s"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "fromhex",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "ReadableBuffer",
      "arg": "__frm"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__to"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "maketrans",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__s"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(SupportsIndex | bytes)",
      "arg": "__o"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytes",
    "kwonlyargs": [],
    "name": "__getnewargs__",
    "returns": "tuple[bytes]"
   }
  ]
 },
 {
  "className": "builtins.bytearray",
  "fields": [
   {
    "annotation": "ClassVar[None]",
    "className": "builtins.bytearray",
    "name": "__hash__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[SupportsIndex]",
      "arg": "__ints"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__string"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__length"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__item"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "capitalize",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "bytes",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "center",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "decode",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | tuple[ReadableBuffer, ...])",
      "arg": "__suffix"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "endswith",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[SupportsIndex]",
      "arg": "__iterable_of_ints"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "extend",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "find",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__index"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__item"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "isalnum",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "isalpha",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "isdigit",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "islower",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "isspace",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "istitle",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "isupper",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[ReadableBuffer]",
      "arg": "__iterable_of_bytes"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "join",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "(bytes | bytearray)",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "ljust",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "lower",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "__bytes"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "lstrip",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__sep"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "partition",
    "returns": "tuple[bytearray, bytearray, bytearray]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__index"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__value"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__old"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__new"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__count"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "replace",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "rfind",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | SupportsIndex)",
      "arg": "__sub"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "rindex",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     },
     {
      "annotation": "(bytes | bytearray)",
      "arg": "__fillchar"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "rjust",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__sep"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "rpartition",
    "returns": "tuple[bytearray, bytearray, bytearray]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "sep"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "maxsplit"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "rsplit",
    "returns": "list[bytearray]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "__bytes"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "rstrip",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "sep"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "maxsplit"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "split",
    "returns": "list[bytearray]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "keepends"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "splitlines",
    "returns": "list[bytearray]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | tuple[ReadableBuffer, ...])",
      "arg": "__prefix"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__start"
     },
     {
      "annotation": "(SupportsIndex | None)",
      "arg": "__end"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "startswith",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "__bytes"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "strip",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "swapcase",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "title",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ReadableBuffer | None)",
      "arg": "__table"
     },
     {
      "annotation": "bytes",
      "arg": "delete"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "translate",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "upper",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__width"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "zfill",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "__string"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "fromhex",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "ReadableBuffer",
      "arg": "__frm"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__to"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "maketrans",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     },
     {
      "annotation": "(Iterable[SupportsIndex] | bytes)",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(SupportsIndex | slice)",
      "arg": "__i"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__s"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__s"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__iadd__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "bytearray"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__imul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(SupportsIndex | ReadableBuffer)",
      "arg": "__o"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__x"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bytearray",
    "kwonlyargs": [],
    "name": "__alloc__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "builtins.memoryview",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "format",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "itemsize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "shape",
    "returns": "(tuple[int, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "strides",
    "returns": "(tuple[int, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "suboffsets",
    "returns": "(tuple[int, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "readonly",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "ndim",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "obj",
    "returns": "(bytes | bytearray)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "c_contiguous",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "f_contiguous",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "contiguous",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "nbytes",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "obj"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "__exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "__exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__exc_tb"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "format"
     },
     {
      "annotation": "(list[int] | tuple[int, ...])",
      "arg": "shape"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "cast",
    "returns": "memoryview"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "memoryview"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__o"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__o"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "tolist",
    "returns": "list[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.memoryview",
    "kwonlyargs": [],
    "name": "release",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.bool",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__rand__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__rand__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__rxor__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__x"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__rxor__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.bool",
    "kwonlyargs": [],
    "name": "__getnewargs__",
    "returns": "tuple[int]"
   }
  ]
 },
 {
  "className": "builtins.slice",
  "fields": [
   {
    "annotation": "ClassVar[None]",
    "className": "builtins.slice",
    "name": "__hash__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.slice",
    "kwonlyargs": [],
    "name": "start",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.slice",
    "kwonlyargs": [],
    "name": "step",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.slice",
    "kwonlyargs": [],
    "name": "stop",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__stop"
     }
    ],
    "className": "builtins.slice",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__start"
     },
     {
      "annotation": "Any",
      "arg": "__stop"
     },
     {
      "annotation": "Any",
      "arg": "__step"
     }
    ],
    "className": "builtins.slice",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__len"
     }
    ],
    "className": "builtins.slice",
    "kwonlyargs": [],
    "name": "indices",
    "returns": "tuple[int, int, int]"
   }
  ]
 },
 {
  "className": "builtins.tuple",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T_co]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "tuple[_T_co, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[_T_co, ...]",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[_T_co, ...]",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[_T_co, ...]",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[_T_co, ...]",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[_T_co, ...]",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "tuple[_T_co, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[_T, ...]",
      "arg": "__x"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "tuple[_T_co | _T, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "tuple[_T_co, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "tuple[_T_co, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__start"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__stop"
     }
    ],
    "className": "builtins.tuple",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   }
  ]
 },
 {
  "className": "builtins.function",
  "fields": [
   {
    "annotation": "CodeType",
    "className": "builtins.function",
    "name": "__code__"
   },
   {
    "annotation": "(tuple[Any, ...] | None)",
    "className": "builtins.function",
    "name": "__defaults__"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "builtins.function",
    "name": "__dict__"
   },
   {
    "annotation": "str",
    "className": "builtins.function",
    "name": "__name__"
   },
   {
    "annotation": "str",
    "className": "builtins.function",
    "name": "__qualname__"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "builtins.function",
    "name": "__annotations__"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "builtins.function",
    "name": "__kwdefaults__"
   },
   {
    "annotation": "str",
    "className": "builtins.function",
    "name": "__module__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.function",
    "kwonlyargs": [],
    "name": "__closure__",
    "returns": "(tuple[_Cell, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.function",
    "kwonlyargs": [],
    "name": "__globals__",
    "returns": "dict[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(object | None)",
      "arg": "obj"
     },
     {
      "annotation": "(type | None)",
      "arg": "type"
     }
    ],
    "className": "builtins.function",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "builtins.list",
  "fields": [
   {
    "annotation": "ClassVar[None]",
    "className": "builtins.list",
    "name": "__hash__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__object"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "extend",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__index"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__value"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__start"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__stop"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__value"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__index"
     },
     {
      "annotation": "_T",
      "arg": "__object"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__value"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "list[SupportsRichComparisonT]",
      "arg": "self"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [
     {
      "annotation": "None",
      "arg": "key"
     },
     {
      "annotation": "bool",
      "arg": "reverse"
     }
    ],
    "name": "sort",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [
     {
      "annotation": "Callable[[_T], SupportsRichComparison]",
      "arg": "key"
     },
     {
      "annotation": "bool",
      "arg": "reverse"
     }
    ],
    "name": "sort",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     },
     {
      "annotation": "_T",
      "arg": "__o"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__o"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(SupportsIndex | slice)",
      "arg": "__i"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[_T]",
      "arg": "__x"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__x"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__iadd__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__n"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__imul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__reversed__",
    "returns": "Iterator[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[_T]",
      "arg": "__x"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[_T]",
      "arg": "__x"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[_T]",
      "arg": "__x"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[_T]",
      "arg": "__x"
     }
    ],
    "className": "builtins.list",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "builtins.dict",
  "fields": [
   {
    "annotation": "ClassVar[None]",
    "className": "builtins.dict",
    "name": "__hash__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "dict[_KT, _VT]",
      "arg": "self"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "dict[str, _VT]",
      "arg": "self"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsKeysAndGetItem[_KT, _VT]",
      "arg": "__map"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[tuple[_KT, _VT]]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "dict[str, str]",
      "arg": "self"
     },
     {
      "annotation": "Iterable[list[str]]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "dict[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "dict_keys[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "values",
    "returns": "dict_values[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "items",
    "returns": "dict_items[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     },
     {
      "annotation": "None",
      "arg": "__value"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "dict[_T, Any | None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     },
     {
      "annotation": "_S",
      "arg": "__value"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "dict[_T, _S]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_VT | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     },
     {
      "annotation": "(_VT | _T)",
      "arg": "__default"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_VT | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     },
     {
      "annotation": "(_VT | _T)",
      "arg": "__default"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "(_VT | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__k"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__k"
     },
     {
      "annotation": "_VT",
      "arg": "__v"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__v"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.dict",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_KT]"
   }
  ]
 },
 {
  "className": "builtins.set",
  "fields": [
   {
    "annotation": "ClassVar[None]",
    "className": "builtins.set",
    "name": "__hash__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__element"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "add",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "difference",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "difference_update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__element"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "discard",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "intersection",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "intersection_update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "isdisjoint",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "issubset",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "issuperset",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__element"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "symmetric_difference",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "symmetric_difference_update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "union",
    "returns": "set[_T | _S]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__iand__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_S]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "set[_T | _S]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__ior__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T | None]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__isub__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_S]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "set[_T | _S]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__ixor__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.set",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "builtins.frozenset",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T_co]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "frozenset[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "difference",
    "returns": "frozenset[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "intersection",
    "returns": "frozenset[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T_co]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "isdisjoint",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "issubset",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "issuperset",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T_co]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "symmetric_difference",
    "returns": "frozenset[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "union",
    "returns": "frozenset[_T_co | _S]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T_co]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "frozenset[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_S]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "frozenset[_T_co | _S]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T_co]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "frozenset[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_S]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "frozenset[_T_co | _S]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[object]",
      "arg": "__s"
     }
    ],
    "className": "builtins.frozenset",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "builtins.enumerate",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "int",
      "arg": "start"
     }
    ],
    "className": "builtins.enumerate",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "builtins.enumerate",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.enumerate",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "tuple[int, _T]"
   }
  ]
 },
 {
  "className": "builtins.range",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "start",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "stop",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "step",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__stop"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__start"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__stop"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__step"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__value"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__value"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "range"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.range",
    "kwonlyargs": [],
    "name": "__reversed__",
    "returns": "Iterator[int]"
   }
  ]
 },
 {
  "className": "builtins.property",
  "fields": [
   {
    "annotation": "(Callable[[Any], Any] | None)",
    "className": "builtins.property",
    "name": "fget"
   },
   {
    "annotation": "(Callable[[Any, Any], None] | None)",
    "className": "builtins.property",
    "name": "fset"
   },
   {
    "annotation": "(Callable[[Any], None] | None)",
    "className": "builtins.property",
    "name": "fdel"
   },
   {
    "annotation": "bool",
    "className": "builtins.property",
    "name": "__isabstractmethod__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[Any], Any] | None)",
      "arg": "fget"
     },
     {
      "annotation": "(Callable[[Any, Any], None] | None)",
      "arg": "fset"
     },
     {
      "annotation": "(Callable[[Any], None] | None)",
      "arg": "fdel"
     },
     {
      "annotation": "(str | None)",
      "arg": "doc"
     }
    ],
    "className": "builtins.property",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[Any], Any]",
      "arg": "__fget"
     }
    ],
    "className": "builtins.property",
    "kwonlyargs": [],
    "name": "getter",
    "returns": "property"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[Any, Any], None]",
      "arg": "__fset"
     }
    ],
    "className": "builtins.property",
    "kwonlyargs": [],
    "name": "setter",
    "returns": "property"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[Any], None]",
      "arg": "__fdel"
     }
    ],
    "className": "builtins.property",
    "kwonlyargs": [],
    "name": "deleter",
    "returns": "property"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     },
     {
      "annotation": "(type | None)",
      "arg": "__type"
     }
    ],
    "className": "builtins.property",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "builtins.property",
    "kwonlyargs": [],
    "name": "__set__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     }
    ],
    "className": "builtins.property",
    "kwonlyargs": [],
    "name": "__delete__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.filter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "__function"
     },
     {
      "annotation": "Iterable[_T | None]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.filter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[_S], TypeGuard[_T]]",
      "arg": "__function"
     },
     {
      "annotation": "Iterable[_S]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.filter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[_T], Any]",
      "arg": "__function"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "builtins.filter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "builtins.filter",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.filter",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "builtins.map",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[_T1], _S]",
      "arg": "__func"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     }
    ],
    "className": "builtins.map",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[_T1, _T2], _S]",
      "arg": "__func"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     }
    ],
    "className": "builtins.map",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[_T1, _T2, _T3], _S]",
      "arg": "__func"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     }
    ],
    "className": "builtins.map",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[_T1, _T2, _T3, _T4], _S]",
      "arg": "__func"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     }
    ],
    "className": "builtins.map",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[_T1, _T2, _T3, _T4, _T5], _S]",
      "arg": "__func"
     },
     {
      "annotation": "Iterable[_T1]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[_T2]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[_T3]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[_T4]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[_T5]",
      "arg": "__iter5"
     }
    ],
    "className": "builtins.map",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _S]",
      "arg": "__func"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter1"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter2"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter3"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter4"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter5"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__iter6"
     }
    ],
    "className": "builtins.map",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "builtins.map",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.map",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_S"
   }
  ]
 },
 {
  "className": "builtins.reversed",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Reversible[_T]",
      "arg": "__sequence"
     }
    ],
    "className": "builtins.reversed",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsLenAndGetItem[_T]",
      "arg": "__sequence"
     }
    ],
    "className": "builtins.reversed",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "builtins.reversed",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.reversed",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.reversed",
    "kwonlyargs": [],
    "name": "__length_hint__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "builtins.zip",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "builtins.zip",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.zip",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "builtins.ellipsis",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.BaseException",
  "fields": [
   {
    "annotation": "tuple[Any, ...]",
    "className": "builtins.BaseException",
    "name": "args"
   },
   {
    "annotation": "(BaseException | None)",
    "className": "builtins.BaseException",
    "name": "__cause__"
   },
   {
    "annotation": "(BaseException | None)",
    "className": "builtins.BaseException",
    "name": "__context__"
   },
   {
    "annotation": "bool",
    "className": "builtins.BaseException",
    "name": "__suppress_context__"
   },
   {
    "annotation": "(TracebackType | None)",
    "className": "builtins.BaseException",
    "name": "__traceback__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.BaseException",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "builtins.BaseException",
    "kwonlyargs": [],
    "name": "with_traceback",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "builtins.GeneratorExit",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.KeyboardInterrupt",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.SystemExit",
  "fields": [
   {
    "annotation": "int",
    "className": "builtins.SystemExit",
    "name": "code"
   }
  ],
  "methods": []
 },
 {
  "className": "builtins.Exception",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.StopIteration",
  "fields": [
   {
    "annotation": "Any",
    "className": "builtins.StopIteration",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "builtins.OSError",
  "fields": [
   {
    "annotation": "int",
    "className": "builtins.OSError",
    "name": "errno"
   },
   {
    "annotation": "str",
    "className": "builtins.OSError",
    "name": "strerror"
   },
   {
    "annotation": "Any",
    "className": "builtins.OSError",
    "name": "filename"
   },
   {
    "annotation": "Any",
    "className": "builtins.OSError",
    "name": "filename2"
   }
  ],
  "methods": []
 },
 {
  "className": "builtins.ArithmeticError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.AssertionError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.AttributeError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.BufferError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.EOFError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ImportError",
  "fields": [
   {
    "annotation": "(str | None)",
    "className": "builtins.ImportError",
    "name": "name"
   },
   {
    "annotation": "(str | None)",
    "className": "builtins.ImportError",
    "name": "path"
   },
   {
    "annotation": "str",
    "className": "builtins.ImportError",
    "name": "msg"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "builtins.ImportError",
    "kwonlyargs": [
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "path"
     }
    ],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.LookupError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.MemoryError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.NameError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ReferenceError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.RuntimeError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.StopAsyncIteration",
  "fields": [
   {
    "annotation": "Any",
    "className": "builtins.StopAsyncIteration",
    "name": "value"
   }
  ],
  "methods": []
 },
 {
  "className": "builtins.SyntaxError",
  "fields": [
   {
    "annotation": "str",
    "className": "builtins.SyntaxError",
    "name": "msg"
   },
   {
    "annotation": "(int | None)",
    "className": "builtins.SyntaxError",
    "name": "lineno"
   },
   {
    "annotation": "(int | None)",
    "className": "builtins.SyntaxError",
    "name": "offset"
   },
   {
    "annotation": "(str | None)",
    "className": "builtins.SyntaxError",
    "name": "text"
   },
   {
    "annotation": "(str | None)",
    "className": "builtins.SyntaxError",
    "name": "filename"
   }
  ],
  "methods": []
 },
 {
  "className": "builtins.SystemError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.TypeError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ValueError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.FloatingPointError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.OverflowError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ZeroDivisionError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ModuleNotFoundError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.IndexError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.KeyError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.UnboundLocalError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.BlockingIOError",
  "fields": [
   {
    "annotation": "int",
    "className": "builtins.BlockingIOError",
    "name": "characters_written"
   }
  ],
  "methods": []
 },
 {
  "className": "builtins.ChildProcessError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ConnectionError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.BrokenPipeError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ConnectionAbortedError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ConnectionRefusedError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ConnectionResetError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.FileExistsError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.FileNotFoundError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.InterruptedError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.IsADirectoryError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.NotADirectoryError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.PermissionError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ProcessLookupError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.TimeoutError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.NotImplementedError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.RecursionError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.IndentationError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.TabError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.UnicodeError",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.UnicodeDecodeError",
  "fields": [
   {
    "annotation": "str",
    "className": "builtins.UnicodeDecodeError",
    "name": "encoding"
   },
   {
    "annotation": "bytes",
    "className": "builtins.UnicodeDecodeError",
    "name": "object"
   },
   {
    "annotation": "int",
    "className": "builtins.UnicodeDecodeError",
    "name": "start"
   },
   {
    "annotation": "int",
    "className": "builtins.UnicodeDecodeError",
    "name": "end"
   },
   {
    "annotation": "str",
    "className": "builtins.UnicodeDecodeError",
    "name": "reason"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__encoding"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__object"
     },
     {
      "annotation": "int",
      "arg": "__start"
     },
     {
      "annotation": "int",
      "arg": "__end"
     },
     {
      "annotation": "str",
      "arg": "__reason"
     }
    ],
    "className": "builtins.UnicodeDecodeError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.UnicodeEncodeError",
  "fields": [
   {
    "annotation": "str",
    "className": "builtins.UnicodeEncodeError",
    "name": "encoding"
   },
   {
    "annotation": "str",
    "className": "builtins.UnicodeEncodeError",
    "name": "object"
   },
   {
    "annotation": "int",
    "className": "builtins.UnicodeEncodeError",
    "name": "start"
   },
   {
    "annotation": "int",
    "className": "builtins.UnicodeEncodeError",
    "name": "end"
   },
   {
    "annotation": "str",
    "className": "builtins.UnicodeEncodeError",
    "name": "reason"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__encoding"
     },
     {
      "annotation": "str",
      "arg": "__object"
     },
     {
      "annotation": "int",
      "arg": "__start"
     },
     {
      "annotation": "int",
      "arg": "__end"
     },
     {
      "annotation": "str",
      "arg": "__reason"
     }
    ],
    "className": "builtins.UnicodeEncodeError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.UnicodeTranslateError",
  "fields": [
   {
    "annotation": "None",
    "className": "builtins.UnicodeTranslateError",
    "name": "encoding"
   },
   {
    "annotation": "str",
    "className": "builtins.UnicodeTranslateError",
    "name": "object"
   },
   {
    "annotation": "int",
    "className": "builtins.UnicodeTranslateError",
    "name": "start"
   },
   {
    "annotation": "int",
    "className": "builtins.UnicodeTranslateError",
    "name": "end"
   },
   {
    "annotation": "str",
    "className": "builtins.UnicodeTranslateError",
    "name": "reason"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__object"
     },
     {
      "annotation": "int",
      "arg": "__start"
     },
     {
      "annotation": "int",
      "arg": "__end"
     },
     {
      "annotation": "str",
      "arg": "__reason"
     }
    ],
    "className": "builtins.UnicodeTranslateError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "builtins.Warning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.UserWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.DeprecationWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.SyntaxWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.RuntimeWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.FutureWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.PendingDeprecationWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ImportWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.UnicodeWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.BytesWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.ResourceWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "builtins.EncodingWarning",
  "fields": [],
  "methods": []
 },
 {
  "className": "sunau.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "sunau.Au_read",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_File",
      "arg": "f"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getfp",
    "returns": "(IO[bytes] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "rewind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getnchannels",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getnframes",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getsampwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getframerate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getcomptype",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getcompname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getparams",
    "returns": "_sunau_params"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getmarkers",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "id"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "getmark",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "pos"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "setpos",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nframes"
     }
    ],
    "className": "sunau.Au_read",
    "kwonlyargs": [],
    "name": "readframes",
    "returns": "(bytes | None)"
   }
  ]
 },
 {
  "className": "sunau.Au_write",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_File",
      "arg": "f"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nchannels"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "setnchannels",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "getnchannels",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "sampwidth"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "setsampwidth",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "getsampwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "framerate"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "setframerate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "getframerate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nframes"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "setnframes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "getnframes",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "type"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "setcomptype",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "getcomptype",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "getcompname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_sunau_params",
      "arg": "params"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "setparams",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "getparams",
    "returns": "_sunau_params"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "writeframesraw",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "writeframes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "sunau.Au_write",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "_decimal.DecimalTuple",
  "fields": [
   {
    "annotation": "int",
    "className": "_decimal.DecimalTuple",
    "name": "sign"
   },
   {
    "annotation": "tuple[int, ...]",
    "className": "_decimal.DecimalTuple",
    "name": "digits"
   },
   {
    "annotation": "int",
    "className": "_decimal.DecimalTuple",
    "name": "exponent"
   }
  ],
  "methods": []
 },
 {
  "className": "_decimal.DecimalException",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.Clamped",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.InvalidOperation",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.ConversionSyntax",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.DivisionByZero",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.DivisionImpossible",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.DivisionUndefined",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.Inexact",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.InvalidContext",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.Rounded",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.Subnormal",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.Overflow",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.Underflow",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.FloatOperation",
  "fields": [],
  "methods": []
 },
 {
  "className": "_decimal.Decimal",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "_DecimalNew",
      "arg": "value"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "float",
      "arg": "__f"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "from_float",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "compare",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "as_tuple",
    "returns": "DecimalTuple"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "as_integer_ratio",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "to_eng_string",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__abs__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__divmod__",
    "returns": "tuple[Decimal, Decimal]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__floordiv__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ComparableNum",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ComparableNum",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ComparableNum",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ComparableNum",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     },
     {
      "annotation": "(_Decimal | None)",
      "arg": "__modulo"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__rdivmod__",
    "returns": "tuple[Decimal, Decimal]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__rfloordiv__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__rmod__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "remainder_near",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__float__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__int__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__trunc__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "real",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "imag",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "conjugate",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__complex__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__ndigits"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__floor__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__ceil__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "_Decimal",
      "arg": "third"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "fma",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "__context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__rpow__",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "normalize",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "exp"
     },
     {
      "annotation": "(str | None)",
      "arg": "rounding"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "quantize",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "same_quantum",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "rounding"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "to_integral_exact",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "rounding"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "to_integral_value",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "rounding"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "to_integral",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "sqrt",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "max",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "min",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "adjusted",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "canonical",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "compare_signal",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "compare_total",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "compare_total_mag",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "copy_abs",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "copy_negate",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "copy_sign",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "exp",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_canonical",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_finite",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_infinite",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_nan",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_normal",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_qnan",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_signed",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_snan",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_subnormal",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "is_zero",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "ln",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "log10",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "logb",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "logical_and",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "logical_invert",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "logical_or",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "logical_xor",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "max_mag",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "min_mag",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "next_minus",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "next_plus",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "next_toward",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "number_class",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "radix",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "rotate",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "scaleb",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "other"
     },
     {
      "annotation": "(Context | None)",
      "arg": "context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "shift",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__reduce__",
    "returns": "tuple[type[Self], tuple[str]]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__copy__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__memo"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__deepcopy__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__specifier"
     },
     {
      "annotation": "(Context | None)",
      "arg": "__context"
     }
    ],
    "className": "_decimal.Decimal",
    "kwonlyargs": [],
    "name": "__format__",
    "returns": "str"
   }
  ]
 },
 {
  "className": "_decimal.Context",
  "fields": [
   {
    "annotation": "int",
    "className": "_decimal.Context",
    "name": "prec"
   },
   {
    "annotation": "str",
    "className": "_decimal.Context",
    "name": "rounding"
   },
   {
    "annotation": "int",
    "className": "_decimal.Context",
    "name": "Emin"
   },
   {
    "annotation": "int",
    "className": "_decimal.Context",
    "name": "Emax"
   },
   {
    "annotation": "int",
    "className": "_decimal.Context",
    "name": "capitals"
   },
   {
    "annotation": "int",
    "className": "_decimal.Context",
    "name": "clamp"
   },
   {
    "annotation": "dict[_TrapType, bool]",
    "className": "_decimal.Context",
    "name": "traps"
   },
   {
    "annotation": "dict[_TrapType, bool]",
    "className": "_decimal.Context",
    "name": "flags"
   },
   {
    "annotation": "Any",
    "className": "_decimal.Context",
    "name": "__hash__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "prec"
     },
     {
      "annotation": "(str | None)",
      "arg": "rounding"
     },
     {
      "annotation": "(int | None)",
      "arg": "Emin"
     },
     {
      "annotation": "(int | None)",
      "arg": "Emax"
     },
     {
      "annotation": "(int | None)",
      "arg": "capitals"
     },
     {
      "annotation": "(int | None)",
      "arg": "clamp"
     },
     {
      "annotation": "(None | dict[_TrapType, bool] | Container[_TrapType])",
      "arg": "flags"
     },
     {
      "annotation": "(None | dict[_TrapType, bool] | Container[_TrapType])",
      "arg": "traps"
     },
     {
      "annotation": "(list[_TrapType] | None)",
      "arg": "_ignored_flags"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "__delattr__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "__reduce__",
    "returns": "tuple[type[Self], tuple[Any, ...]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "clear_flags",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "clear_traps",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Context"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "__copy__",
    "returns": "Context"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "Etiny",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "Etop",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_DecimalNew",
      "arg": "__num"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "create_decimal",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__f"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "create_decimal_from_float",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "abs",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "add",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "canonical",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "compare",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "compare_signal",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "compare_total",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "compare_total_mag",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "copy_abs",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "copy_decimal",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "copy_negate",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "copy_sign",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "divide",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "divide_int",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "divmod",
    "returns": "tuple[Decimal, Decimal]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "exp",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     },
     {
      "annotation": "_Decimal",
      "arg": "__z"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "fma",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_canonical",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_finite",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_infinite",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_nan",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_normal",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_qnan",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_signed",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_snan",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_subnormal",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "is_zero",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "ln",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "log10",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "logb",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "logical_and",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "logical_invert",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "logical_or",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "logical_xor",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "max",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "max_mag",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "min",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "min_mag",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "minus",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "multiply",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "next_minus",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "next_plus",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "next_toward",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "normalize",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "number_class",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "plus",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "a"
     },
     {
      "annotation": "_Decimal",
      "arg": "b"
     },
     {
      "annotation": "(_Decimal | None)",
      "arg": "modulo"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "power",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "quantize",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "radix",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "remainder",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "remainder_near",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "rotate",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "same_quantum",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "scaleb",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "shift",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "sqrt",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     },
     {
      "annotation": "_Decimal",
      "arg": "__y"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "subtract",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "to_eng_string",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "to_sci_string",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "to_integral_exact",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "to_integral_value",
    "returns": "Decimal"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Decimal",
      "arg": "__x"
     }
    ],
    "className": "_decimal.Context",
    "kwonlyargs": [],
    "name": "to_integral",
    "returns": "Decimal"
   }
  ]
 },
 {
  "className": "bz2.BZ2File",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "read1",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "size"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "b"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "readinto",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "size"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "offset"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[ReadableBuffer]",
      "arg": "seq"
     }
    ],
    "className": "bz2.BZ2File",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   }
  ]
 },
 {
  "className": "bz2.BZ2Compressor",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     }
    ],
    "className": "bz2.BZ2Compressor",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "__data"
     }
    ],
    "className": "bz2.BZ2Compressor",
    "kwonlyargs": [],
    "name": "compress",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bz2.BZ2Compressor",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "bz2.BZ2Decompressor",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     },
     {
      "annotation": "int",
      "arg": "max_length"
     }
    ],
    "className": "bz2.BZ2Decompressor",
    "kwonlyargs": [],
    "name": "decompress",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bz2.BZ2Decompressor",
    "kwonlyargs": [],
    "name": "eof",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bz2.BZ2Decompressor",
    "kwonlyargs": [],
    "name": "needs_input",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "bz2.BZ2Decompressor",
    "kwonlyargs": [],
    "name": "unused_data",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "symtable.SymbolTable",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "raw_table"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "get_type",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "get_id",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "get_name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "get_lineno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "is_optimized",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "is_nested",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "has_children",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "has_exec",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "get_identifiers",
    "returns": "Sequence[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "lookup",
    "returns": "Symbol"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "get_symbols",
    "returns": "list[Symbol]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTable",
    "kwonlyargs": [],
    "name": "get_children",
    "returns": "list[SymbolTable]"
   }
  ]
 },
 {
  "className": "symtable.Function",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Function",
    "kwonlyargs": [],
    "name": "get_parameters",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Function",
    "kwonlyargs": [],
    "name": "get_locals",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Function",
    "kwonlyargs": [],
    "name": "get_globals",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Function",
    "kwonlyargs": [],
    "name": "get_frees",
    "returns": "tuple[str, ...]"
   }
  ]
 },
 {
  "className": "symtable.Class",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Class",
    "kwonlyargs": [],
    "name": "get_methods",
    "returns": "tuple[str, ...]"
   }
  ]
 },
 {
  "className": "symtable.Symbol",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "get_name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_referenced",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_parameter",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_global",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_declared_global",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_local",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_annotated",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_free",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_imported",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_assigned",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "is_namespace",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "get_namespaces",
    "returns": "Sequence[SymbolTable]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.Symbol",
    "kwonlyargs": [],
    "name": "get_namespace",
    "returns": "SymbolTable"
   }
  ]
 },
 {
  "className": "symtable.SymbolTableFactory",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "symtable.SymbolTableFactory",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "table"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "symtable.SymbolTableFactory",
    "kwonlyargs": [],
    "name": "new",
    "returns": "SymbolTable"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "table"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "symtable.SymbolTableFactory",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "SymbolTable"
   }
  ]
 },
 {
  "className": "cProfile.Profile",
  "fields": [
   {
    "annotation": "dict[_Label, tuple[int, int, int, int, dict[_Label, tuple[int, int, int, int]]]\n    ]",
    "className": "cProfile.Profile",
    "name": "stats"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[], float]",
      "arg": "timer"
     },
     {
      "annotation": "float",
      "arg": "timeunit"
     },
     {
      "annotation": "bool",
      "arg": "subcalls"
     },
     {
      "annotation": "bool",
      "arg": "builtins"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "enable",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "disable",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | int)",
      "arg": "sort"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "print_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "file"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "dump_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "create_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "snapshot_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "run",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "globals"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "locals"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "runctx",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[_P, _T]",
      "arg": "__func"
     }
    ],
    "className": "cProfile.Profile",
    "kwonlyargs": [],
    "name": "runcall",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "sys.UnraisableHookArgs",
  "fields": [
   {
    "annotation": "type[BaseException]",
    "className": "sys.UnraisableHookArgs",
    "name": "exc_type"
   },
   {
    "annotation": "(BaseException | None)",
    "className": "sys.UnraisableHookArgs",
    "name": "exc_value"
   },
   {
    "annotation": "(TracebackType | None)",
    "className": "sys.UnraisableHookArgs",
    "name": "exc_traceback"
   },
   {
    "annotation": "(str | None)",
    "className": "sys.UnraisableHookArgs",
    "name": "err_msg"
   },
   {
    "annotation": "(_object | None)",
    "className": "sys.UnraisableHookArgs",
    "name": "object"
   }
  ],
  "methods": []
 },
 {
  "className": "calendar.IllegalMonthError",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "month"
     }
    ],
    "className": "calendar.IllegalMonthError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "calendar.IllegalWeekdayError",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "weekday"
     }
    ],
    "className": "calendar.IllegalWeekdayError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "calendar.Calendar",
  "fields": [
   {
    "annotation": "int",
    "className": "calendar.Calendar",
    "name": "firstweekday"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "firstweekday"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "getfirstweekday",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "firstweekday"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "setfirstweekday",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "iterweekdays",
    "returns": "Iterable[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "itermonthdates",
    "returns": "Iterable[datetime.date]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "itermonthdays2",
    "returns": "Iterable[tuple[int, int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "itermonthdays",
    "returns": "Iterable[int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "monthdatescalendar",
    "returns": "list[list[datetime.date]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "monthdays2calendar",
    "returns": "list[list[tuple[int, int]]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "monthdayscalendar",
    "returns": "list[list[int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "yeardatescalendar",
    "returns": "list[list[int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "yeardays2calendar",
    "returns": "list[list[tuple[int, int]]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.Calendar",
    "kwonlyargs": [],
    "name": "yeardayscalendar",
    "returns": "list[list[int]]"
   }
  ]
 },
 {
  "className": "calendar.TextCalendar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theweek"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "prweek",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "day"
     },
     {
      "annotation": "int",
      "arg": "weekday"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "formatday",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theweek"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "formatweek",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "day"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "formatweekday",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "formatweekheader",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "themonth"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "bool",
      "arg": "withyear"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "formatmonthname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "themonth"
     },
     {
      "annotation": "int",
      "arg": "w"
     },
     {
      "annotation": "int",
      "arg": "l"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "prmonth",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "themonth"
     },
     {
      "annotation": "int",
      "arg": "w"
     },
     {
      "annotation": "int",
      "arg": "l"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "formatmonth",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "w"
     },
     {
      "annotation": "int",
      "arg": "l"
     },
     {
      "annotation": "int",
      "arg": "c"
     },
     {
      "annotation": "int",
      "arg": "m"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "formatyear",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "w"
     },
     {
      "annotation": "int",
      "arg": "l"
     },
     {
      "annotation": "int",
      "arg": "c"
     },
     {
      "annotation": "int",
      "arg": "m"
     }
    ],
    "className": "calendar.TextCalendar",
    "kwonlyargs": [],
    "name": "pryear",
    "returns": "None"
   }
  ]
 },
 {
  "className": "calendar.HTMLCalendar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "day"
     },
     {
      "annotation": "int",
      "arg": "weekday"
     }
    ],
    "className": "calendar.HTMLCalendar",
    "kwonlyargs": [],
    "name": "formatday",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theweek"
     }
    ],
    "className": "calendar.HTMLCalendar",
    "kwonlyargs": [],
    "name": "formatweek",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "day"
     }
    ],
    "className": "calendar.HTMLCalendar",
    "kwonlyargs": [],
    "name": "formatweekday",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "calendar.HTMLCalendar",
    "kwonlyargs": [],
    "name": "formatweekheader",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "themonth"
     },
     {
      "annotation": "bool",
      "arg": "withyear"
     }
    ],
    "className": "calendar.HTMLCalendar",
    "kwonlyargs": [],
    "name": "formatmonthname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "themonth"
     },
     {
      "annotation": "bool",
      "arg": "withyear"
     }
    ],
    "className": "calendar.HTMLCalendar",
    "kwonlyargs": [],
    "name": "formatmonth",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.HTMLCalendar",
    "kwonlyargs": [],
    "name": "formatyear",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "(str | None)",
      "arg": "css"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     }
    ],
    "className": "calendar.HTMLCalendar",
    "kwonlyargs": [],
    "name": "formatyearpage",
    "returns": "str"
   }
  ]
 },
 {
  "className": "calendar.different_locale",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_LocaleType",
      "arg": "locale"
     }
    ],
    "className": "calendar.different_locale",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "calendar.different_locale",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "calendar.different_locale",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "calendar.LocaleTextCalendar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "firstweekday"
     },
     {
      "annotation": "(_LocaleType | None)",
      "arg": "locale"
     }
    ],
    "className": "calendar.LocaleTextCalendar",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "day"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "calendar.LocaleTextCalendar",
    "kwonlyargs": [],
    "name": "formatweekday",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "themonth"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "bool",
      "arg": "withyear"
     }
    ],
    "className": "calendar.LocaleTextCalendar",
    "kwonlyargs": [],
    "name": "formatmonthname",
    "returns": "str"
   }
  ]
 },
 {
  "className": "calendar.LocaleHTMLCalendar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "firstweekday"
     },
     {
      "annotation": "(_LocaleType | None)",
      "arg": "locale"
     }
    ],
    "className": "calendar.LocaleHTMLCalendar",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "day"
     }
    ],
    "className": "calendar.LocaleHTMLCalendar",
    "kwonlyargs": [],
    "name": "formatweekday",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "theyear"
     },
     {
      "annotation": "int",
      "arg": "themonth"
     },
     {
      "annotation": "bool",
      "arg": "withyear"
     }
    ],
    "className": "calendar.LocaleHTMLCalendar",
    "kwonlyargs": [],
    "name": "formatmonthname",
    "returns": "str"
   }
  ]
 },
 {
  "className": "mimetypes.MimeTypes",
  "fields": [
   {
    "annotation": "dict[str, str]",
    "className": "mimetypes.MimeTypes",
    "name": "suffix_map"
   },
   {
    "annotation": "dict[str, str]",
    "className": "mimetypes.MimeTypes",
    "name": "encodings_map"
   },
   {
    "annotation": "tuple[dict[str, str], dict[str, str]]",
    "className": "mimetypes.MimeTypes",
    "name": "types_map"
   },
   {
    "annotation": "tuple[dict[str, str], dict[str, str]]",
    "className": "mimetypes.MimeTypes",
    "name": "types_map_inv"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[str, ...]",
      "arg": "filenames"
     },
     {
      "annotation": "bool",
      "arg": "strict"
     }
    ],
    "className": "mimetypes.MimeTypes",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "type"
     },
     {
      "annotation": "bool",
      "arg": "strict"
     }
    ],
    "className": "mimetypes.MimeTypes",
    "kwonlyargs": [],
    "name": "guess_extension",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "type"
     },
     {
      "annotation": "bool",
      "arg": "strict"
     }
    ],
    "className": "mimetypes.MimeTypes",
    "kwonlyargs": [],
    "name": "guess_all_extensions",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "bool",
      "arg": "strict"
     }
    ],
    "className": "mimetypes.MimeTypes",
    "kwonlyargs": [],
    "name": "read",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[str]",
      "arg": "fp"
     },
     {
      "annotation": "bool",
      "arg": "strict"
     }
    ],
    "className": "mimetypes.MimeTypes",
    "kwonlyargs": [],
    "name": "readfp",
    "returns": "None"
   }
  ]
 },
 {
  "className": "cgi.MiniFieldStorage",
  "fields": [
   {
    "annotation": "Any",
    "className": "cgi.MiniFieldStorage",
    "name": "filename"
   },
   {
    "annotation": "Any",
    "className": "cgi.MiniFieldStorage",
    "name": "list"
   },
   {
    "annotation": "Any",
    "className": "cgi.MiniFieldStorage",
    "name": "type"
   },
   {
    "annotation": "(IO[bytes] | None)",
    "className": "cgi.MiniFieldStorage",
    "name": "file"
   },
   {
    "annotation": "dict[Any, Any]",
    "className": "cgi.MiniFieldStorage",
    "name": "type_options"
   },
   {
    "annotation": "Any",
    "className": "cgi.MiniFieldStorage",
    "name": "disposition"
   },
   {
    "annotation": "dict[Any, Any]",
    "className": "cgi.MiniFieldStorage",
    "name": "disposition_options"
   },
   {
    "annotation": "dict[Any, Any]",
    "className": "cgi.MiniFieldStorage",
    "name": "headers"
   },
   {
    "annotation": "Any",
    "className": "cgi.MiniFieldStorage",
    "name": "name"
   },
   {
    "annotation": "Any",
    "className": "cgi.MiniFieldStorage",
    "name": "value"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "name"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "cgi.MiniFieldStorage",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "cgi.FieldStorage",
  "fields": [
   {
    "annotation": "(_type | None)",
    "className": "cgi.FieldStorage",
    "name": "FieldStorageClass"
   },
   {
    "annotation": "int",
    "className": "cgi.FieldStorage",
    "name": "keep_blank_values"
   },
   {
    "annotation": "int",
    "className": "cgi.FieldStorage",
    "name": "strict_parsing"
   },
   {
    "annotation": "(str | None)",
    "className": "cgi.FieldStorage",
    "name": "qs_on_post"
   },
   {
    "annotation": "Mapping[str, str]",
    "className": "cgi.FieldStorage",
    "name": "headers"
   },
   {
    "annotation": "IO[bytes]",
    "className": "cgi.FieldStorage",
    "name": "fp"
   },
   {
    "annotation": "str",
    "className": "cgi.FieldStorage",
    "name": "encoding"
   },
   {
    "annotation": "str",
    "className": "cgi.FieldStorage",
    "name": "errors"
   },
   {
    "annotation": "bytes",
    "className": "cgi.FieldStorage",
    "name": "outerboundary"
   },
   {
    "annotation": "int",
    "className": "cgi.FieldStorage",
    "name": "bytes_read"
   },
   {
    "annotation": "(int | None)",
    "className": "cgi.FieldStorage",
    "name": "limit"
   },
   {
    "annotation": "str",
    "className": "cgi.FieldStorage",
    "name": "disposition"
   },
   {
    "annotation": "dict[str, str]",
    "className": "cgi.FieldStorage",
    "name": "disposition_options"
   },
   {
    "annotation": "(str | None)",
    "className": "cgi.FieldStorage",
    "name": "filename"
   },
   {
    "annotation": "(IO[bytes] | None)",
    "className": "cgi.FieldStorage",
    "name": "file"
   },
   {
    "annotation": "str",
    "className": "cgi.FieldStorage",
    "name": "type"
   },
   {
    "annotation": "dict[str, str]",
    "className": "cgi.FieldStorage",
    "name": "type_options"
   },
   {
    "annotation": "bytes",
    "className": "cgi.FieldStorage",
    "name": "innerboundary"
   },
   {
    "annotation": "int",
    "className": "cgi.FieldStorage",
    "name": "length"
   },
   {
    "annotation": "int",
    "className": "cgi.FieldStorage",
    "name": "done"
   },
   {
    "annotation": "(_list[Any] | None)",
    "className": "cgi.FieldStorage",
    "name": "list"
   },
   {
    "annotation": "(None | bytes | _list[Any])",
    "className": "cgi.FieldStorage",
    "name": "value"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[Any] | None)",
      "arg": "fp"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "headers"
     },
     {
      "annotation": "bytes",
      "arg": "outerboundary"
     },
     {
      "annotation": "SupportsGetItem[str, str]",
      "arg": "environ"
     },
     {
      "annotation": "int",
      "arg": "keep_blank_values"
     },
     {
      "annotation": "int",
      "arg": "strict_parsing"
     },
     {
      "annotation": "(int | None)",
      "arg": "limit"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     },
     {
      "annotation": "(int | None)",
      "arg": "max_num_fields"
     },
     {
      "annotation": "str",
      "arg": "separator"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "Any",
      "arg": "default"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "getvalue",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "Any",
      "arg": "default"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "getfirst",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "getlist",
    "returns": "_list[Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "_list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cgi.FieldStorage",
    "kwonlyargs": [],
    "name": "make_file",
    "returns": "IO[Any]"
   }
  ]
 },
 {
  "className": "mmap.mmap",
  "fields": [
   {
    "annotation": "bool",
    "className": "mmap.mmap",
    "name": "closed"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "dest"
     },
     {
      "annotation": "int",
      "arg": "src"
     },
     {
      "annotation": "int",
      "arg": "count"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "move",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "read_byte",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "newsize"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "resize",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "pos"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "size",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "byte"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "write_byte",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "sub"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "stop"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "find",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "sub"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "stop"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "rfind",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "n"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "bytes"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__index"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__index"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | slice)",
      "arg": "__index"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__index"
     },
     {
      "annotation": "int",
      "arg": "__object"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__index"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__object"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[int]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "mmap.mmap",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "cgitb.Hook",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "display"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "logdir"
     },
     {
      "annotation": "int",
      "arg": "context"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "file"
     },
     {
      "annotation": "str",
      "arg": "format"
     }
    ],
    "className": "cgitb.Hook",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "etype"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "evalue"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "etb"
     }
    ],
    "className": "cgitb.Hook",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(OptExcInfo | None)",
      "arg": "info"
     }
    ],
    "className": "cgitb.Hook",
    "kwonlyargs": [],
    "name": "handle",
    "returns": "None"
   }
  ]
 },
 {
  "className": "modulefinder.Module",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "file"
     },
     {
      "annotation": "(str | None)",
      "arg": "path"
     }
    ],
    "className": "modulefinder.Module",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "modulefinder.ModuleFinder",
  "fields": [
   {
    "annotation": "dict[str, Module]",
    "className": "modulefinder.ModuleFinder",
    "name": "modules"
   },
   {
    "annotation": "list[str]",
    "className": "modulefinder.ModuleFinder",
    "name": "path"
   },
   {
    "annotation": "dict[str, dict[str, int]]",
    "className": "modulefinder.ModuleFinder",
    "name": "badmodules"
   },
   {
    "annotation": "int",
    "className": "modulefinder.ModuleFinder",
    "name": "debug"
   },
   {
    "annotation": "int",
    "className": "modulefinder.ModuleFinder",
    "name": "indent"
   },
   {
    "annotation": "Container[str]",
    "className": "modulefinder.ModuleFinder",
    "name": "excludes"
   },
   {
    "annotation": "Sequence[tuple[str, str]]",
    "className": "modulefinder.ModuleFinder",
    "name": "replace_paths"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     },
     {
      "annotation": "str",
      "arg": "str"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "msg",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "msgin",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "msgout",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "pathname"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "run_script",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "pathname"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "load_file",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(Module | None)",
      "arg": "caller"
     },
     {
      "annotation": "(list[str] | None)",
      "arg": "fromlist"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "import_hook",
    "returns": "(Module | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Module | None)",
      "arg": "caller"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "determine_parent",
    "returns": "(Module | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Module",
      "arg": "parent"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "find_head_package",
    "returns": "tuple[Module, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Module",
      "arg": "q"
     },
     {
      "annotation": "str",
      "arg": "tail"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "load_tail",
    "returns": "Module"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Module",
      "arg": "m"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "fromlist"
     },
     {
      "annotation": "int",
      "arg": "recursive"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "ensure_fromlist",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Module",
      "arg": "m"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "find_all_submodules",
    "returns": "Iterable[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "partname"
     },
     {
      "annotation": "str",
      "arg": "fqname"
     },
     {
      "annotation": "Module",
      "arg": "parent"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "import_module",
    "returns": "(Module | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fqname"
     },
     {
      "annotation": "IO[str]",
      "arg": "fp"
     },
     {
      "annotation": "str",
      "arg": "pathname"
     },
     {
      "annotation": "tuple[str, str, str]",
      "arg": "file_info"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "load_module",
    "returns": "Module"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "CodeType",
      "arg": "co"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "scan_opcodes",
    "returns": "Iterator[tuple[str, tuple[Any, ...]]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "CodeType",
      "arg": "co"
     },
     {
      "annotation": "Module",
      "arg": "m"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "scan_code",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fqname"
     },
     {
      "annotation": "str",
      "arg": "pathname"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "load_package",
    "returns": "Module"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fqname"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "add_module",
    "returns": "Module"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "path"
     },
     {
      "annotation": "(Module | None)",
      "arg": "parent"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "find_module",
    "returns": "tuple[IO[Any] | None, str | None, tuple[str, str, int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "report",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "any_missing",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "any_missing_maybe",
    "returns": "tuple[list[str], list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "CodeType",
      "arg": "co"
     }
    ],
    "className": "modulefinder.ModuleFinder",
    "kwonlyargs": [],
    "name": "replace_paths_in_code",
    "returns": "CodeType"
   }
  ]
 },
 {
  "className": "tabnanny.NannyNag",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     },
     {
      "annotation": "str",
      "arg": "msg"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "tabnanny.NannyNag",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tabnanny.NannyNag",
    "kwonlyargs": [],
    "name": "get_lineno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tabnanny.NannyNag",
    "kwonlyargs": [],
    "name": "get_msg",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tabnanny.NannyNag",
    "kwonlyargs": [],
    "name": "get_line",
    "returns": "str"
   }
  ]
 },
 {
  "className": "chunk.Chunk",
  "fields": [
   {
    "annotation": "bool",
    "className": "chunk.Chunk",
    "name": "closed"
   },
   {
    "annotation": "bool",
    "className": "chunk.Chunk",
    "name": "align"
   },
   {
    "annotation": "IO[bytes]",
    "className": "chunk.Chunk",
    "name": "file"
   },
   {
    "annotation": "bytes",
    "className": "chunk.Chunk",
    "name": "chunkname"
   },
   {
    "annotation": "int",
    "className": "chunk.Chunk",
    "name": "chunksize"
   },
   {
    "annotation": "int",
    "className": "chunk.Chunk",
    "name": "size_read"
   },
   {
    "annotation": "int",
    "className": "chunk.Chunk",
    "name": "offset"
   },
   {
    "annotation": "bool",
    "className": "chunk.Chunk",
    "name": "seekable"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[bytes]",
      "arg": "file"
     },
     {
      "annotation": "bool",
      "arg": "align"
     },
     {
      "annotation": "bool",
      "arg": "bigendian"
     },
     {
      "annotation": "bool",
      "arg": "inclheader"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "getname",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "getsize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "isatty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "pos"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "chunk.Chunk",
    "kwonlyargs": [],
    "name": "skip",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tarfile.ExFileObject",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarFile",
      "arg": "tarfile"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     }
    ],
    "className": "tarfile.ExFileObject",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tarfile.TarFile",
  "fields": [
   {
    "annotation": "Mapping[str, str]",
    "className": "tarfile.TarFile",
    "name": "OPEN_METH"
   },
   {
    "annotation": "(StrOrBytesPath | None)",
    "className": "tarfile.TarFile",
    "name": "name"
   },
   {
    "annotation": "Literal['r', 'a', 'w', 'x']",
    "className": "tarfile.TarFile",
    "name": "mode"
   },
   {
    "annotation": "(_Fileobj | None)",
    "className": "tarfile.TarFile",
    "name": "fileobj"
   },
   {
    "annotation": "(int | None)",
    "className": "tarfile.TarFile",
    "name": "format"
   },
   {
    "annotation": "type[TarInfo]",
    "className": "tarfile.TarFile",
    "name": "tarinfo"
   },
   {
    "annotation": "(bool | None)",
    "className": "tarfile.TarFile",
    "name": "dereference"
   },
   {
    "annotation": "(bool | None)",
    "className": "tarfile.TarFile",
    "name": "ignore_zeros"
   },
   {
    "annotation": "(str | None)",
    "className": "tarfile.TarFile",
    "name": "encoding"
   },
   {
    "annotation": "str",
    "className": "tarfile.TarFile",
    "name": "errors"
   },
   {
    "annotation": "type[ExFileObject]",
    "className": "tarfile.TarFile",
    "name": "fileobject"
   },
   {
    "annotation": "(Mapping[str, str] | None)",
    "className": "tarfile.TarFile",
    "name": "pax_headers"
   },
   {
    "annotation": "(int | None)",
    "className": "tarfile.TarFile",
    "name": "debug"
   },
   {
    "annotation": "(int | None)",
    "className": "tarfile.TarFile",
    "name": "errorlevel"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarFile",
    "name": "offset"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "name"
     },
     {
      "annotation": "Literal['r', 'a', 'w', 'x']",
      "arg": "mode"
     },
     {
      "annotation": "(_Fileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(type[TarInfo] | None)",
      "arg": "tarinfo"
     },
     {
      "annotation": "(bool | None)",
      "arg": "dereference"
     },
     {
      "annotation": "(bool | None)",
      "arg": "ignore_zeros"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "pax_headers"
     },
     {
      "annotation": "(int | None)",
      "arg": "debug"
     },
     {
      "annotation": "(int | None)",
      "arg": "errorlevel"
     },
     {
      "annotation": "(int | None)",
      "arg": "copybufsize"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "traceback"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[TarInfo]"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "name"
     },
     {
      "annotation": "str",
      "arg": "mode"
     },
     {
      "annotation": "(IO[bytes] | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "int",
      "arg": "bufsize"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(type[TarInfo] | None)",
      "arg": "tarinfo"
     },
     {
      "annotation": "(bool | None)",
      "arg": "dereference"
     },
     {
      "annotation": "(bool | None)",
      "arg": "ignore_zeros"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "pax_headers"
     },
     {
      "annotation": "(int | None)",
      "arg": "debug"
     },
     {
      "annotation": "(int | None)",
      "arg": "errorlevel"
     }
    ],
    "name": "open",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "name"
     },
     {
      "annotation": "Literal['r', 'a', 'w', 'x']",
      "arg": "mode"
     },
     {
      "annotation": "(_Fileobj | None)",
      "arg": "fileobj"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "int",
      "arg": "compresslevel"
     },
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(type[TarInfo] | None)",
      "arg": "tarinfo"
     },
     {
      "annotation": "(bool | None)",
      "arg": "dereference"
     },
     {
      "annotation": "(bool | None)",
      "arg": "ignore_zeros"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "pax_headers"
     },
     {
      "annotation": "(int | None)",
      "arg": "debug"
     },
     {
      "annotation": "(int | None)",
      "arg": "errorlevel"
     }
    ],
    "name": "taropen",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "name"
     },
     {
      "annotation": "Literal['r']",
      "arg": "mode"
     },
     {
      "annotation": "(_GzipReadableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(type[TarInfo] | None)",
      "arg": "tarinfo"
     },
     {
      "annotation": "(bool | None)",
      "arg": "dereference"
     },
     {
      "annotation": "(bool | None)",
      "arg": "ignore_zeros"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "pax_headers"
     },
     {
      "annotation": "(int | None)",
      "arg": "debug"
     },
     {
      "annotation": "(int | None)",
      "arg": "errorlevel"
     }
    ],
    "name": "gzopen",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "name"
     },
     {
      "annotation": "Literal['w', 'x']",
      "arg": "mode"
     },
     {
      "annotation": "(_GzipWritableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(type[TarInfo] | None)",
      "arg": "tarinfo"
     },
     {
      "annotation": "(bool | None)",
      "arg": "dereference"
     },
     {
      "annotation": "(bool | None)",
      "arg": "ignore_zeros"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "pax_headers"
     },
     {
      "annotation": "(int | None)",
      "arg": "debug"
     },
     {
      "annotation": "(int | None)",
      "arg": "errorlevel"
     }
    ],
    "name": "gzopen",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "name"
     },
     {
      "annotation": "Literal['w', 'x']",
      "arg": "mode"
     },
     {
      "annotation": "(_Bz2WritableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(type[TarInfo] | None)",
      "arg": "tarinfo"
     },
     {
      "annotation": "(bool | None)",
      "arg": "dereference"
     },
     {
      "annotation": "(bool | None)",
      "arg": "ignore_zeros"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "pax_headers"
     },
     {
      "annotation": "(int | None)",
      "arg": "debug"
     },
     {
      "annotation": "(int | None)",
      "arg": "errorlevel"
     }
    ],
    "name": "bz2open",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "name"
     },
     {
      "annotation": "Literal['r']",
      "arg": "mode"
     },
     {
      "annotation": "(_Bz2ReadableFileobj | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "int",
      "arg": "compresslevel"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(type[TarInfo] | None)",
      "arg": "tarinfo"
     },
     {
      "annotation": "(bool | None)",
      "arg": "dereference"
     },
     {
      "annotation": "(bool | None)",
      "arg": "ignore_zeros"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "pax_headers"
     },
     {
      "annotation": "(int | None)",
      "arg": "debug"
     },
     {
      "annotation": "(int | None)",
      "arg": "errorlevel"
     }
    ],
    "name": "bz2open",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "name"
     },
     {
      "annotation": "Literal['r', 'w', 'x']",
      "arg": "mode"
     },
     {
      "annotation": "(IO[bytes] | None)",
      "arg": "fileobj"
     },
     {
      "annotation": "(int | None)",
      "arg": "preset"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(type[TarInfo] | None)",
      "arg": "tarinfo"
     },
     {
      "annotation": "(bool | None)",
      "arg": "dereference"
     },
     {
      "annotation": "(bool | None)",
      "arg": "ignore_zeros"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(Mapping[str, str] | None)",
      "arg": "pax_headers"
     },
     {
      "annotation": "(int | None)",
      "arg": "debug"
     },
     {
      "annotation": "(int | None)",
      "arg": "errorlevel"
     }
    ],
    "name": "xzopen",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "getmember",
    "returns": "TarInfo"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "getmembers",
    "returns": "_list[TarInfo]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "getnames",
    "returns": "_list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "verbose"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "(_list[TarInfo] | None)",
      "arg": "members"
     }
    ],
    "name": "list",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "next",
    "returns": "(TarInfo | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "path"
     },
     {
      "annotation": "(Iterable[TarInfo] | None)",
      "arg": "members"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "numeric_owner"
     }
    ],
    "name": "extractall",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | TarInfo)",
      "arg": "member"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "path"
     },
     {
      "annotation": "bool",
      "arg": "set_attrs"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "numeric_owner"
     }
    ],
    "name": "extract",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "str",
      "arg": "targetpath"
     },
     {
      "annotation": "bool",
      "arg": "set_attrs"
     },
     {
      "annotation": "bool",
      "arg": "numeric_owner"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "_extract_member",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | TarInfo)",
      "arg": "member"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "extractfile",
    "returns": "(IO[bytes] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "makedir",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "makefile",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "makeunknown",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "makefifo",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "makedev",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "makelink",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     },
     {
      "annotation": "bool",
      "arg": "numeric_owner"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "chown",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "chmod",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "targetpath"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "utime",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "TarInfo",
      "arg": "tarinfo"
     },
     {
      "annotation": "(IO[bytes] | None)",
      "arg": "fileobj"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "addfile",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "arcname"
     },
     {
      "annotation": "(IO[bytes] | None)",
      "arg": "fileobj"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "gettarinfo",
    "returns": "TarInfo"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarFile",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tarfile.TarError",
  "fields": [],
  "methods": []
 },
 {
  "className": "tarfile.ReadError",
  "fields": [],
  "methods": []
 },
 {
  "className": "tarfile.CompressionError",
  "fields": [],
  "methods": []
 },
 {
  "className": "tarfile.StreamError",
  "fields": [],
  "methods": []
 },
 {
  "className": "tarfile.ExtractError",
  "fields": [],
  "methods": []
 },
 {
  "className": "tarfile.HeaderError",
  "fields": [],
  "methods": []
 },
 {
  "className": "tarfile.TarInfo",
  "fields": [
   {
    "annotation": "str",
    "className": "tarfile.TarInfo",
    "name": "name"
   },
   {
    "annotation": "str",
    "className": "tarfile.TarInfo",
    "name": "path"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "size"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "mtime"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "chksum"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "devmajor"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "devminor"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "offset"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "offset_data"
   },
   {
    "annotation": "(bytes | None)",
    "className": "tarfile.TarInfo",
    "name": "sparse"
   },
   {
    "annotation": "(TarFile | None)",
    "className": "tarfile.TarInfo",
    "name": "tarfile"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "mode"
   },
   {
    "annotation": "bytes",
    "className": "tarfile.TarInfo",
    "name": "type"
   },
   {
    "annotation": "str",
    "className": "tarfile.TarInfo",
    "name": "linkname"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "uid"
   },
   {
    "annotation": "int",
    "className": "tarfile.TarInfo",
    "name": "gid"
   },
   {
    "annotation": "str",
    "className": "tarfile.TarInfo",
    "name": "uname"
   },
   {
    "annotation": "str",
    "className": "tarfile.TarInfo",
    "name": "gname"
   },
   {
    "annotation": "Mapping[str, str]",
    "className": "tarfile.TarInfo",
    "name": "pax_headers"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "bytes",
      "arg": "buf"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "frombuf",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "TarFile",
      "arg": "tarfile"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "fromtarfile",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "linkpath",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "linkname"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "linkpath",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "get_info",
    "returns": "Mapping[str, str | int | bytes | Mapping[str, str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "format"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "tobuf",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, str | int | bytes | Mapping[str, str]]",
      "arg": "info"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "create_ustar_header",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, str | int | bytes | Mapping[str, str]]",
      "arg": "info"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "create_gnu_header",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, str | int | bytes | Mapping[str, str]]",
      "arg": "info"
     },
     {
      "annotation": "str",
      "arg": "encoding"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "create_pax_header",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "pax_headers"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "create_pax_global_header",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "isfile",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "isreg",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "issparse",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "isdir",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "issym",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "islnk",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "ischr",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "isblk",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "isfifo",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tarfile.TarInfo",
    "kwonlyargs": [],
    "name": "isdev",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "netrc.NetrcParseError",
  "fields": [
   {
    "annotation": "(str | None)",
    "className": "netrc.NetrcParseError",
    "name": "filename"
   },
   {
    "annotation": "(int | None)",
    "className": "netrc.NetrcParseError",
    "name": "lineno"
   },
   {
    "annotation": "str",
    "className": "netrc.NetrcParseError",
    "name": "msg"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "filename"
     },
     {
      "annotation": "(int | None)",
      "arg": "lineno"
     }
    ],
    "className": "netrc.NetrcParseError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "netrc.netrc",
  "fields": [
   {
    "annotation": "dict[str, _NetrcTuple]",
    "className": "netrc.netrc",
    "name": "hosts"
   },
   {
    "annotation": "dict[str, list[str]]",
    "className": "netrc.netrc",
    "name": "macros"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(StrOrBytesPath | None)",
      "arg": "file"
     }
    ],
    "className": "netrc.netrc",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     }
    ],
    "className": "netrc.netrc",
    "kwonlyargs": [],
    "name": "authenticators",
    "returns": "(_NetrcTuple | None)"
   }
  ]
 },
 {
  "className": "telnetlib.Telnet",
  "fields": [
   {
    "annotation": "(str | None)",
    "className": "telnetlib.Telnet",
    "name": "host"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "open",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "msg",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "debuglevel"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "set_debuglevel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "get_socket",
    "returns": "socket.socket"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "buffer"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "match"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "read_until",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "read_all",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "read_some",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "read_very_eager",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "read_eager",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "read_lazy",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "read_very_lazy",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "read_sb_data",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[socket.socket, bytes, bytes], Any] | None)",
      "arg": "callback"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "set_option_negotiation_callback",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "process_rawq",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "rawq_getchar",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "fill_rawq",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "sock_avail",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "interact",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "mt_interact",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "listener",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[Pattern[bytes] | bytes]",
      "arg": "list"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "expect",
    "returns": "tuple[int, Match[bytes] | None, bytes]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "traceback"
     }
    ],
    "className": "telnetlib.Telnet",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "cmd.Cmd",
  "fields": [
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "prompt"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "identchars"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "ruler"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "lastcmd"
   },
   {
    "annotation": "(Any | None)",
    "className": "cmd.Cmd",
    "name": "intro"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "doc_leader"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "doc_header"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "misc_header"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "undoc_header"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "nohelp"
   },
   {
    "annotation": "bool",
    "className": "cmd.Cmd",
    "name": "use_rawinput"
   },
   {
    "annotation": "IO[str]",
    "className": "cmd.Cmd",
    "name": "stdin"
   },
   {
    "annotation": "IO[str]",
    "className": "cmd.Cmd",
    "name": "stdout"
   },
   {
    "annotation": "list[str]",
    "className": "cmd.Cmd",
    "name": "cmdqueue"
   },
   {
    "annotation": "str",
    "className": "cmd.Cmd",
    "name": "completekey"
   },
   {
    "annotation": "(Callable[[str, int], str | None] | None)",
    "className": "cmd.Cmd",
    "name": "old_completer"
   },
   {
    "annotation": "(list[str] | None)",
    "className": "cmd.Cmd",
    "name": "completion_matches"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "completekey"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "stdin"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "stdout"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "intro"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "cmdloop",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "precmd",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "stop"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "postcmd",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "preloop",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "postloop",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "parseline",
    "returns": "tuple[str | None, str | None, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "onecmd",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "emptyline",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "default",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "completedefault",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "completenames",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "int",
      "arg": "state"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "complete",
    "returns": "(list[str] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "get_names",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "complete_help",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "do_help",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "header"
     },
     {
      "annotation": "(list[str] | None)",
      "arg": "cmds"
     },
     {
      "annotation": "Any",
      "arg": "cmdlen"
     },
     {
      "annotation": "int",
      "arg": "maxcol"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "print_topics",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(list[str] | None)",
      "arg": "list"
     },
     {
      "annotation": "int",
      "arg": "displaywidth"
     }
    ],
    "className": "cmd.Cmd",
    "kwonlyargs": [],
    "name": "columnize",
    "returns": "None"
   }
  ]
 },
 {
  "className": "nis.error",
  "fields": [],
  "methods": []
 },
 {
  "className": "tempfile.SpooledTemporaryFile",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "encoding",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "newlines",
    "returns": "(str | tuple[str, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "rollover",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "isatty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "read",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "limit"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "hint"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "offset"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "truncate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "s"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[AnyStr]",
      "arg": "iterable"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "seekable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.SpooledTemporaryFile",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "AnyStr"
   }
  ]
 },
 {
  "className": "tempfile.TemporaryDirectory",
  "fields": [
   {
    "annotation": "AnyStr",
    "className": "tempfile.TemporaryDirectory",
    "name": "name"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.TemporaryDirectory",
    "kwonlyargs": [],
    "name": "cleanup",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tempfile.TemporaryDirectory",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "tempfile.TemporaryDirectory",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "code.InteractiveInterpreter",
  "fields": [
   {
    "annotation": "Mapping[str, Any]",
    "className": "code.InteractiveInterpreter",
    "name": "locals"
   },
   {
    "annotation": "CommandCompiler",
    "className": "code.InteractiveInterpreter",
    "name": "compile"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "locals"
     }
    ],
    "className": "code.InteractiveInterpreter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "source"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "str",
      "arg": "symbol"
     }
    ],
    "className": "code.InteractiveInterpreter",
    "kwonlyargs": [],
    "name": "runsource",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "CodeType",
      "arg": "code"
     }
    ],
    "className": "code.InteractiveInterpreter",
    "kwonlyargs": [],
    "name": "runcode",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "filename"
     }
    ],
    "className": "code.InteractiveInterpreter",
    "kwonlyargs": [],
    "name": "showsyntaxerror",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "code.InteractiveInterpreter",
    "kwonlyargs": [],
    "name": "showtraceback",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "data"
     }
    ],
    "className": "code.InteractiveInterpreter",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   }
  ]
 },
 {
  "className": "code.InteractiveConsole",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "code.InteractiveConsole",
    "name": "buffer"
   },
   {
    "annotation": "str",
    "className": "code.InteractiveConsole",
    "name": "filename"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "locals"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "code.InteractiveConsole",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "banner"
     },
     {
      "annotation": "(str | None)",
      "arg": "exitmsg"
     }
    ],
    "className": "code.InteractiveConsole",
    "kwonlyargs": [],
    "name": "interact",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "code.InteractiveConsole",
    "kwonlyargs": [],
    "name": "push",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "code.InteractiveConsole",
    "kwonlyargs": [],
    "name": "resetbuffer",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "prompt"
     }
    ],
    "className": "code.InteractiveConsole",
    "kwonlyargs": [],
    "name": "raw_input",
    "returns": "str"
   }
  ]
 },
 {
  "className": "nntplib.NNTPError",
  "fields": [
   {
    "annotation": "str",
    "className": "nntplib.NNTPError",
    "name": "response"
   }
  ],
  "methods": []
 },
 {
  "className": "nntplib.NNTPReplyError",
  "fields": [],
  "methods": []
 },
 {
  "className": "nntplib.NNTPTemporaryError",
  "fields": [],
  "methods": []
 },
 {
  "className": "nntplib.NNTPPermanentError",
  "fields": [],
  "methods": []
 },
 {
  "className": "nntplib.NNTPProtocolError",
  "fields": [],
  "methods": []
 },
 {
  "className": "nntplib.NNTPDataError",
  "fields": [],
  "methods": []
 },
 {
  "className": "nntplib.GroupInfo",
  "fields": [
   {
    "annotation": "str",
    "className": "nntplib.GroupInfo",
    "name": "group"
   },
   {
    "annotation": "str",
    "className": "nntplib.GroupInfo",
    "name": "last"
   },
   {
    "annotation": "str",
    "className": "nntplib.GroupInfo",
    "name": "first"
   },
   {
    "annotation": "str",
    "className": "nntplib.GroupInfo",
    "name": "flag"
   }
  ],
  "methods": []
 },
 {
  "className": "nntplib.ArticleInfo",
  "fields": [
   {
    "annotation": "int",
    "className": "nntplib.ArticleInfo",
    "name": "number"
   },
   {
    "annotation": "str",
    "className": "nntplib.ArticleInfo",
    "name": "message_id"
   },
   {
    "annotation": "list[bytes]",
    "className": "nntplib.ArticleInfo",
    "name": "lines"
   }
  ],
  "methods": []
 },
 {
  "className": "nntplib.NNTP",
  "fields": [
   {
    "annotation": "str",
    "className": "nntplib.NNTP",
    "name": "encoding"
   },
   {
    "annotation": "str",
    "className": "nntplib.NNTP",
    "name": "errors"
   },
   {
    "annotation": "str",
    "className": "nntplib.NNTP",
    "name": "host"
   },
   {
    "annotation": "int",
    "className": "nntplib.NNTP",
    "name": "port"
   },
   {
    "annotation": "socket.socket",
    "className": "nntplib.NNTP",
    "name": "sock"
   },
   {
    "annotation": "IO[bytes]",
    "className": "nntplib.NNTP",
    "name": "file"
   },
   {
    "annotation": "int",
    "className": "nntplib.NNTP",
    "name": "debugging"
   },
   {
    "annotation": "str",
    "className": "nntplib.NNTP",
    "name": "welcome"
   },
   {
    "annotation": "bool",
    "className": "nntplib.NNTP",
    "name": "readermode_afterauth"
   },
   {
    "annotation": "bool",
    "className": "nntplib.NNTP",
    "name": "tls_on"
   },
   {
    "annotation": "bool",
    "className": "nntplib.NNTP",
    "name": "authenticated"
   },
   {
    "annotation": "str",
    "className": "nntplib.NNTP",
    "name": "nntp_implementation"
   },
   {
    "annotation": "int",
    "className": "nntplib.NNTP",
    "name": "nntp_version"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "(str | None)",
      "arg": "user"
     },
     {
      "annotation": "(str | None)",
      "arg": "password"
     },
     {
      "annotation": "(bool | None)",
      "arg": "readermode"
     },
     {
      "annotation": "bool",
      "arg": "usenetrc"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "getwelcome",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "getcapabilities",
    "returns": "dict[str, _list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "set_debuglevel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "debug",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "capabilities",
    "returns": "tuple[str, dict[str, _list[str]]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(datetime.date | datetime.datetime)",
      "arg": "date"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "newgroups",
    "returns": "tuple[str, _list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "group"
     },
     {
      "annotation": "(datetime.date | datetime.datetime)",
      "arg": "date"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "newnews",
    "returns": "tuple[str, _list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "group_pattern"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "list",
    "returns": "tuple[str, _list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "group"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "description",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "group_pattern"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "descriptions",
    "returns": "tuple[str, dict[str, str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "group",
    "returns": "tuple[str, int, int, int, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "help",
    "returns": "tuple[str, _list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "message_spec"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "stat",
    "returns": "tuple[str, int, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "next",
    "returns": "tuple[str, int, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "last",
    "returns": "tuple[str, int, str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "message_spec"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "head",
    "returns": "tuple[str, ArticleInfo]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "message_spec"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "body",
    "returns": "tuple[str, ArticleInfo]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "message_spec"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "article",
    "returns": "tuple[str, ArticleInfo]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "slave",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "hdr"
     },
     {
      "annotation": "Any",
      "arg": "str"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "xhdr",
    "returns": "tuple[str, _list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "end"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "xover",
    "returns": "tuple[str, _list[tuple[int, dict[str, str]]]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(None | str | _list[Any] | tuple[Any, ...])",
      "arg": "message_spec"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [
     {
      "annotation": "_File",
      "arg": "file"
     }
    ],
    "name": "over",
    "returns": "tuple[str, _list[tuple[int, dict[str, str]]]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "date",
    "returns": "tuple[str, datetime.datetime]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bytes | Iterable[bytes])",
      "arg": "data"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "post",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "message_id"
     },
     {
      "annotation": "(bytes | Iterable[bytes])",
      "arg": "data"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "ihave",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "quit",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "user"
     },
     {
      "annotation": "(str | None)",
      "arg": "password"
     },
     {
      "annotation": "bool",
      "arg": "usenetrc"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "login",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ssl.SSLContext | None)",
      "arg": "context"
     }
    ],
    "className": "nntplib.NNTP",
    "kwonlyargs": [],
    "name": "starttls",
    "returns": "None"
   }
  ]
 },
 {
  "className": "nntplib.NNTP_SSL",
  "fields": [
   {
    "annotation": "(ssl.SSLContext | None)",
    "className": "nntplib.NNTP_SSL",
    "name": "ssl_context"
   },
   {
    "annotation": "ssl.SSLSocket",
    "className": "nntplib.NNTP_SSL",
    "name": "sock"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "(str | None)",
      "arg": "user"
     },
     {
      "annotation": "(str | None)",
      "arg": "password"
     },
     {
      "annotation": "(ssl.SSLContext | None)",
      "arg": "ssl_context"
     },
     {
      "annotation": "(bool | None)",
      "arg": "readermode"
     },
     {
      "annotation": "bool",
      "arg": "usenetrc"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     }
    ],
    "className": "nntplib.NNTP_SSL",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "termios.error",
  "fields": [],
  "methods": []
 },
 {
  "className": "_json.make_encoder",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "sort_keys",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "skipkeys",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "key_separator",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "indent",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "markers",
    "returns": "(dict[int, Any] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "default",
    "returns": "Callable[[Any], Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "encoder",
    "returns": "Callable[[str], str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "item_separator",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[int, Any] | None)",
      "arg": "markers"
     },
     {
      "annotation": "Callable[[Any], Any]",
      "arg": "default"
     },
     {
      "annotation": "Callable[[str], str]",
      "arg": "encoder"
     },
     {
      "annotation": "(int | None)",
      "arg": "indent"
     },
     {
      "annotation": "str",
      "arg": "key_separator"
     },
     {
      "annotation": "str",
      "arg": "item_separator"
     },
     {
      "annotation": "bool",
      "arg": "sort_keys"
     },
     {
      "annotation": "bool",
      "arg": "skipkeys"
     },
     {
      "annotation": "bool",
      "arg": "allow_nan"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "obj"
     },
     {
      "annotation": "int",
      "arg": "_current_indent_level"
     }
    ],
    "className": "_json.make_encoder",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "_json.make_scanner",
  "fields": [
   {
    "annotation": "Any",
    "className": "_json.make_scanner",
    "name": "object_hook"
   },
   {
    "annotation": "Any",
    "className": "_json.make_scanner",
    "name": "object_pairs_hook"
   },
   {
    "annotation": "Any",
    "className": "_json.make_scanner",
    "name": "parse_int"
   },
   {
    "annotation": "Any",
    "className": "_json.make_scanner",
    "name": "parse_constant"
   },
   {
    "annotation": "Any",
    "className": "_json.make_scanner",
    "name": "parse_float"
   },
   {
    "annotation": "bool",
    "className": "_json.make_scanner",
    "name": "strict"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "make_scanner",
      "arg": "context"
     }
    ],
    "className": "_json.make_scanner",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "index"
     }
    ],
    "className": "_json.make_scanner",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "tuple[Any, int]"
   }
  ]
 },
 {
  "className": "codecs.CodecInfo",
  "fields": [
   {
    "annotation": "str",
    "className": "codecs.CodecInfo",
    "name": "name"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.CodecInfo",
    "kwonlyargs": [],
    "name": "encode",
    "returns": "_Encoder"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.CodecInfo",
    "kwonlyargs": [],
    "name": "decode",
    "returns": "_Decoder"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.CodecInfo",
    "kwonlyargs": [],
    "name": "streamreader",
    "returns": "_StreamReader"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.CodecInfo",
    "kwonlyargs": [],
    "name": "streamwriter",
    "returns": "_StreamWriter"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.CodecInfo",
    "kwonlyargs": [],
    "name": "incrementalencoder",
    "returns": "_IncrementalEncoder"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.CodecInfo",
    "kwonlyargs": [],
    "name": "incrementaldecoder",
    "returns": "_IncrementalDecoder"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "_Encoder",
      "arg": "encode"
     },
     {
      "annotation": "_Decoder",
      "arg": "decode"
     },
     {
      "annotation": "(_StreamReader | None)",
      "arg": "streamreader"
     },
     {
      "annotation": "(_StreamWriter | None)",
      "arg": "streamwriter"
     },
     {
      "annotation": "(_IncrementalEncoder | None)",
      "arg": "incrementalencoder"
     },
     {
      "annotation": "(_IncrementalDecoder | None)",
      "arg": "incrementaldecoder"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "codecs.CodecInfo",
    "kwonlyargs": [
     {
      "annotation": "(bool | None)",
      "arg": "_is_text_encoding"
     }
    ],
    "name": "__new__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "codecs.Codec",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "input"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.Codec",
    "kwonlyargs": [],
    "name": "encode",
    "returns": "tuple[bytes, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "input"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.Codec",
    "kwonlyargs": [],
    "name": "decode",
    "returns": "tuple[str, int]"
   }
  ]
 },
 {
  "className": "codecs.IncrementalEncoder",
  "fields": [
   {
    "annotation": "str",
    "className": "codecs.IncrementalEncoder",
    "name": "errors"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.IncrementalEncoder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "input"
     },
     {
      "annotation": "bool",
      "arg": "final"
     }
    ],
    "className": "codecs.IncrementalEncoder",
    "kwonlyargs": [],
    "name": "encode",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.IncrementalEncoder",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.IncrementalEncoder",
    "kwonlyargs": [],
    "name": "getstate",
    "returns": "(int | str)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | str)",
      "arg": "state"
     }
    ],
    "className": "codecs.IncrementalEncoder",
    "kwonlyargs": [],
    "name": "setstate",
    "returns": "None"
   }
  ]
 },
 {
  "className": "codecs.IncrementalDecoder",
  "fields": [
   {
    "annotation": "str",
    "className": "codecs.IncrementalDecoder",
    "name": "errors"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.IncrementalDecoder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "input"
     },
     {
      "annotation": "bool",
      "arg": "final"
     }
    ],
    "className": "codecs.IncrementalDecoder",
    "kwonlyargs": [],
    "name": "decode",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.IncrementalDecoder",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.IncrementalDecoder",
    "kwonlyargs": [],
    "name": "getstate",
    "returns": "tuple[bytes, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[bytes, int]",
      "arg": "state"
     }
    ],
    "className": "codecs.IncrementalDecoder",
    "kwonlyargs": [],
    "name": "setstate",
    "returns": "None"
   }
  ]
 },
 {
  "className": "codecs.BufferedIncrementalEncoder",
  "fields": [
   {
    "annotation": "str",
    "className": "codecs.BufferedIncrementalEncoder",
    "name": "buffer"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.BufferedIncrementalEncoder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "input"
     },
     {
      "annotation": "str",
      "arg": "errors"
     },
     {
      "annotation": "bool",
      "arg": "final"
     }
    ],
    "className": "codecs.BufferedIncrementalEncoder",
    "kwonlyargs": [],
    "name": "_buffer_encode",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "input"
     },
     {
      "annotation": "bool",
      "arg": "final"
     }
    ],
    "className": "codecs.BufferedIncrementalEncoder",
    "kwonlyargs": [],
    "name": "encode",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "codecs.BufferedIncrementalDecoder",
  "fields": [
   {
    "annotation": "bytes",
    "className": "codecs.BufferedIncrementalDecoder",
    "name": "buffer"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.BufferedIncrementalDecoder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "input"
     },
     {
      "annotation": "str",
      "arg": "errors"
     },
     {
      "annotation": "bool",
      "arg": "final"
     }
    ],
    "className": "codecs.BufferedIncrementalDecoder",
    "kwonlyargs": [],
    "name": "_buffer_decode",
    "returns": "tuple[str, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "input"
     },
     {
      "annotation": "bool",
      "arg": "final"
     }
    ],
    "className": "codecs.BufferedIncrementalDecoder",
    "kwonlyargs": [],
    "name": "decode",
    "returns": "str"
   }
  ]
 },
 {
  "className": "codecs.StreamWriter",
  "fields": [
   {
    "annotation": "str",
    "className": "codecs.StreamWriter",
    "name": "errors"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[bytes]",
      "arg": "stream"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.StreamWriter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "object"
     }
    ],
    "className": "codecs.StreamWriter",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "list"
     }
    ],
    "className": "codecs.StreamWriter",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamWriter",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamWriter",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(types.TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "codecs.StreamWriter",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "Callable[[str], Any]",
      "arg": "getattr"
     }
    ],
    "className": "codecs.StreamWriter",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "codecs.StreamReader",
  "fields": [
   {
    "annotation": "str",
    "className": "codecs.StreamReader",
    "name": "errors"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[bytes]",
      "arg": "stream"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     },
     {
      "annotation": "int",
      "arg": "chars"
     },
     {
      "annotation": "bool",
      "arg": "firstline"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "read",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     },
     {
      "annotation": "bool",
      "arg": "keepends"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "sizehint"
     },
     {
      "annotation": "bool",
      "arg": "keepends"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(types.TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "Callable[[str], Any]",
      "arg": "getattr"
     }
    ],
    "className": "codecs.StreamReader",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "codecs.StreamReaderWriter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[bytes]",
      "arg": "stream"
     },
     {
      "annotation": "_StreamReader",
      "arg": "Reader"
     },
     {
      "annotation": "_StreamWriter",
      "arg": "Writer"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "read",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "sizehint"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "data"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "list"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "offset"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(types.TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "isatty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "truncate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "seekable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamReaderWriter",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "codecs.StreamRecoder",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "IO[bytes]",
      "arg": "stream"
     },
     {
      "annotation": "_Encoder",
      "arg": "encode"
     },
     {
      "annotation": "_Decoder",
      "arg": "decode"
     },
     {
      "annotation": "_StreamReader",
      "arg": "Reader"
     },
     {
      "annotation": "_StreamWriter",
      "arg": "Writer"
     },
     {
      "annotation": "str",
      "arg": "errors"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "size"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "sizehint"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[bytes]",
      "arg": "list"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(types.TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "offset"
     },
     {
      "annotation": "int",
      "arg": "whence"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "isatty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "truncate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "seekable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codecs.StreamRecoder",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "codeop.Compile",
  "fields": [
   {
    "annotation": "int",
    "className": "codeop.Compile",
    "name": "flags"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codeop.Compile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "source"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "str",
      "arg": "symbol"
     }
    ],
    "className": "codeop.Compile",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "CodeType"
   }
  ]
 },
 {
  "className": "codeop.CommandCompiler",
  "fields": [
   {
    "annotation": "Compile",
    "className": "codeop.CommandCompiler",
    "name": "compiler"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "codeop.CommandCompiler",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "source"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "str",
      "arg": "symbol"
     }
    ],
    "className": "codeop.CommandCompiler",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "(CodeType | None)"
   }
  ]
 },
 {
  "className": "textwrap.TextWrapper",
  "fields": [
   {
    "annotation": "int",
    "className": "textwrap.TextWrapper",
    "name": "width"
   },
   {
    "annotation": "str",
    "className": "textwrap.TextWrapper",
    "name": "initial_indent"
   },
   {
    "annotation": "str",
    "className": "textwrap.TextWrapper",
    "name": "subsequent_indent"
   },
   {
    "annotation": "bool",
    "className": "textwrap.TextWrapper",
    "name": "expand_tabs"
   },
   {
    "annotation": "bool",
    "className": "textwrap.TextWrapper",
    "name": "replace_whitespace"
   },
   {
    "annotation": "bool",
    "className": "textwrap.TextWrapper",
    "name": "fix_sentence_endings"
   },
   {
    "annotation": "bool",
    "className": "textwrap.TextWrapper",
    "name": "drop_whitespace"
   },
   {
    "annotation": "bool",
    "className": "textwrap.TextWrapper",
    "name": "break_long_words"
   },
   {
    "annotation": "bool",
    "className": "textwrap.TextWrapper",
    "name": "break_on_hyphens"
   },
   {
    "annotation": "int",
    "className": "textwrap.TextWrapper",
    "name": "tabsize"
   },
   {
    "annotation": "(int | None)",
    "className": "textwrap.TextWrapper",
    "name": "max_lines"
   },
   {
    "annotation": "str",
    "className": "textwrap.TextWrapper",
    "name": "placeholder"
   },
   {
    "annotation": "Pattern[str]",
    "className": "textwrap.TextWrapper",
    "name": "sentence_end_re"
   },
   {
    "annotation": "Pattern[str]",
    "className": "textwrap.TextWrapper",
    "name": "wordsep_re"
   },
   {
    "annotation": "Pattern[str]",
    "className": "textwrap.TextWrapper",
    "name": "wordsep_simple_re"
   },
   {
    "annotation": "str",
    "className": "textwrap.TextWrapper",
    "name": "whitespace_trans"
   },
   {
    "annotation": "dict[int, int]",
    "className": "textwrap.TextWrapper",
    "name": "unicode_whitespace_trans"
   },
   {
    "annotation": "int",
    "className": "textwrap.TextWrapper",
    "name": "uspace"
   },
   {
    "annotation": "str",
    "className": "textwrap.TextWrapper",
    "name": "x"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "str",
      "arg": "initial_indent"
     },
     {
      "annotation": "str",
      "arg": "subsequent_indent"
     },
     {
      "annotation": "bool",
      "arg": "expand_tabs"
     },
     {
      "annotation": "bool",
      "arg": "replace_whitespace"
     },
     {
      "annotation": "bool",
      "arg": "fix_sentence_endings"
     },
     {
      "annotation": "bool",
      "arg": "break_long_words"
     },
     {
      "annotation": "bool",
      "arg": "drop_whitespace"
     },
     {
      "annotation": "bool",
      "arg": "break_on_hyphens"
     },
     {
      "annotation": "int",
      "arg": "tabsize"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "max_lines"
     },
     {
      "annotation": "str",
      "arg": "placeholder"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [],
    "name": "_munge_whitespace",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [],
    "name": "_split",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[str]",
      "arg": "chunks"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [],
    "name": "_fix_sentence_endings",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[str]",
      "arg": "reversed_chunks"
     },
     {
      "annotation": "list[str]",
      "arg": "cur_line"
     },
     {
      "annotation": "int",
      "arg": "cur_len"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [],
    "name": "_handle_long_word",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[str]",
      "arg": "chunks"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [],
    "name": "_wrap_chunks",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [],
    "name": "_split_chunks",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [],
    "name": "wrap",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "textwrap.TextWrapper",
    "kwonlyargs": [],
    "name": "fill",
    "returns": "str"
   }
  ]
 },
 {
  "className": "collections.UserDict",
  "fields": [
   {
    "annotation": "dict[_KT, _VT]",
    "className": "collections.UserDict",
    "name": "data"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "UserDict[_KT, _VT]",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "__dict"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "UserDict[str, _VT]",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "__dict"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsKeysAndGetItem[_KT, _VT]",
      "arg": "__dict"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[tuple[_KT, _VT]]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "UserDict[str, str]",
      "arg": "self"
     },
     {
      "annotation": "Iterable[list[str]]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "item"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "key"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "None",
      "arg": "value"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "UserDict[_T, Any | None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "_S",
      "arg": "value"
     }
    ],
    "className": "collections.UserDict",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "UserDict[_T, _S]"
   }
  ]
 },
 {
  "className": "collections.UserList",
  "fields": [
   {
    "annotation": "list[_T]",
    "className": "collections.UserList",
    "name": "data"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Iterable[_T] | None)",
      "arg": "initlist"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(list[_T] | UserList[_T])",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(list[_T] | UserList[_T])",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(list[_T] | UserList[_T])",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(list[_T] | UserList[_T])",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "item"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "i"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "i"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "i"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "i"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "item"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(SupportsIndex | slice)",
      "arg": "i"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__iadd__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "__imul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "i"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "i"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__start"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__stop"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "UserList[SupportsRichComparisonT]",
      "arg": "self"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [
     {
      "annotation": "None",
      "arg": "key"
     },
     {
      "annotation": "bool",
      "arg": "reverse"
     }
    ],
    "name": "sort",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [
     {
      "annotation": "Callable[[_T], SupportsRichComparison]",
      "arg": "key"
     },
     {
      "annotation": "bool",
      "arg": "reverse"
     }
    ],
    "name": "sort",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.UserList",
    "kwonlyargs": [],
    "name": "extend",
    "returns": "None"
   }
  ]
 },
 {
  "className": "collections.UserString",
  "fields": [
   {
    "annotation": "str",
    "className": "collections.UserString",
    "name": "data"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "seq"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__int__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__float__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__complex__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__getnewargs__",
    "returns": "tuple[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "string"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "string"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "string"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "string"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "string"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "char"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(SupportsIndex | slice)",
      "arg": "index"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[Self]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__reversed__",
    "returns": "Iterator[Self]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "args"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "capitalize",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "casefold",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "center",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "sub"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "end"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | tuple[str, ...])",
      "arg": "suffix"
     },
     {
      "annotation": "(int | None)",
      "arg": "start"
     },
     {
      "annotation": "(int | None)",
      "arg": "end"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "endswith",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "tabsize"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "expandtabs",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "sub"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "end"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "find",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "format",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, Any]",
      "arg": "mapping"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "format_map",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sub"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "end"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isalpha",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isalnum",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isdecimal",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isdigit",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isidentifier",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "islower",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isnumeric",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isprintable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isspace",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "istitle",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "isupper",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "seq"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "join",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "ljust",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "lower",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "chars"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "lstrip",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "(dict[int, _T] | dict[str, _T] | dict[str | int, _T])",
      "arg": "x"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "maketrans",
    "returns": "dict[int, _T]"
   },
   {
    "args": [
     {
      "annotation": "str",
      "arg": "x"
     },
     {
      "annotation": "str",
      "arg": "y"
     },
     {
      "annotation": "str",
      "arg": "z"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "maketrans",
    "returns": "dict[int, int | None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sep"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "partition",
    "returns": "tuple[str, str, str]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "old"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "new"
     },
     {
      "annotation": "int",
      "arg": "maxsplit"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "replace",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "sub"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "end"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "rfind",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | UserString)",
      "arg": "sub"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "end"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "rindex",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "rjust",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sep"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "rpartition",
    "returns": "tuple[str, str, str]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "chars"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "rstrip",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sep"
     },
     {
      "annotation": "int",
      "arg": "maxsplit"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "split",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sep"
     },
     {
      "annotation": "int",
      "arg": "maxsplit"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "rsplit",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "keepends"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "splitlines",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | tuple[str, ...])",
      "arg": "prefix"
     },
     {
      "annotation": "(int | None)",
      "arg": "start"
     },
     {
      "annotation": "(int | None)",
      "arg": "end"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "startswith",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "chars"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "strip",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "swapcase",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "title",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "translate",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "upper",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "collections.UserString",
    "kwonlyargs": [],
    "name": "zfill",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "collections.deque",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "maxlen",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "(int | None)",
      "arg": "maxlen"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__x"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__x"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "appendleft",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__x"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "extend",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "extendleft",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__i"
     },
     {
      "annotation": "_T",
      "arg": "__x"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__x"
     },
     {
      "annotation": "int",
      "arg": "__start"
     },
     {
      "annotation": "int",
      "arg": "__stop"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "popleft",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__value"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "rotate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__copy__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__index"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     },
     {
      "annotation": "_T",
      "arg": "__x"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "__i"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__reduce__",
    "returns": "tuple[type[Self], tuple[()], None, Iterator[_T]]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__iadd__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Self",
      "arg": "__other"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__other"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__other"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__imul__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "deque[_T]",
      "arg": "__other"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "deque[_T]",
      "arg": "__other"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "deque[_T]",
      "arg": "__other"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "deque[_T]",
      "arg": "__other"
     }
    ],
    "className": "collections.deque",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "collections.Counter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "Counter[_T]",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "__iterable"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Counter[str]",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "__iterable"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsKeysAndGetItem[_T, int]",
      "arg": "__mapping"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "elements",
    "returns": "Iterator[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "n"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "most_common",
    "returns": "list[tuple[_T, int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "iterable"
     },
     {
      "annotation": "(int | None)",
      "arg": "v"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "__iterable"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "subtract",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[_T, int]",
      "arg": "__mapping"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "subtract",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "subtract",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[_T, int]",
      "arg": "__m"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__m"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "__m"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "key"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__missing__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "elem"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Counter[_S]",
      "arg": "other"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "Counter[_T | _S]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Counter[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "Counter[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Counter[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "Counter[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Counter[_S]",
      "arg": "other"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "Counter[_T | _S]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "Counter[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "Counter[_T]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Counter[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__iadd__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Counter[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__isub__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Counter[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__iand__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Counter[_T]",
      "arg": "other"
     }
    ],
    "className": "collections.Counter",
    "kwonlyargs": [],
    "name": "__ior__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "collections.OrderedDict",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "last"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "popitem",
    "returns": "tuple[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "bool",
      "arg": "last"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "move_to_end",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "__reversed__",
    "returns": "Iterator[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "_OrderedDictKeysView[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "items",
    "returns": "_OrderedDictItemsView[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "values",
    "returns": "_OrderedDictValuesView[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "None",
      "arg": "value"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "OrderedDict[_T, Any | None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "_S",
      "arg": "value"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "OrderedDict[_T, _S]"
   },
   {
    "args": [
     {
      "annotation": "OrderedDict[_KT, _T | None]",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "setdefault",
    "returns": "(_T | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "default"
     }
    ],
    "className": "collections.OrderedDict",
    "kwonlyargs": [],
    "name": "setdefault",
    "returns": "_VT"
   }
  ]
 },
 {
  "className": "collections.defaultdict",
  "fields": [
   {
    "annotation": "(Callable[[], _VT] | None)",
    "className": "collections.defaultdict",
    "name": "default_factory"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "defaultdict[_KT, _VT]",
      "arg": "self"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "defaultdict[str, _VT]",
      "arg": "self"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[], _VT] | None)",
      "arg": "__default_factory"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "defaultdict[str, _VT]",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[], _VT] | None)",
      "arg": "__default_factory"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[], _VT] | None)",
      "arg": "__default_factory"
     },
     {
      "annotation": "SupportsKeysAndGetItem[_KT, _VT]",
      "arg": "__map"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "defaultdict[str, _VT]",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[], _VT] | None)",
      "arg": "__default_factory"
     },
     {
      "annotation": "SupportsKeysAndGetItem[str, _VT]",
      "arg": "__map"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[], _VT] | None)",
      "arg": "__default_factory"
     },
     {
      "annotation": "Iterable[tuple[_KT, _VT]]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "defaultdict[str, _VT]",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[], _VT] | None)",
      "arg": "__default_factory"
     },
     {
      "annotation": "Iterable[tuple[str, _VT]]",
      "arg": "__iterable"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__missing__",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "__copy__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.defaultdict",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "collections.ChainMap",
  "fields": [
   {
    "annotation": "list[MutableMapping[_KT, _VT]]",
    "className": "collections.ChainMap",
    "name": "maps"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(MutableMapping[_KT, _VT] | None)",
      "arg": "m"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "new_child",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "parents",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "value"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "key"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__missing__",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "default"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "setdefault",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "(_VT | _T)",
      "arg": "default"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "(_VT | _T)"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "iterable"
     },
     {
      "annotation": "None",
      "arg": "__value"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "ChainMap[_T, Any | None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "__iterable"
     },
     {
      "annotation": "_S",
      "arg": "__value"
     }
    ],
    "className": "collections.ChainMap",
    "kwonlyargs": [],
    "name": "fromkeys",
    "returns": "ChainMap[_T, _S]"
   }
  ]
 },
 {
  "className": "numbers.Number",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Number",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "numbers.Complex",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__complex__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "real",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "imag",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "exponent"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "base"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__rpow__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__abs__",
    "returns": "Real"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "conjugate",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "numbers.Complex",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "numbers.Real",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__float__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__trunc__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__floor__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__ceil__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "ndigits"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "ndigits"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__divmod__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__rdivmod__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__floordiv__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__rfloordiv__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__rmod__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "__complex__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "real",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "imag",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Real",
    "kwonlyargs": [],
    "name": "conjugate",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "numbers.Rational",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Rational",
    "kwonlyargs": [],
    "name": "numerator",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Rational",
    "kwonlyargs": [],
    "name": "denominator",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Rational",
    "kwonlyargs": [],
    "name": "__float__",
    "returns": "float"
   }
  ]
 },
 {
  "className": "numbers.Integral",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__int__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__index__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "exponent"
     },
     {
      "annotation": "(Any | None)",
      "arg": "modulus"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__lshift__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__rlshift__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__rshift__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__rrshift__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__rand__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__rxor__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__invert__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "__float__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "numerator",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "numbers.Integral",
    "kwonlyargs": [],
    "name": "denominator",
    "returns": "int"
   }
  ]
 },
 {
  "className": "threading.ThreadError",
  "fields": [],
  "methods": []
 },
 {
  "className": "threading.local",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "threading.local",
    "kwonlyargs": [],
    "name": "__getattribute__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "threading.local",
    "kwonlyargs": [],
    "name": "__setattr__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "threading.local",
    "kwonlyargs": [],
    "name": "__delattr__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "threading.Thread",
  "fields": [
   {
    "annotation": "str",
    "className": "threading.Thread",
    "name": "name"
   },
   {
    "annotation": "bool",
    "className": "threading.Thread",
    "name": "daemon"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "ident",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "group"
     },
     {
      "annotation": "(Callable[..., Any] | None)",
      "arg": "target"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "args"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "kwargs"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [
     {
      "annotation": "(bool | None)",
      "arg": "daemon"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "start",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "run",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "join",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "is_alive",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "getName",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "setName",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "isDaemon",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "daemonic"
     }
    ],
    "className": "threading.Thread",
    "kwonlyargs": [],
    "name": "setDaemon",
    "returns": "None"
   }
  ]
 },
 {
  "className": "threading.Lock",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Lock",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Lock",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "exc_tb"
     }
    ],
    "className": "threading.Lock",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "blocking"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     }
    ],
    "className": "threading.Lock",
    "kwonlyargs": [],
    "name": "acquire",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Lock",
    "kwonlyargs": [],
    "name": "release",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Lock",
    "kwonlyargs": [],
    "name": "locked",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "threading.Condition",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Lock | _RLock | None)",
      "arg": "lock"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "exc_tb"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "blocking"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "acquire",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "release",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "wait",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[], _T]",
      "arg": "predicate"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "wait_for",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "notify",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "notify_all",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Condition",
    "kwonlyargs": [],
    "name": "notifyAll",
    "returns": "None"
   }
  ]
 },
 {
  "className": "threading.Semaphore",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "value"
     }
    ],
    "className": "threading.Semaphore",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "t"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "v"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "threading.Semaphore",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "blocking"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "threading.Semaphore",
    "kwonlyargs": [],
    "name": "acquire",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "blocking"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "threading.Semaphore",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "threading.BoundedSemaphore",
  "fields": [],
  "methods": []
 },
 {
  "className": "threading.Event",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Event",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Event",
    "kwonlyargs": [],
    "name": "is_set",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Event",
    "kwonlyargs": [],
    "name": "isSet",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Event",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Event",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "threading.Event",
    "kwonlyargs": [],
    "name": "wait",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "threading.Timer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "interval"
     },
     {
      "annotation": "Callable[..., Any]",
      "arg": "function"
     },
     {
      "annotation": "(Iterable[Any] | None)",
      "arg": "args"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "kwargs"
     }
    ],
    "className": "threading.Timer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Timer",
    "kwonlyargs": [],
    "name": "cancel",
    "returns": "None"
   }
  ]
 },
 {
  "className": "threading.Barrier",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Barrier",
    "kwonlyargs": [],
    "name": "parties",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Barrier",
    "kwonlyargs": [],
    "name": "n_waiting",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Barrier",
    "kwonlyargs": [],
    "name": "broken",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "parties"
     },
     {
      "annotation": "(Callable[[], None] | None)",
      "arg": "action"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "threading.Barrier",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "threading.Barrier",
    "kwonlyargs": [],
    "name": "wait",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Barrier",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "threading.Barrier",
    "kwonlyargs": [],
    "name": "abort",
    "returns": "None"
   }
  ]
 },
 {
  "className": "threading.BrokenBarrierError",
  "fields": [],
  "methods": []
 },
 {
  "className": "_markupbase.ParserBase",
  "fields": [
   {
    "annotation": "int",
    "className": "_markupbase.ParserBase",
    "name": "lineno"
   },
   {
    "annotation": "int",
    "className": "_markupbase.ParserBase",
    "name": "offset"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_markupbase.ParserBase",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_markupbase.ParserBase",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_markupbase.ParserBase",
    "kwonlyargs": [],
    "name": "getpos",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "data"
     }
    ],
    "className": "_markupbase.ParserBase",
    "kwonlyargs": [],
    "name": "unknown_decl",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "i"
     },
     {
      "annotation": "int",
      "arg": "report"
     }
    ],
    "className": "_markupbase.ParserBase",
    "kwonlyargs": [],
    "name": "parse_comment",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "i"
     }
    ],
    "className": "_markupbase.ParserBase",
    "kwonlyargs": [],
    "name": "parse_declaration",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "i"
     },
     {
      "annotation": "int",
      "arg": "report"
     }
    ],
    "className": "_markupbase.ParserBase",
    "kwonlyargs": [],
    "name": "parse_marked_section",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "i"
     },
     {
      "annotation": "int",
      "arg": "j"
     }
    ],
    "className": "_markupbase.ParserBase",
    "kwonlyargs": [],
    "name": "updatepos",
    "returns": "int"
   }
  ]
 },
 {
  "className": "time.struct_time",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_year",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_mon",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_mday",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_hour",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_min",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_sec",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_wday",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_yday",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_isdst",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_zone",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "time.struct_time",
    "kwonlyargs": [],
    "name": "tm_gmtoff",
    "returns": "int"
   }
  ]
 },
 {
  "className": "optparse.OptParseError",
  "fields": [
   {
    "annotation": "str",
    "className": "optparse.OptParseError",
    "name": "msg"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "optparse.OptParseError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "optparse.BadOptionError",
  "fields": [
   {
    "annotation": "str",
    "className": "optparse.BadOptionError",
    "name": "opt_str"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt_str"
     }
    ],
    "className": "optparse.BadOptionError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "optparse.AmbiguousOptionError",
  "fields": [
   {
    "annotation": "Iterable[str]",
    "className": "optparse.AmbiguousOptionError",
    "name": "possibilities"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt_str"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "possibilities"
     }
    ],
    "className": "optparse.AmbiguousOptionError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "optparse.OptionError",
  "fields": [
   {
    "annotation": "str",
    "className": "optparse.OptionError",
    "name": "msg"
   },
   {
    "annotation": "str",
    "className": "optparse.OptionError",
    "name": "option_id"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     },
     {
      "annotation": "Option",
      "arg": "option"
     }
    ],
    "className": "optparse.OptionError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "optparse.OptionConflictError",
  "fields": [],
  "methods": []
 },
 {
  "className": "optparse.OptionValueError",
  "fields": [],
  "methods": []
 },
 {
  "className": "optparse.HelpFormatter",
  "fields": [
   {
    "annotation": "str",
    "className": "optparse.HelpFormatter",
    "name": "NO_DEFAULT_VALUE"
   },
   {
    "annotation": "str",
    "className": "optparse.HelpFormatter",
    "name": "_long_opt_fmt"
   },
   {
    "annotation": "str",
    "className": "optparse.HelpFormatter",
    "name": "_short_opt_fmt"
   },
   {
    "annotation": "int",
    "className": "optparse.HelpFormatter",
    "name": "current_indent"
   },
   {
    "annotation": "str",
    "className": "optparse.HelpFormatter",
    "name": "default_tag"
   },
   {
    "annotation": "Any",
    "className": "optparse.HelpFormatter",
    "name": "help_position"
   },
   {
    "annotation": "Any",
    "className": "optparse.HelpFormatter",
    "name": "help_width"
   },
   {
    "annotation": "int",
    "className": "optparse.HelpFormatter",
    "name": "indent_increment"
   },
   {
    "annotation": "int",
    "className": "optparse.HelpFormatter",
    "name": "level"
   },
   {
    "annotation": "int",
    "className": "optparse.HelpFormatter",
    "name": "max_help_position"
   },
   {
    "annotation": "dict[Option, str]",
    "className": "optparse.HelpFormatter",
    "name": "option_strings"
   },
   {
    "annotation": "OptionParser",
    "className": "optparse.HelpFormatter",
    "name": "parser"
   },
   {
    "annotation": "Any",
    "className": "optparse.HelpFormatter",
    "name": "short_first"
   },
   {
    "annotation": "int",
    "className": "optparse.HelpFormatter",
    "name": "width"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "indent_increment"
     },
     {
      "annotation": "int",
      "arg": "max_help_position"
     },
     {
      "annotation": "(int | None)",
      "arg": "width"
     },
     {
      "annotation": "int",
      "arg": "short_first"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "dedent",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Option",
      "arg": "option"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "expand_default",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "description"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "format_description",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "epilog"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "format_epilog",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "heading"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "format_heading",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Option",
      "arg": "option"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "format_option",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Option",
      "arg": "option"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "format_option_strings",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "usage"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "format_usage",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "indent",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "delim"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "set_long_opt_delimiter",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OptionParser",
      "arg": "parser"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "set_parser",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "delim"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "set_short_opt_delimiter",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OptionParser",
      "arg": "parser"
     }
    ],
    "className": "optparse.HelpFormatter",
    "kwonlyargs": [],
    "name": "store_option_strings",
    "returns": "None"
   }
  ]
 },
 {
  "className": "optparse.IndentedHelpFormatter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "indent_increment"
     },
     {
      "annotation": "int",
      "arg": "max_help_position"
     },
     {
      "annotation": "(int | None)",
      "arg": "width"
     },
     {
      "annotation": "int",
      "arg": "short_first"
     }
    ],
    "className": "optparse.IndentedHelpFormatter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "heading"
     }
    ],
    "className": "optparse.IndentedHelpFormatter",
    "kwonlyargs": [],
    "name": "format_heading",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "usage"
     }
    ],
    "className": "optparse.IndentedHelpFormatter",
    "kwonlyargs": [],
    "name": "format_usage",
    "returns": "str"
   }
  ]
 },
 {
  "className": "optparse.TitledHelpFormatter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "indent_increment"
     },
     {
      "annotation": "int",
      "arg": "max_help_position"
     },
     {
      "annotation": "(int | None)",
      "arg": "width"
     },
     {
      "annotation": "int",
      "arg": "short_first"
     }
    ],
    "className": "optparse.TitledHelpFormatter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "heading"
     }
    ],
    "className": "optparse.TitledHelpFormatter",
    "kwonlyargs": [],
    "name": "format_heading",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "usage"
     }
    ],
    "className": "optparse.TitledHelpFormatter",
    "kwonlyargs": [],
    "name": "format_usage",
    "returns": "str"
   }
  ]
 },
 {
  "className": "optparse.Option",
  "fields": [
   {
    "annotation": "tuple[str, ...]",
    "className": "optparse.Option",
    "name": "ACTIONS"
   },
   {
    "annotation": "tuple[str, ...]",
    "className": "optparse.Option",
    "name": "ALWAYS_TYPED_ACTIONS"
   },
   {
    "annotation": "list[str]",
    "className": "optparse.Option",
    "name": "ATTRS"
   },
   {
    "annotation": "(list[Callable[..., Any]] | None)",
    "className": "optparse.Option",
    "name": "CHECK_METHODS"
   },
   {
    "annotation": "tuple[str, ...]",
    "className": "optparse.Option",
    "name": "CONST_ACTIONS"
   },
   {
    "annotation": "tuple[str, ...]",
    "className": "optparse.Option",
    "name": "STORE_ACTIONS"
   },
   {
    "annotation": "tuple[str, ...]",
    "className": "optparse.Option",
    "name": "TYPED_ACTIONS"
   },
   {
    "annotation": "tuple[str, ...]",
    "className": "optparse.Option",
    "name": "TYPES"
   },
   {
    "annotation": "dict[str, Callable[..., Any]]",
    "className": "optparse.Option",
    "name": "TYPE_CHECKER"
   },
   {
    "annotation": "list[str]",
    "className": "optparse.Option",
    "name": "_long_opts"
   },
   {
    "annotation": "list[str]",
    "className": "optparse.Option",
    "name": "_short_opts"
   },
   {
    "annotation": "str",
    "className": "optparse.Option",
    "name": "action"
   },
   {
    "annotation": "(str | None)",
    "className": "optparse.Option",
    "name": "dest"
   },
   {
    "annotation": "Any",
    "className": "optparse.Option",
    "name": "default"
   },
   {
    "annotation": "int",
    "className": "optparse.Option",
    "name": "nargs"
   },
   {
    "annotation": "Any",
    "className": "optparse.Option",
    "name": "type"
   },
   {
    "annotation": "(Callable[..., Any] | None)",
    "className": "optparse.Option",
    "name": "callback"
   },
   {
    "annotation": "(tuple[Any, ...] | None)",
    "className": "optparse.Option",
    "name": "callback_args"
   },
   {
    "annotation": "(dict[str, Any] | None)",
    "className": "optparse.Option",
    "name": "callback_kwargs"
   },
   {
    "annotation": "(str | None)",
    "className": "optparse.Option",
    "name": "help"
   },
   {
    "annotation": "(str | None)",
    "className": "optparse.Option",
    "name": "metavar"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_check_action",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_check_callback",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_check_choice",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_check_const",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_check_dest",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_check_nargs",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str | None]",
      "arg": "opts"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_check_opt_strings",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_check_type",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "attrs"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_set_attrs",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "opts"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "_set_opt_strings",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "check_value",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "convert_value",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "get_opt_string",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "opt"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "Any",
      "arg": "values"
     },
     {
      "annotation": "OptionParser",
      "arg": "parser"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "process",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "action"
     },
     {
      "annotation": "str",
      "arg": "dest"
     },
     {
      "annotation": "Any",
      "arg": "opt"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "Any",
      "arg": "values"
     },
     {
      "annotation": "OptionParser",
      "arg": "parser"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "take_action",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.Option",
    "kwonlyargs": [],
    "name": "takes_value",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "optparse.OptionContainer",
  "fields": [
   {
    "annotation": "dict[str, Option]",
    "className": "optparse.OptionContainer",
    "name": "_long_opt"
   },
   {
    "annotation": "dict[str, Option]",
    "className": "optparse.OptionContainer",
    "name": "_short_opt"
   },
   {
    "annotation": "str",
    "className": "optparse.OptionContainer",
    "name": "conflict_handler"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "optparse.OptionContainer",
    "name": "defaults"
   },
   {
    "annotation": "Any",
    "className": "optparse.OptionContainer",
    "name": "description"
   },
   {
    "annotation": "type[Option]",
    "className": "optparse.OptionContainer",
    "name": "option_class"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[Option]",
      "arg": "option_class"
     },
     {
      "annotation": "Any",
      "arg": "conflict_handler"
     },
     {
      "annotation": "Any",
      "arg": "description"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "option"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "_check_conflict",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "_create_option_mappings",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OptionParser",
      "arg": "parser"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "_share_option_mappings",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Option",
      "arg": "opt"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "add_option",
    "returns": "Option"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "add_option",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Option]",
      "arg": "option_list"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "add_options",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "destroy",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(HelpFormatter | None)",
      "arg": "formatter"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "format_description",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(HelpFormatter | None)",
      "arg": "formatter"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "format_help",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(HelpFormatter | None)",
      "arg": "formatter"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "format_option_help",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "get_description",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt_str"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "get_option",
    "returns": "(Option | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt_str"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "has_option",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt_str"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "remove_option",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "handler"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "set_conflict_handler",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "description"
     }
    ],
    "className": "optparse.OptionContainer",
    "kwonlyargs": [],
    "name": "set_description",
    "returns": "None"
   }
  ]
 },
 {
  "className": "optparse.OptionGroup",
  "fields": [
   {
    "annotation": "list[Option]",
    "className": "optparse.OptionGroup",
    "name": "option_list"
   },
   {
    "annotation": "OptionParser",
    "className": "optparse.OptionGroup",
    "name": "parser"
   },
   {
    "annotation": "str",
    "className": "optparse.OptionGroup",
    "name": "title"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OptionParser",
      "arg": "parser"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "(str | None)",
      "arg": "description"
     }
    ],
    "className": "optparse.OptionGroup",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionGroup",
    "kwonlyargs": [],
    "name": "_create_option_list",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "title"
     }
    ],
    "className": "optparse.OptionGroup",
    "kwonlyargs": [],
    "name": "set_title",
    "returns": "None"
   }
  ]
 },
 {
  "className": "optparse.Values",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "defaults"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, Any]",
      "arg": "dict"
     },
     {
      "annotation": "Any",
      "arg": "mode"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "_update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, Any]",
      "arg": "dict"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "_update_careful",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, Any]",
      "arg": "dict"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "_update_loose",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "attr"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "ensure_value",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "str",
      "arg": "mode"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "read_file",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "modname"
     },
     {
      "annotation": "str",
      "arg": "mode"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "read_module",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "__setattr__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "optparse.Values",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "optparse.OptionParser",
  "fields": [
   {
    "annotation": "bool",
    "className": "optparse.OptionParser",
    "name": "allow_interspersed_args"
   },
   {
    "annotation": "(str | None)",
    "className": "optparse.OptionParser",
    "name": "epilog"
   },
   {
    "annotation": "HelpFormatter",
    "className": "optparse.OptionParser",
    "name": "formatter"
   },
   {
    "annotation": "(list[str] | None)",
    "className": "optparse.OptionParser",
    "name": "largs"
   },
   {
    "annotation": "list[OptionGroup]",
    "className": "optparse.OptionParser",
    "name": "option_groups"
   },
   {
    "annotation": "list[Option]",
    "className": "optparse.OptionParser",
    "name": "option_list"
   },
   {
    "annotation": "Any",
    "className": "optparse.OptionParser",
    "name": "process_default_values"
   },
   {
    "annotation": "(str | None)",
    "className": "optparse.OptionParser",
    "name": "prog"
   },
   {
    "annotation": "(list[Any] | None)",
    "className": "optparse.OptionParser",
    "name": "rargs"
   },
   {
    "annotation": "list[Option]",
    "className": "optparse.OptionParser",
    "name": "standard_option_list"
   },
   {
    "annotation": "(str | None)",
    "className": "optparse.OptionParser",
    "name": "usage"
   },
   {
    "annotation": "(Values | None)",
    "className": "optparse.OptionParser",
    "name": "values"
   },
   {
    "annotation": "str",
    "className": "optparse.OptionParser",
    "name": "version"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "usage"
     },
     {
      "annotation": "(Iterable[Option] | None)",
      "arg": "option_list"
     },
     {
      "annotation": "type[Option]",
      "arg": "option_class"
     },
     {
      "annotation": "(str | None)",
      "arg": "version"
     },
     {
      "annotation": "str",
      "arg": "conflict_handler"
     },
     {
      "annotation": "(str | None)",
      "arg": "description"
     },
     {
      "annotation": "(HelpFormatter | None)",
      "arg": "formatter"
     },
     {
      "annotation": "bool",
      "arg": "add_help_option"
     },
     {
      "annotation": "(str | None)",
      "arg": "prog"
     },
     {
      "annotation": "(str | None)",
      "arg": "epilog"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_add_help_option",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_add_version_option",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_create_option_list",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_get_all_options",
    "returns": "list[Option]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "args"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_get_args",
    "returns": "list[Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_init_parsing_state",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_match_long_opt",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Option]",
      "arg": "option_list"
     },
     {
      "annotation": "bool",
      "arg": "add_help"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_populate_option_list",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[Any]",
      "arg": "largs"
     },
     {
      "annotation": "list[Any]",
      "arg": "rargs"
     },
     {
      "annotation": "Values",
      "arg": "values"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_process_args",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[Any]",
      "arg": "rargs"
     },
     {
      "annotation": "Any",
      "arg": "values"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_process_long_opt",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[Any]",
      "arg": "rargs"
     },
     {
      "annotation": "Any",
      "arg": "values"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "_process_short_opts",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OptionGroup",
      "arg": "__opt_group"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "add_option_group",
    "returns": "OptionGroup"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "add_option_group",
    "returns": "OptionGroup"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Values",
      "arg": "values"
     },
     {
      "annotation": "list[str]",
      "arg": "args"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "check_values",
    "returns": "tuple[Values, list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "disable_interspersed_args",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "enable_interspersed_args",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "error",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "status"
     },
     {
      "annotation": "(str | None)",
      "arg": "msg"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "exit",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "s"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "expand_prog_name",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "HelpFormatter",
      "arg": "formatter"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "format_epilog",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(HelpFormatter | None)",
      "arg": "formatter"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "format_help",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(HelpFormatter | None)",
      "arg": "formatter"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "format_option_help",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "get_default_values",
    "returns": "Values"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "opt_str"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "get_option_group",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "get_prog_name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "get_usage",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "get_version",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Sequence[AnyStr] | None)",
      "arg": "args"
     },
     {
      "annotation": "(Values | None)",
      "arg": "values"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "parse_args",
    "returns": "tuple[Values, list[AnyStr]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "file"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "print_usage",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "file"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "print_help",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "file"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "print_version",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "dest"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "set_default",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "set_defaults",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "process"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "set_process_default_values",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "usage"
     }
    ],
    "className": "optparse.OptionParser",
    "kwonlyargs": [],
    "name": "set_usage",
    "returns": "None"
   }
  ]
 },
 {
  "className": "timeit.Timer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Stmt",
      "arg": "stmt"
     },
     {
      "annotation": "_Stmt",
      "arg": "setup"
     },
     {
      "annotation": "_Timer",
      "arg": "timer"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "globals"
     }
    ],
    "className": "timeit.Timer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "file"
     }
    ],
    "className": "timeit.Timer",
    "kwonlyargs": [],
    "name": "print_exc",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "number"
     }
    ],
    "className": "timeit.Timer",
    "kwonlyargs": [],
    "name": "timeit",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "repeat"
     },
     {
      "annotation": "int",
      "arg": "number"
     }
    ],
    "className": "timeit.Timer",
    "kwonlyargs": [],
    "name": "repeat",
    "returns": "list[float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[int, float], Any] | None)",
      "arg": "callback"
     }
    ],
    "className": "timeit.Timer",
    "kwonlyargs": [],
    "name": "autorange",
    "returns": "tuple[int, float]"
   }
  ]
 },
 {
  "className": "configparser.Interpolation",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_parser",
      "arg": "parser"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "value"
     },
     {
      "annotation": "_section",
      "arg": "defaults"
     }
    ],
    "className": "configparser.Interpolation",
    "kwonlyargs": [],
    "name": "before_get",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_parser",
      "arg": "parser"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "value"
     }
    ],
    "className": "configparser.Interpolation",
    "kwonlyargs": [],
    "name": "before_set",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_parser",
      "arg": "parser"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "value"
     }
    ],
    "className": "configparser.Interpolation",
    "kwonlyargs": [],
    "name": "before_read",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_parser",
      "arg": "parser"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "value"
     }
    ],
    "className": "configparser.Interpolation",
    "kwonlyargs": [],
    "name": "before_write",
    "returns": "str"
   }
  ]
 },
 {
  "className": "configparser.BasicInterpolation",
  "fields": [],
  "methods": []
 },
 {
  "className": "configparser.ExtendedInterpolation",
  "fields": [],
  "methods": []
 },
 {
  "className": "configparser.LegacyInterpolation",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_parser",
      "arg": "parser"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "value"
     },
     {
      "annotation": "_section",
      "arg": "vars"
     }
    ],
    "className": "configparser.LegacyInterpolation",
    "kwonlyargs": [],
    "name": "before_get",
    "returns": "str"
   }
  ]
 },
 {
  "className": "configparser.RawConfigParser",
  "fields": [
   {
    "annotation": "ClassVar[str]",
    "className": "configparser.RawConfigParser",
    "name": "_SECT_TMPL"
   },
   {
    "annotation": "ClassVar[str]",
    "className": "configparser.RawConfigParser",
    "name": "_OPT_TMPL"
   },
   {
    "annotation": "ClassVar[str]",
    "className": "configparser.RawConfigParser",
    "name": "_OPT_NV_TMPL"
   },
   {
    "annotation": "Pattern[str]",
    "className": "configparser.RawConfigParser",
    "name": "SECTCRE"
   },
   {
    "annotation": "ClassVar[Pattern[str]]",
    "className": "configparser.RawConfigParser",
    "name": "OPTCRE"
   },
   {
    "annotation": "ClassVar[Pattern[str]]",
    "className": "configparser.RawConfigParser",
    "name": "OPTCRE_NV"
   },
   {
    "annotation": "ClassVar[Pattern[str]]",
    "className": "configparser.RawConfigParser",
    "name": "NONSPACECRE"
   },
   {
    "annotation": "ClassVar[Mapping[str, bool]]",
    "className": "configparser.RawConfigParser",
    "name": "BOOLEAN_STATES"
   },
   {
    "annotation": "str",
    "className": "configparser.RawConfigParser",
    "name": "default_section"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[str, str | None] | None)",
      "arg": "defaults"
     },
     {
      "annotation": "type[Mapping[str, str]]",
      "arg": "dict_type"
     },
     {
      "annotation": "Literal[True]",
      "arg": "allow_no_value"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "Sequence[str]",
      "arg": "delimiters"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "comment_prefixes"
     },
     {
      "annotation": "(Sequence[str] | None)",
      "arg": "inline_comment_prefixes"
     },
     {
      "annotation": "bool",
      "arg": "strict"
     },
     {
      "annotation": "bool",
      "arg": "empty_lines_in_values"
     },
     {
      "annotation": "str",
      "arg": "default_section"
     },
     {
      "annotation": "(Interpolation | None)",
      "arg": "interpolation"
     },
     {
      "annotation": "_converters",
      "arg": "converters"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_section | None)",
      "arg": "defaults"
     },
     {
      "annotation": "type[Mapping[str, str]]",
      "arg": "dict_type"
     },
     {
      "annotation": "bool",
      "arg": "allow_no_value"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "Sequence[str]",
      "arg": "delimiters"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "comment_prefixes"
     },
     {
      "annotation": "(Sequence[str] | None)",
      "arg": "inline_comment_prefixes"
     },
     {
      "annotation": "bool",
      "arg": "strict"
     },
     {
      "annotation": "bool",
      "arg": "empty_lines_in_values"
     },
     {
      "annotation": "str",
      "arg": "default_section"
     },
     {
      "annotation": "(Interpolation | None)",
      "arg": "interpolation"
     },
     {
      "annotation": "_converters",
      "arg": "converters"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "SectionProxy"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "_section",
      "arg": "value"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "key"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "defaults",
    "returns": "_section"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "sections",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "add_section",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "has_section",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "options",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "has_option",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_Path | Iterable[_Path])",
      "arg": "filenames"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "read",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "f"
     },
     {
      "annotation": "(str | None)",
      "arg": "source"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "read_file",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "string"
     },
     {
      "annotation": "str",
      "arg": "source"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "read_string",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[str, Mapping[str, Any]]",
      "arg": "dictionary"
     },
     {
      "annotation": "str",
      "arg": "source"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "read_dict",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "fp"
     },
     {
      "annotation": "(str | None)",
      "arg": "filename"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "readfp",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getint",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     },
     {
      "annotation": "_T",
      "arg": "fallback"
     }
    ],
    "name": "getint",
    "returns": "(int | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getfloat",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     },
     {
      "annotation": "_T",
      "arg": "fallback"
     }
    ],
    "name": "getfloat",
    "returns": "(float | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getboolean",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     },
     {
      "annotation": "_T",
      "arg": "fallback"
     }
    ],
    "name": "getboolean",
    "returns": "(bool | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "Callable[[str], _T]",
      "arg": "conv"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     },
     {
      "annotation": "_T",
      "arg": "fallback"
     }
    ],
    "name": "_get_conv",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "get",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     },
     {
      "annotation": "_T",
      "arg": "fallback"
     }
    ],
    "name": "get",
    "returns": "(str | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "items",
    "returns": "ItemsView[str, SectionProxy]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "items",
    "returns": "list[tuple[str, str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "(str | None)",
      "arg": "value"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsWrite[str]",
      "arg": "fp"
     },
     {
      "annotation": "bool",
      "arg": "space_around_delimiters"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "remove_option",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "remove_section",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "optionstr"
     }
    ],
    "className": "configparser.RawConfigParser",
    "kwonlyargs": [],
    "name": "optionxform",
    "returns": "str"
   }
  ]
 },
 {
  "className": "configparser.ConfigParser",
  "fields": [],
  "methods": []
 },
 {
  "className": "configparser.SafeConfigParser",
  "fields": [],
  "methods": []
 },
 {
  "className": "configparser.SectionProxy",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "RawConfigParser",
      "arg": "parser"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "str",
      "arg": "value"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "key"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "parser",
    "returns": "RawConfigParser"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "(str | None)",
      "arg": "fallback"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     },
     {
      "annotation": "(Any | None)",
      "arg": "_impl"
     }
    ],
    "name": "get",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getint",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "_T",
      "arg": "fallback"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getint",
    "returns": "(int | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getfloat",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "_T",
      "arg": "fallback"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getfloat",
    "returns": "(float | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getboolean",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "_T",
      "arg": "fallback"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "raw"
     },
     {
      "annotation": "(_section | None)",
      "arg": "vars"
     }
    ],
    "name": "getboolean",
    "returns": "(bool | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "configparser.SectionProxy",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Callable[..., Any]"
   }
  ]
 },
 {
  "className": "configparser.ConverterMapping",
  "fields": [
   {
    "annotation": "Pattern[Any]",
    "className": "configparser.ConverterMapping",
    "name": "GETTERCRE"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "RawConfigParser",
      "arg": "parser"
     }
    ],
    "className": "configparser.ConverterMapping",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "configparser.ConverterMapping",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_converter"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "(_converter | None)",
      "arg": "value"
     }
    ],
    "className": "configparser.ConverterMapping",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "configparser.ConverterMapping",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.ConverterMapping",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "configparser.ConverterMapping",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "configparser.Error",
  "fields": [
   {
    "annotation": "str",
    "className": "configparser.Error",
    "name": "message"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "configparser.Error",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.NoSectionError",
  "fields": [
   {
    "annotation": "str",
    "className": "configparser.NoSectionError",
    "name": "section"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     }
    ],
    "className": "configparser.NoSectionError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.DuplicateSectionError",
  "fields": [
   {
    "annotation": "str",
    "className": "configparser.DuplicateSectionError",
    "name": "section"
   },
   {
    "annotation": "(str | None)",
    "className": "configparser.DuplicateSectionError",
    "name": "source"
   },
   {
    "annotation": "(int | None)",
    "className": "configparser.DuplicateSectionError",
    "name": "lineno"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "(str | None)",
      "arg": "source"
     },
     {
      "annotation": "(int | None)",
      "arg": "lineno"
     }
    ],
    "className": "configparser.DuplicateSectionError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.DuplicateOptionError",
  "fields": [
   {
    "annotation": "str",
    "className": "configparser.DuplicateOptionError",
    "name": "section"
   },
   {
    "annotation": "str",
    "className": "configparser.DuplicateOptionError",
    "name": "option"
   },
   {
    "annotation": "(str | None)",
    "className": "configparser.DuplicateOptionError",
    "name": "source"
   },
   {
    "annotation": "(int | None)",
    "className": "configparser.DuplicateOptionError",
    "name": "lineno"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "(str | None)",
      "arg": "source"
     },
     {
      "annotation": "(int | None)",
      "arg": "lineno"
     }
    ],
    "className": "configparser.DuplicateOptionError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.NoOptionError",
  "fields": [
   {
    "annotation": "str",
    "className": "configparser.NoOptionError",
    "name": "section"
   },
   {
    "annotation": "str",
    "className": "configparser.NoOptionError",
    "name": "option"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "section"
     }
    ],
    "className": "configparser.NoOptionError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.InterpolationError",
  "fields": [
   {
    "annotation": "str",
    "className": "configparser.InterpolationError",
    "name": "section"
   },
   {
    "annotation": "str",
    "className": "configparser.InterpolationError",
    "name": "option"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "configparser.InterpolationError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.InterpolationDepthError",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "object",
      "arg": "rawval"
     }
    ],
    "className": "configparser.InterpolationDepthError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.InterpolationMissingOptionError",
  "fields": [
   {
    "annotation": "str",
    "className": "configparser.InterpolationMissingOptionError",
    "name": "reference"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     },
     {
      "annotation": "str",
      "arg": "section"
     },
     {
      "annotation": "object",
      "arg": "rawval"
     },
     {
      "annotation": "str",
      "arg": "reference"
     }
    ],
    "className": "configparser.InterpolationMissingOptionError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.InterpolationSyntaxError",
  "fields": [],
  "methods": []
 },
 {
  "className": "configparser.ParsingError",
  "fields": [
   {
    "annotation": "str",
    "className": "configparser.ParsingError",
    "name": "source"
   },
   {
    "annotation": "list[tuple[int, str]]",
    "className": "configparser.ParsingError",
    "name": "errors"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "source"
     },
     {
      "annotation": "(str | None)",
      "arg": "filename"
     }
    ],
    "className": "configparser.ParsingError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "configparser.ParsingError",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   }
  ]
 },
 {
  "className": "configparser.MissingSectionHeaderError",
  "fields": [
   {
    "annotation": "int",
    "className": "configparser.MissingSectionHeaderError",
    "name": "lineno"
   },
   {
    "annotation": "str",
    "className": "configparser.MissingSectionHeaderError",
    "name": "line"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "configparser.MissingSectionHeaderError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "os.stat_result",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_mode",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_ino",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_dev",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_nlink",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_uid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_gid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_size",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_atime",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_mtime",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_ctime",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_atime_ns",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_mtime_ns",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.stat_result",
    "kwonlyargs": [],
    "name": "st_ctime_ns",
    "returns": "int"
   }
  ]
 },
 {
  "className": "os.PathLike",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.PathLike",
    "kwonlyargs": [],
    "name": "__fspath__",
    "returns": "_AnyStr_co"
   }
  ]
 },
 {
  "className": "os.DirEntry",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.DirEntry",
    "kwonlyargs": [],
    "name": "name",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.DirEntry",
    "kwonlyargs": [],
    "name": "path",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.DirEntry",
    "kwonlyargs": [],
    "name": "inode",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.DirEntry",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "follow_symlinks"
     }
    ],
    "name": "is_dir",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.DirEntry",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "follow_symlinks"
     }
    ],
    "name": "is_file",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.DirEntry",
    "kwonlyargs": [],
    "name": "is_symlink",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.DirEntry",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "follow_symlinks"
     }
    ],
    "name": "stat",
    "returns": "stat_result"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.DirEntry",
    "kwonlyargs": [],
    "name": "__fspath__",
    "returns": "AnyStr"
   }
  ]
 },
 {
  "className": "os.statvfs_result",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_bsize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_frsize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_blocks",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_bfree",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_bavail",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_files",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_ffree",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_favail",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_flag",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.statvfs_result",
    "kwonlyargs": [],
    "name": "f_namemax",
    "returns": "int"
   }
  ]
 },
 {
  "className": "os.uname_result",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.uname_result",
    "kwonlyargs": [],
    "name": "sysname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.uname_result",
    "kwonlyargs": [],
    "name": "nodename",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.uname_result",
    "kwonlyargs": [],
    "name": "release",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.uname_result",
    "kwonlyargs": [],
    "name": "version",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.uname_result",
    "kwonlyargs": [],
    "name": "machine",
    "returns": "str"
   }
  ]
 },
 {
  "className": "os.terminal_size",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.terminal_size",
    "kwonlyargs": [],
    "name": "columns",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.terminal_size",
    "kwonlyargs": [],
    "name": "lines",
    "returns": "int"
   }
  ]
 },
 {
  "className": "os.times_result",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.times_result",
    "kwonlyargs": [],
    "name": "user",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.times_result",
    "kwonlyargs": [],
    "name": "system",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.times_result",
    "kwonlyargs": [],
    "name": "children_user",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.times_result",
    "kwonlyargs": [],
    "name": "children_system",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.times_result",
    "kwonlyargs": [],
    "name": "elapsed",
    "returns": "float"
   }
  ]
 },
 {
  "className": "os.waitid_result",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.waitid_result",
    "kwonlyargs": [],
    "name": "si_pid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.waitid_result",
    "kwonlyargs": [],
    "name": "si_uid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.waitid_result",
    "kwonlyargs": [],
    "name": "si_signo",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.waitid_result",
    "kwonlyargs": [],
    "name": "si_status",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.waitid_result",
    "kwonlyargs": [],
    "name": "si_code",
    "returns": "int"
   }
  ]
 },
 {
  "className": "os.sched_param",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "int",
      "arg": "sched_priority"
     }
    ],
    "className": "os.sched_param",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "os.sched_param",
    "kwonlyargs": [],
    "name": "sched_priority",
    "returns": "int"
   }
  ]
 },
 {
  "className": "tkinter.EventType",
  "fields": [
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Activate"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "ButtonPress"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "ButtonRelease"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Circulate"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "CirculateRequest"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "ClientMessage"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Colormap"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Configure"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "ConfigureRequest"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Create"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Deactivate"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Destroy"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Enter"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Expose"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "FocusIn"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "FocusOut"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "GraphicsExpose"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Gravity"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "KeyPress"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "KeyRelease"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Keymap"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Leave"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Map"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "MapRequest"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Mapping"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Motion"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "MouseWheel"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "NoExpose"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Property"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Reparent"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "ResizeRequest"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Selection"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "SelectionClear"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "SelectionRequest"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Unmap"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "VirtualEvent"
   },
   {
    "annotation": "str",
    "className": "tkinter.EventType",
    "name": "Visibility"
   }
  ],
  "methods": []
 },
 {
  "className": "tkinter.Event",
  "fields": [
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "serial"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "num"
   },
   {
    "annotation": "bool",
    "className": "tkinter.Event",
    "name": "focus"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "height"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "width"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "keycode"
   },
   {
    "annotation": "(int | str)",
    "className": "tkinter.Event",
    "name": "state"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "time"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "x"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "y"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "x_root"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "y_root"
   },
   {
    "annotation": "str",
    "className": "tkinter.Event",
    "name": "char"
   },
   {
    "annotation": "bool",
    "className": "tkinter.Event",
    "name": "send_event"
   },
   {
    "annotation": "str",
    "className": "tkinter.Event",
    "name": "keysym"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "keysym_num"
   },
   {
    "annotation": "EventType",
    "className": "tkinter.Event",
    "name": "type"
   },
   {
    "annotation": "_W_co",
    "className": "tkinter.Event",
    "name": "widget"
   },
   {
    "annotation": "int",
    "className": "tkinter.Event",
    "name": "delta"
   }
  ],
  "methods": []
 },
 {
  "className": "tkinter.Variable",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(Any | None)",
      "arg": "value"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "get",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TraceMode",
      "arg": "mode"
     },
     {
      "annotation": "Callable[[str, str, str], Any]",
      "arg": "callback"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "trace_add",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TraceMode",
      "arg": "mode"
     },
     {
      "annotation": "str",
      "arg": "cbname"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "trace_remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "trace_info",
    "returns": "list[tuple[tuple[_TraceMode, ...], str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "mode"
     },
     {
      "annotation": "",
      "arg": "callback"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "trace_variable",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "mode"
     },
     {
      "annotation": "",
      "arg": "cbname"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "trace_vdelete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "trace_vinfo",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "tkinter.Variable",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "tkinter.StringVar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(str | None)",
      "arg": "value"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "tkinter.StringVar",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "value"
     }
    ],
    "className": "tkinter.StringVar",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.StringVar",
    "kwonlyargs": [],
    "name": "get",
    "returns": "str"
   }
  ]
 },
 {
  "className": "tkinter.IntVar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(int | None)",
      "arg": "value"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "tkinter.IntVar",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "value"
     }
    ],
    "className": "tkinter.IntVar",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.IntVar",
    "kwonlyargs": [],
    "name": "get",
    "returns": "int"
   }
  ]
 },
 {
  "className": "tkinter.DoubleVar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(float | None)",
      "arg": "value"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "tkinter.DoubleVar",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "value"
     }
    ],
    "className": "tkinter.DoubleVar",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.DoubleVar",
    "kwonlyargs": [],
    "name": "get",
    "returns": "float"
   }
  ]
 },
 {
  "className": "tkinter.BooleanVar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(bool | None)",
      "arg": "value"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "tkinter.BooleanVar",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "value"
     }
    ],
    "className": "tkinter.BooleanVar",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.BooleanVar",
    "kwonlyargs": [],
    "name": "get",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "tkinter.Misc",
  "fields": [
   {
    "annotation": "(Misc | None)",
    "className": "tkinter.Misc",
    "name": "master"
   },
   {
    "annotation": "_tkinter.TkappType",
    "className": "tkinter.Misc",
    "name": "tk"
   },
   {
    "annotation": "dict[str, Widget]",
    "className": "tkinter.Misc",
    "name": "children"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "destroy",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "deletecommand",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "boolean"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "tk_strictMotif",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "tk_bisque",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "tk_setPalette",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | Variable)",
      "arg": "name"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "wait_variable",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "window"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "wait_window",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "window"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "wait_visibility",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "str",
      "arg": "value"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "setvar",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "getvar",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "s"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "getint",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "s"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "getdouble",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "s"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "getboolean",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "focus_set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "focus_force",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "focus_get",
    "returns": "(Misc | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "focus_displayof",
    "returns": "(Misc | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "focus_lastfor",
    "returns": "(Misc | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "tk_focusFollowsMouse",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "tk_focusNext",
    "returns": "(Misc | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "tk_focusPrev",
    "returns": "(Misc | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "ms"
     },
     {
      "annotation": "None",
      "arg": "func"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "after",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Literal['idle'])",
      "arg": "ms"
     },
     {
      "annotation": "Callable[..., Any]",
      "arg": "func"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "after",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., Any]",
      "arg": "func"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "after_idle",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "id"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "after_cancel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Literal[0] | Misc | None)",
      "arg": "displayof"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bell",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "Misc",
      "arg": "displayof"
     },
     {
      "annotation": "str",
      "arg": "type"
     }
    ],
    "name": "clipboard_get",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "Misc",
      "arg": "displayof"
     }
    ],
    "name": "clipboard_clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "string"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "Misc",
      "arg": "displayof"
     },
     {
      "annotation": "str",
      "arg": "format"
     },
     {
      "annotation": "str",
      "arg": "type"
     }
    ],
    "name": "clipboard_append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grab_current",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grab_release",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grab_set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grab_set_global",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grab_status",
    "returns": "(Literal['local', 'global'] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "pattern"
     },
     {
      "annotation": "",
      "arg": "value"
     },
     {
      "annotation": "(int | Literal['widgetDefault', 'startupFile', 'userDefault', 'interactive'\n    ] | None)",
      "arg": "priority"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "option_add",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "option_clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "name"
     },
     {
      "annotation": "",
      "arg": "className"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "option_get",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "fileName"
     },
     {
      "annotation": "(Any | None)",
      "arg": "priority"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "option_readfile",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "selection_clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "selection_get",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "command"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "selection_handle",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "selection_own",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "selection_own_get",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "interp"
     },
     {
      "annotation": "",
      "arg": "cmd"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "send",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "belowThis"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "lower",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "aboveThis"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "tkraise",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(Literal[0] | Misc | None)",
      "arg": "displayof"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_atom",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "id"
     },
     {
      "annotation": "(Literal[0] | Misc | None)",
      "arg": "displayof"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_atomname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_cells",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_children",
    "returns": "list[Widget]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_class",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_colormapfull",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "rootX"
     },
     {
      "annotation": "int",
      "arg": "rootY"
     },
     {
      "annotation": "(Literal[0] | Misc | None)",
      "arg": "displayof"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_containing",
    "returns": "(Misc | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_depth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_exists",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "number"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_fpixels",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_geometry",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_height",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_id",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Literal[0] | Misc | None)",
      "arg": "displayof"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_interps",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_ismapped",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_manager",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_parent",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "id"
     },
     {
      "annotation": "(Literal[0] | Misc | None)",
      "arg": "displayof"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_pathname",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "number"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_pixels",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_pointerx",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_pointerxy",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_pointery",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_reqheight",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_reqwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Color",
      "arg": "color"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_rgb",
    "returns": "tuple[int, int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_rootx",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_rooty",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_screen",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_screencells",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_screendepth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_screenheight",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_screenmmheight",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_screenmmwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_screenvisual",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_screenwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_server",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_toplevel",
    "returns": "(Tk | Toplevel)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_viewable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_visual",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_visualid",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "includeids"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_visualsavailable",
    "returns": "list[tuple[str, int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_vrootheight",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_vrootwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_vrootx",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_vrooty",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_width",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_x",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "winfo_y",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "update_idletasks",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "tagList"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bindtags",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(list[str] | tuple[str, ...])",
      "arg": "tagList"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bindtags",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "(Callable[[Event[Misc]], Any] | None)",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bind",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "name": "bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "(Callable[[Event[Misc]], Any] | None)",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bind_all",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bind_all",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "name": "bind_all",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "className"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "(Callable[[Event[Misc]], Any] | None)",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bind_class",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "className"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "bind_class",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "className"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "name": "bind_class",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sequence"
     },
     {
      "annotation": "(str | None)",
      "arg": "funcid"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "unbind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sequence"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "unbind_all",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "className"
     },
     {
      "annotation": "str",
      "arg": "sequence"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "unbind_class",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "mainloop",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "quit",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | Misc | _tkinter.Tcl_Obj)",
      "arg": "name"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "nametowidget",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., Any]",
      "arg": "func"
     },
     {
      "annotation": "(Callable[..., Sequence[Any]] | None)",
      "arg": "subst"
     },
     {
      "annotation": "int",
      "arg": "needcleanup"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "register",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "flag"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "pack_propagate",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "pack_propagate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_Anchor | None)",
      "arg": "anchor"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_anchor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "column"
     },
     {
      "annotation": "None",
      "arg": "row"
     },
     {
      "annotation": "None",
      "arg": "col2"
     },
     {
      "annotation": "None",
      "arg": "row2"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_bbox",
    "returns": "(tuple[int, int, int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "column"
     },
     {
      "annotation": "int",
      "arg": "row"
     },
     {
      "annotation": "None",
      "arg": "col2"
     },
     {
      "annotation": "None",
      "arg": "row2"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_bbox",
    "returns": "(tuple[int, int, int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "column"
     },
     {
      "annotation": "int",
      "arg": "row"
     },
     {
      "annotation": "int",
      "arg": "col2"
     },
     {
      "annotation": "int",
      "arg": "row2"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_bbox",
    "returns": "(tuple[int, int, int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_GridIndex",
      "arg": "index"
     },
     {
      "annotation": "_GridIndexInfo",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "_ScreenUnits",
      "arg": "minsize"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pad"
     },
     {
      "annotation": "str",
      "arg": "uniform"
     },
     {
      "annotation": "int",
      "arg": "weight"
     }
    ],
    "name": "grid_columnconfigure",
    "returns": "(_GridIndexInfo | Any)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_GridIndex",
      "arg": "index"
     },
     {
      "annotation": "_GridIndexInfo",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "_ScreenUnits",
      "arg": "minsize"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pad"
     },
     {
      "annotation": "str",
      "arg": "uniform"
     },
     {
      "annotation": "int",
      "arg": "weight"
     }
    ],
    "name": "grid_rowconfigure",
    "returns": "(_GridIndexInfo | Any)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_location",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "flag"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_propagate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_propagate",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_size",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "pack_slaves",
    "returns": "list[Widget]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "row"
     },
     {
      "annotation": "(int | None)",
      "arg": "column"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "grid_slaves",
    "returns": "list[Widget]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "place_slaves",
    "returns": "list[Widget]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "virtual"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "event_add",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "virtual"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "event_delete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sequence"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [
     {
      "annotation": "(Misc | int)",
      "arg": "above"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "int",
      "arg": "button"
     },
     {
      "annotation": "int",
      "arg": "count"
     },
     {
      "annotation": "Any",
      "arg": "data"
     },
     {
      "annotation": "int",
      "arg": "delta"
     },
     {
      "annotation": "str",
      "arg": "detail"
     },
     {
      "annotation": "bool",
      "arg": "focus"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "int",
      "arg": "keycode"
     },
     {
      "annotation": "str",
      "arg": "keysym"
     },
     {
      "annotation": "str",
      "arg": "mode"
     },
     {
      "annotation": "bool",
      "arg": "override"
     },
     {
      "annotation": "Literal['PlaceOnTop', 'PlaceOnBottom']",
      "arg": "place"
     },
     {
      "annotation": "(Misc | int)",
      "arg": "root"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "rootx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "rooty"
     },
     {
      "annotation": "bool",
      "arg": "sendevent"
     },
     {
      "annotation": "int",
      "arg": "serial"
     },
     {
      "annotation": "(int | str)",
      "arg": "state"
     },
     {
      "annotation": "(Misc | int)",
      "arg": "subwindow"
     },
     {
      "annotation": "int",
      "arg": "time"
     },
     {
      "annotation": "bool",
      "arg": "warp"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "Literal['now', 'tail', 'head', 'mark']",
      "arg": "when"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y"
     }
    ],
    "name": "event_generate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "virtual"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "event_info",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "image_names",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "image_types",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "cget",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Misc",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "tkinter.CallWrapper",
  "fields": [
   {
    "annotation": "Any",
    "className": "tkinter.CallWrapper",
    "name": "func"
   },
   {
    "annotation": "Any",
    "className": "tkinter.CallWrapper",
    "name": "subst"
   },
   {
    "annotation": "Any",
    "className": "tkinter.CallWrapper",
    "name": "widget"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "func"
     },
     {
      "annotation": "",
      "arg": "subst"
     },
     {
      "annotation": "",
      "arg": "widget"
     }
    ],
    "className": "tkinter.CallWrapper",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.CallWrapper",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": ""
   }
  ]
 },
 {
  "className": "tkinter.XView",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.XView",
    "kwonlyargs": [],
    "name": "xview",
    "returns": "tuple[float, float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.XView",
    "kwonlyargs": [],
    "name": "xview",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "fraction"
     }
    ],
    "className": "tkinter.XView",
    "kwonlyargs": [],
    "name": "xview_moveto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "number"
     },
     {
      "annotation": "Literal['units', 'pages']",
      "arg": "what"
     }
    ],
    "className": "tkinter.XView",
    "kwonlyargs": [],
    "name": "xview_scroll",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "number"
     },
     {
      "annotation": "Literal['pixels']",
      "arg": "what"
     }
    ],
    "className": "tkinter.XView",
    "kwonlyargs": [],
    "name": "xview_scroll",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.YView",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.YView",
    "kwonlyargs": [],
    "name": "yview",
    "returns": "tuple[float, float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.YView",
    "kwonlyargs": [],
    "name": "yview",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "fraction"
     }
    ],
    "className": "tkinter.YView",
    "kwonlyargs": [],
    "name": "yview_moveto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "number"
     },
     {
      "annotation": "Literal['units', 'pages']",
      "arg": "what"
     }
    ],
    "className": "tkinter.YView",
    "kwonlyargs": [],
    "name": "yview_scroll",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "number"
     },
     {
      "annotation": "Literal['pixels']",
      "arg": "what"
     }
    ],
    "className": "tkinter.YView",
    "kwonlyargs": [],
    "name": "yview_scroll",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Wm",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "minNumer"
     },
     {
      "annotation": "int",
      "arg": "minDenom"
     },
     {
      "annotation": "int",
      "arg": "maxNumer"
     },
     {
      "annotation": "int",
      "arg": "maxDenom"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_aspect",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "minNumer"
     },
     {
      "annotation": "None",
      "arg": "minDenom"
     },
     {
      "annotation": "None",
      "arg": "maxNumer"
     },
     {
      "annotation": "None",
      "arg": "maxDenom"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_aspect",
    "returns": "(tuple[int, int, int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_attributes",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__option"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_attributes",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__option"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_attributes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_client",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_colormapwindows",
    "returns": "list[Misc]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(list[Misc] | tuple[Misc, ...])",
      "arg": "__wlist"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_colormapwindows",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Misc",
      "arg": "__first_wlist_item"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_colormapwindows",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "value"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_command",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_deiconify",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Literal['active', 'passive'] | None)",
      "arg": "model"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_focusmodel",
    "returns": "Literal['active', 'passive', '']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Wm",
      "arg": "window"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_forget",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_frame",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "newGeometry"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_geometry",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newGeometry"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_geometry",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "baseWidth"
     },
     {
      "annotation": "(Any | None)",
      "arg": "baseHeight"
     },
     {
      "annotation": "(Any | None)",
      "arg": "widthInc"
     },
     {
      "annotation": "(Any | None)",
      "arg": "heightInc"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_grid",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "pathName"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_group",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "bitmap"
     },
     {
      "annotation": "(Any | None)",
      "arg": "default"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_iconbitmap",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_iconify",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "bitmap"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_iconmask",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "newName"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_iconname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "default"
     },
     {
      "annotation": "Image",
      "arg": "__image1"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_iconphoto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "x"
     },
     {
      "annotation": "(int | None)",
      "arg": "y"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_iconposition",
    "returns": "(tuple[int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "pathName"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_iconwindow",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "widget"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_manage",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "width"
     },
     {
      "annotation": "None",
      "arg": "height"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_maxsize",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "int",
      "arg": "height"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_maxsize",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "width"
     },
     {
      "annotation": "None",
      "arg": "height"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_minsize",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "int",
      "arg": "height"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_minsize",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "boolean"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_overrideredirect",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "boolean"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_overrideredirect",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Literal['program', 'user'] | None)",
      "arg": "who"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_positionfrom",
    "returns": "Literal['', 'program', 'user']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "func"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_protocol",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "None",
      "arg": "func"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_protocol",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "name"
     },
     {
      "annotation": "None",
      "arg": "func"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_protocol",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "width"
     },
     {
      "annotation": "None",
      "arg": "height"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_resizable",
    "returns": "tuple[bool, bool]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "width"
     },
     {
      "annotation": "bool",
      "arg": "height"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_resizable",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Literal['program', 'user'] | None)",
      "arg": "who"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_sizefrom",
    "returns": "Literal['', 'program', 'user']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "newstate"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_state",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newstate"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_state",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "string"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_title",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "string"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_title",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "master"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_transient",
    "returns": "_tkinter.Tcl_Obj"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Wm | _tkinter.Tcl_Obj)",
      "arg": "master"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_transient",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Wm",
    "kwonlyargs": [],
    "name": "wm_withdraw",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Tk",
  "fields": [
   {
    "annotation": "None",
    "className": "tkinter.Tk",
    "name": "master"
   },
   {
    "annotation": "_ExceptionReportingCallback",
    "className": "tkinter.Tk",
    "name": "report_callback_exception"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "screenName"
     },
     {
      "annotation": "(str | None)",
      "arg": "baseName"
     },
     {
      "annotation": "str",
      "arg": "className"
     },
     {
      "annotation": "bool",
      "arg": "useTk"
     },
     {
      "annotation": "bool",
      "arg": "sync"
     },
     {
      "annotation": "(str | None)",
      "arg": "use"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Menu",
      "arg": "menu"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "destroy",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "baseName"
     },
     {
      "annotation": "str",
      "arg": "className"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "readprofile",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__msg"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "adderrorinfo",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__command"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "call",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__name"
     },
     {
      "annotation": "",
      "arg": "__func"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "createcommand",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__milliseconds"
     },
     {
      "annotation": "",
      "arg": "__func"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "createtimerhandler",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__flags"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "dooneevent",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__script"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "eval",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__fileName"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "evalfile",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__s"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "exprboolean",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__s"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "exprdouble",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__s"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "exprlong",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__s"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "exprstring",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "globalgetvar",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "globalsetvar",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "globalunsetvar",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "interpaddr",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "loadtk",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__script"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "record",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "__arg"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "splitlist",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "unsetvar",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "wantobjects",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Tk",
    "kwonlyargs": [],
    "name": "willdispatch",
    "returns": ""
   }
  ]
 },
 {
  "className": "tkinter.Pack",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Pack",
    "kwonlyargs": [
     {
      "annotation": "Misc",
      "arg": "after"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "Misc",
      "arg": "before"
     },
     {
      "annotation": "int",
      "arg": "expand"
     },
     {
      "annotation": "Literal['none', 'x', 'y', 'both']",
      "arg": "fill"
     },
     {
      "annotation": "Literal['left', 'right', 'top', 'bottom']",
      "arg": "side"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "ipadx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "ipady"
     },
     {
      "annotation": "(_ScreenUnits | tuple[_ScreenUnits, _ScreenUnits])",
      "arg": "padx"
     },
     {
      "annotation": "(_ScreenUnits | tuple[_ScreenUnits, _ScreenUnits])",
      "arg": "pady"
     },
     {
      "annotation": "Misc",
      "arg": "in_"
     }
    ],
    "name": "pack_configure",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Pack",
    "kwonlyargs": [],
    "name": "pack_forget",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Pack",
    "kwonlyargs": [],
    "name": "pack_info",
    "returns": "_PackInfo"
   }
  ]
 },
 {
  "className": "tkinter.Place",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Place",
    "kwonlyargs": [
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "Literal['inside', 'outside', 'ignore']",
      "arg": "bordermode"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y"
     },
     {
      "annotation": "(str | float)",
      "arg": "relheight"
     },
     {
      "annotation": "(str | float)",
      "arg": "relwidth"
     },
     {
      "annotation": "(str | float)",
      "arg": "relx"
     },
     {
      "annotation": "(str | float)",
      "arg": "rely"
     },
     {
      "annotation": "Misc",
      "arg": "in_"
     }
    ],
    "name": "place_configure",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Place",
    "kwonlyargs": [],
    "name": "place_forget",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Place",
    "kwonlyargs": [],
    "name": "place_info",
    "returns": "_PlaceInfo"
   }
  ]
 },
 {
  "className": "tkinter.Grid",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Grid",
    "kwonlyargs": [
     {
      "annotation": "int",
      "arg": "column"
     },
     {
      "annotation": "int",
      "arg": "columnspan"
     },
     {
      "annotation": "int",
      "arg": "row"
     },
     {
      "annotation": "int",
      "arg": "rowspan"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "ipadx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "ipady"
     },
     {
      "annotation": "(_ScreenUnits | tuple[_ScreenUnits, _ScreenUnits])",
      "arg": "padx"
     },
     {
      "annotation": "(_ScreenUnits | tuple[_ScreenUnits, _ScreenUnits])",
      "arg": "pady"
     },
     {
      "annotation": "str",
      "arg": "sticky"
     },
     {
      "annotation": "Misc",
      "arg": "in_"
     }
    ],
    "name": "grid_configure",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Grid",
    "kwonlyargs": [],
    "name": "grid_forget",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Grid",
    "kwonlyargs": [],
    "name": "grid_remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Grid",
    "kwonlyargs": [],
    "name": "grid_info",
    "returns": "_GridInfo"
   }
  ]
 },
 {
  "className": "tkinter.BaseWidget",
  "fields": [
   {
    "annotation": "Misc",
    "className": "tkinter.BaseWidget",
    "name": "master"
   },
   {
    "annotation": "Any",
    "className": "tkinter.BaseWidget",
    "name": "widgetName"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "master"
     },
     {
      "annotation": "",
      "arg": "widgetName"
     },
     {
      "annotation": "",
      "arg": "cnf"
     },
     {
      "annotation": "",
      "arg": "kw"
     },
     {
      "annotation": "",
      "arg": "extra"
     }
    ],
    "className": "tkinter.BaseWidget",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.BaseWidget",
    "kwonlyargs": [],
    "name": "destroy",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Widget",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "_W",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "(Callable[[Event[_W]], Any] | None)",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Widget",
    "kwonlyargs": [],
    "name": "bind",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Widget",
    "kwonlyargs": [],
    "name": "bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Widget",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "name": "bind",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Toplevel",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Toplevel",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "str",
      "arg": "class_"
     },
     {
      "annotation": "(Literal['new', ''] | Misc)",
      "arg": "colormap"
     },
     {
      "annotation": "bool",
      "arg": "container"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Menu",
      "arg": "menu"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "str",
      "arg": "screen"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "int",
      "arg": "use"
     },
     {
      "annotation": "(str | tuple[str, int])",
      "arg": "visual"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Toplevel",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Menu",
      "arg": "menu"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Toplevel",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   }
  ]
 },
 {
  "className": "tkinter.Button",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Button",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_ButtonCommand",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "default"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_Relief",
      "arg": "overrelief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "int",
      "arg": "repeatdelay"
     },
     {
      "annotation": "int",
      "arg": "repeatinterval"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Button",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_ButtonCommand",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "default"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_Relief",
      "arg": "overrelief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "int",
      "arg": "repeatdelay"
     },
     {
      "annotation": "int",
      "arg": "repeatinterval"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Button",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Button",
    "kwonlyargs": [],
    "name": "flash",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Button",
    "kwonlyargs": [],
    "name": "invoke",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "tkinter.Canvas",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "float",
      "arg": "closeenough"
     },
     {
      "annotation": "bool",
      "arg": "confine"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_Color",
      "arg": "insertbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertborderwidth"
     },
     {
      "annotation": "int",
      "arg": "insertofftime"
     },
     {
      "annotation": "int",
      "arg": "insertontime"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertwidth"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "Any",
      "arg": "offset"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "(tuple[_ScreenUnits, _ScreenUnits, _ScreenUnits, _ScreenUnits] | tuple[()])",
      "arg": "scrollregion"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "Literal['normal', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "xscrollincrement"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "yscrollcommand"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "yscrollincrement"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "float",
      "arg": "closeenough"
     },
     {
      "annotation": "bool",
      "arg": "confine"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_Color",
      "arg": "insertbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertborderwidth"
     },
     {
      "annotation": "int",
      "arg": "insertofftime"
     },
     {
      "annotation": "int",
      "arg": "insertontime"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertwidth"
     },
     {
      "annotation": "Any",
      "arg": "offset"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "(tuple[_ScreenUnits, _ScreenUnits, _ScreenUnits, _ScreenUnits] | tuple[()])",
      "arg": "scrollregion"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "Literal['normal', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "xscrollincrement"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "yscrollcommand"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "yscrollincrement"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "addtag",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newtag"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "addtag_above",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newtag"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "addtag_all",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newtag"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "addtag_below",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newtag"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y"
     },
     {
      "annotation": "(_ScreenUnits | None)",
      "arg": "halo"
     },
     {
      "annotation": "(str | _CanvasItemId | None)",
      "arg": "start"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "addtag_closest",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newtag"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x2"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y2"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "addtag_enclosed",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newtag"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x2"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y2"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "addtag_overlapping",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "newtag"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "addtag_withtag",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "find",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "find_above",
    "returns": "tuple[_CanvasItemId, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "find_all",
    "returns": "tuple[_CanvasItemId, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "find_below",
    "returns": "tuple[_CanvasItemId, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y"
     },
     {
      "annotation": "(_ScreenUnits | None)",
      "arg": "halo"
     },
     {
      "annotation": "(str | _CanvasItemId | None)",
      "arg": "start"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "find_closest",
    "returns": "tuple[_CanvasItemId, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x2"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y2"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "find_enclosed",
    "returns": "tuple[_CanvasItemId, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "y1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "x2"
     },
     {
      "annotation": "float",
      "arg": "y2"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "find_overlapping",
    "returns": "tuple[_CanvasItemId, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "find_withtag",
    "returns": "tuple[_CanvasItemId, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "bbox",
    "returns": "tuple[int, int, int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "(Callable[[Event[Canvas]], Any] | None)",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "tag_bind",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | int)",
      "arg": "tagOrId"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "tag_bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "name": "tag_bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     },
     {
      "annotation": "str",
      "arg": "sequence"
     },
     {
      "annotation": "(str | None)",
      "arg": "funcid"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "tag_unbind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "screenx"
     },
     {
      "annotation": "(Any | None)",
      "arg": "gridspacing"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "canvasx",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "screeny"
     },
     {
      "annotation": "(Any | None)",
      "arg": "gridspacing"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "canvasy",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "coords",
    "returns": "list[float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__tagOrId"
     },
     {
      "annotation": "(list[int] | list[float] | tuple[float, ...])",
      "arg": "__args"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "coords",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__tagOrId"
     },
     {
      "annotation": "float",
      "arg": "__x1"
     },
     {
      "annotation": "float",
      "arg": "__y1"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "coords",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "create_arc",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "create_bitmap",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "create_image",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x0"
     },
     {
      "annotation": "float",
      "arg": "__y0"
     },
     {
      "annotation": "float",
      "arg": "__x1"
     },
     {
      "annotation": "float",
      "arg": "__y1"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "activedash"
     },
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activewidth"
     },
     {
      "annotation": "Literal['first', 'last', 'both']",
      "arg": "arrow"
     },
     {
      "annotation": "tuple[float, float, float]",
      "arg": "arrowshape"
     },
     {
      "annotation": "Literal['round', 'projecting', 'butt']",
      "arg": "capstyle"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "dash"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "dashoffset"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "disableddash"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "disabledwidth"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "Literal['round', 'bevel', 'miter']",
      "arg": "joinstyle"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "bool",
      "arg": "smooth"
     },
     {
      "annotation": "float",
      "arg": "splinesteps"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_line",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(tuple[float, float, float, float] | list[int] | list[float])",
      "arg": "__coords"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "activedash"
     },
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activewidth"
     },
     {
      "annotation": "Literal['first', 'last', 'both']",
      "arg": "arrow"
     },
     {
      "annotation": "tuple[float, float, float]",
      "arg": "arrowshape"
     },
     {
      "annotation": "Literal['round', 'projecting', 'butt']",
      "arg": "capstyle"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "dash"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "dashoffset"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "disableddash"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "disabledwidth"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "Literal['round', 'bevel', 'miter']",
      "arg": "joinstyle"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "bool",
      "arg": "smooth"
     },
     {
      "annotation": "float",
      "arg": "splinesteps"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_line",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x0"
     },
     {
      "annotation": "float",
      "arg": "__y0"
     },
     {
      "annotation": "float",
      "arg": "__x1"
     },
     {
      "annotation": "float",
      "arg": "__y1"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "activedash"
     },
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutline"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutlinestipple"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activewidth"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "dash"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "dashoffset"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "disableddash"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutline"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutlinestipple"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "disabledwidth"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "_Color",
      "arg": "outline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "outlineoffset"
     },
     {
      "annotation": "_Bitmap",
      "arg": "outlinestipple"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_oval",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(tuple[float, float, float, float] | list[int] | list[float])",
      "arg": "__coords"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "activedash"
     },
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutline"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutlinestipple"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activewidth"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "dash"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "dashoffset"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "disableddash"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutline"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutlinestipple"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "disabledwidth"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "_Color",
      "arg": "outline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "outlineoffset"
     },
     {
      "annotation": "_Bitmap",
      "arg": "outlinestipple"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_oval",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x0"
     },
     {
      "annotation": "float",
      "arg": "__y0"
     },
     {
      "annotation": "float",
      "arg": "__x1"
     },
     {
      "annotation": "float",
      "arg": "__y1"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "activedash"
     },
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutline"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutlinestipple"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activewidth"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "dash"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "dashoffset"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "disableddash"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutline"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutlinestipple"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "disabledwidth"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "Literal['round', 'bevel', 'miter']",
      "arg": "joinstyle"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "_Color",
      "arg": "outline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "outlineoffset"
     },
     {
      "annotation": "_Bitmap",
      "arg": "outlinestipple"
     },
     {
      "annotation": "bool",
      "arg": "smooth"
     },
     {
      "annotation": "float",
      "arg": "splinesteps"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_polygon",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(tuple[float, ...] | list[int] | list[float])",
      "arg": "__coords"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "activedash"
     },
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutline"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutlinestipple"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activewidth"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "dash"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "dashoffset"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "disableddash"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutline"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutlinestipple"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "disabledwidth"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "Literal['round', 'bevel', 'miter']",
      "arg": "joinstyle"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "_Color",
      "arg": "outline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "outlineoffset"
     },
     {
      "annotation": "_Bitmap",
      "arg": "outlinestipple"
     },
     {
      "annotation": "bool",
      "arg": "smooth"
     },
     {
      "annotation": "float",
      "arg": "splinesteps"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_polygon",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x0"
     },
     {
      "annotation": "float",
      "arg": "__y0"
     },
     {
      "annotation": "float",
      "arg": "__x1"
     },
     {
      "annotation": "float",
      "arg": "__y1"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "activedash"
     },
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutline"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutlinestipple"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activewidth"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "dash"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "dashoffset"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "disableddash"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutline"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutlinestipple"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "disabledwidth"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "_Color",
      "arg": "outline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "outlineoffset"
     },
     {
      "annotation": "_Bitmap",
      "arg": "outlinestipple"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_rectangle",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(tuple[float, float, float, float] | list[int] | list[float])",
      "arg": "__coords"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "activedash"
     },
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutline"
     },
     {
      "annotation": "_Color",
      "arg": "activeoutlinestipple"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activewidth"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "dash"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "dashoffset"
     },
     {
      "annotation": "(str | list[int] | tuple[int, ...])",
      "arg": "disableddash"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutline"
     },
     {
      "annotation": "_Color",
      "arg": "disabledoutlinestipple"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "disabledwidth"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "_Color",
      "arg": "outline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "outlineoffset"
     },
     {
      "annotation": "_Bitmap",
      "arg": "outlinestipple"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_rectangle",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     },
     {
      "annotation": "float",
      "arg": "__y"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_text",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(tuple[float, float] | list[int] | list[float])",
      "arg": "__coords"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activefill"
     },
     {
      "annotation": "str",
      "arg": "activestipple"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledfill"
     },
     {
      "annotation": "_Bitmap",
      "arg": "disabledstipple"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_Bitmap",
      "arg": "stipple"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "create_text",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__x"
     },
     {
      "annotation": "float",
      "arg": "__y"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "Widget",
      "arg": "window"
     }
    ],
    "name": "create_window",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(tuple[float, float] | list[int] | list[float])",
      "arg": "__coords"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "(str | list[str] | tuple[str, ...])",
      "arg": "tags"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "Widget",
      "arg": "window"
     }
    ],
    "name": "create_window",
    "returns": "_CanvasItemId"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "dchars",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "delete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__tag"
     },
     {
      "annotation": "(str | None)",
      "arg": "__tag_to_delete"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "dtag",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_CanvasItemId",
      "arg": "__id"
     },
     {
      "annotation": "str",
      "arg": "__tag_to_delete"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "dtag",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "focus",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "gettags",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "icursor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "index",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "tagOrId"
     },
     {
      "annotation": "",
      "arg": "option"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "itemcget",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "tagOrId"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "itemconfigure",
    "returns": "(dict[str, tuple[str, str, str, str, str]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "move",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "postscript",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__first"
     },
     {
      "annotation": "(str | _CanvasItemId | None)",
      "arg": "__second"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "tag_lower",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__first"
     },
     {
      "annotation": "(str | _CanvasItemId | None)",
      "arg": "__second"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "lower",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__first"
     },
     {
      "annotation": "(str | _CanvasItemId | None)",
      "arg": "__second"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "tag_raise",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__first"
     },
     {
      "annotation": "(str | _CanvasItemId | None)",
      "arg": "__second"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "tkraise",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | _CanvasItemId)",
      "arg": "__first"
     },
     {
      "annotation": "(str | _CanvasItemId | None)",
      "arg": "__second"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "lift",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "scale",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     },
     {
      "annotation": "",
      "arg": "y"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "scan_mark",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     },
     {
      "annotation": "",
      "arg": "y"
     },
     {
      "annotation": "int",
      "arg": "gain"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "scan_dragto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "tagOrId"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "select_adjust",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "select_clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "tagOrId"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "select_from",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "select_item",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "tagOrId"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "select_to",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "tagOrId"
     }
    ],
    "className": "tkinter.Canvas",
    "kwonlyargs": [],
    "name": "type",
    "returns": ""
   }
  ]
 },
 {
  "className": "tkinter.Checkbutton",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Checkbutton",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_ButtonCommand",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_Relief",
      "arg": "offrelief"
     },
     {
      "annotation": "Any",
      "arg": "offvalue"
     },
     {
      "annotation": "Any",
      "arg": "onvalue"
     },
     {
      "annotation": "_Relief",
      "arg": "overrelief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "selectimage"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "tristateimage"
     },
     {
      "annotation": "Any",
      "arg": "tristatevalue"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "(Variable | Literal[''])",
      "arg": "variable"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Checkbutton",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_ButtonCommand",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_Relief",
      "arg": "offrelief"
     },
     {
      "annotation": "Any",
      "arg": "offvalue"
     },
     {
      "annotation": "Any",
      "arg": "onvalue"
     },
     {
      "annotation": "_Relief",
      "arg": "overrelief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "selectimage"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "tristateimage"
     },
     {
      "annotation": "Any",
      "arg": "tristatevalue"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "(Variable | Literal[''])",
      "arg": "variable"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Checkbutton",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Checkbutton",
    "kwonlyargs": [],
    "name": "deselect",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Checkbutton",
    "kwonlyargs": [],
    "name": "flash",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Checkbutton",
    "kwonlyargs": [],
    "name": "invoke",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Checkbutton",
    "kwonlyargs": [],
    "name": "select",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Checkbutton",
    "kwonlyargs": [],
    "name": "toggle",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Entry",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledbackground"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "bool",
      "arg": "exportselection"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_Color",
      "arg": "insertbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertborderwidth"
     },
     {
      "annotation": "int",
      "arg": "insertofftime"
     },
     {
      "annotation": "int",
      "arg": "insertontime"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertwidth"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "invalidcommand"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "invcmd"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_Color",
      "arg": "readonlybackground"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "str",
      "arg": "show"
     },
     {
      "annotation": "Literal['normal', 'disabled', 'readonly']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "Literal['none', 'focus', 'focusin', 'focusout', 'key', 'all']",
      "arg": "validate"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "validatecommand"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "vcmd"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledbackground"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "bool",
      "arg": "exportselection"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_Color",
      "arg": "insertbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertborderwidth"
     },
     {
      "annotation": "int",
      "arg": "insertofftime"
     },
     {
      "annotation": "int",
      "arg": "insertontime"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertwidth"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "invalidcommand"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "invcmd"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_Color",
      "arg": "readonlybackground"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "str",
      "arg": "show"
     },
     {
      "annotation": "Literal['normal', 'disabled', 'readonly']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "Literal['none', 'focus', 'focusin', 'focusout', 'key', 'all']",
      "arg": "validate"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "validatecommand"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "vcmd"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "first"
     },
     {
      "annotation": "(_EntryIndex | None)",
      "arg": "last"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "delete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "get",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "icursor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "index"
     },
     {
      "annotation": "str",
      "arg": "string"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "scan_mark",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "scan_dragto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "selection_adjust",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "selection_clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "selection_from",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "selection_present",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "start"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "end"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "selection_range",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Entry",
    "kwonlyargs": [],
    "name": "selection_to",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Frame",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Frame",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "str",
      "arg": "class_"
     },
     {
      "annotation": "(Literal['new', ''] | Misc)",
      "arg": "colormap"
     },
     {
      "annotation": "bool",
      "arg": "container"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(str | tuple[str, int])",
      "arg": "visual"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Frame",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Frame",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   }
  ]
 },
 {
  "className": "tkinter.Label",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Label",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Label",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Label",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   }
  ]
 },
 {
  "className": "tkinter.Listbox",
  "fields": [
   {
    "annotation": "Any",
    "className": "tkinter.Listbox",
    "name": "select_anchor"
   },
   {
    "annotation": "Any",
    "className": "tkinter.Listbox",
    "name": "select_clear"
   },
   {
    "annotation": "Any",
    "className": "tkinter.Listbox",
    "name": "select_includes"
   },
   {
    "annotation": "Any",
    "className": "tkinter.Listbox",
    "name": "select_set"
   },
   {
    "annotation": "Any",
    "className": "tkinter.Listbox",
    "name": "itemconfig"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [
     {
      "annotation": "Literal['dotbox', 'none', 'underline']",
      "arg": "activestyle"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "int",
      "arg": "exportselection"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "int",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "Variable",
      "arg": "listvariable"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "str",
      "arg": "selectmode"
     },
     {
      "annotation": "bool",
      "arg": "setgrid"
     },
     {
      "annotation": "Literal['normal', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "yscrollcommand"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [
     {
      "annotation": "Literal['dotbox', 'none', 'underline']",
      "arg": "activestyle"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "bool",
      "arg": "exportselection"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "int",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "Variable",
      "arg": "listvariable"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "str",
      "arg": "selectmode"
     },
     {
      "annotation": "bool",
      "arg": "setgrid"
     },
     {
      "annotation": "Literal['normal', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "yscrollcommand"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "activate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "bbox",
    "returns": "(tuple[int, int, int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "curselection",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "first"
     },
     {
      "annotation": "(Any | None)",
      "arg": "last"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "delete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "first"
     },
     {
      "annotation": "(Any | None)",
      "arg": "last"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "get",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "index",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "y"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "nearest",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     },
     {
      "annotation": "",
      "arg": "y"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "scan_mark",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     },
     {
      "annotation": "",
      "arg": "y"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "scan_dragto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "see",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "selection_anchor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "first"
     },
     {
      "annotation": "(Any | None)",
      "arg": "last"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "selection_clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "selection_includes",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "first"
     },
     {
      "annotation": "(Any | None)",
      "arg": "last"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "selection_set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "size",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "",
      "arg": "option"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "itemcget",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Listbox",
    "kwonlyargs": [],
    "name": "itemconfigure",
    "returns": ""
   }
  ]
 },
 {
  "className": "tkinter.Menu",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activeborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "postcommand"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "int",
      "arg": "tearoff"
     },
     {
      "annotation": "(Callable[[str, str], Any] | str)",
      "arg": "tearoffcommand"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "Literal['menubar', 'tearoff', 'normal']",
      "arg": "type"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "activeborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "postcommand"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "bool",
      "arg": "tearoff"
     },
     {
      "annotation": "(Callable[[str, str], Any] | str)",
      "arg": "tearoffcommand"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "Literal['menubar', 'tearoff', 'normal']",
      "arg": "type"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "entry"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "tk_popup",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "activate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "itemType"
     },
     {
      "annotation": "",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "add",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "",
      "arg": "itemType"
     },
     {
      "annotation": "",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "insert",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "accelerator"
     },
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "int",
      "arg": "columnbreak"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "bool",
      "arg": "hidemargin"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "Menu",
      "arg": "menu"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "int",
      "arg": "underline"
     }
    ],
    "name": "add_cascade",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "accelerator"
     },
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "int",
      "arg": "columnbreak"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "bool",
      "arg": "hidemargin"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "Any",
      "arg": "offvalue"
     },
     {
      "annotation": "Any",
      "arg": "onvalue"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "selectimage"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "Variable",
      "arg": "variable"
     }
    ],
    "name": "add_checkbutton",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "accelerator"
     },
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "int",
      "arg": "columnbreak"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "bool",
      "arg": "hidemargin"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "int",
      "arg": "underline"
     }
    ],
    "name": "add_command",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "accelerator"
     },
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "int",
      "arg": "columnbreak"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "bool",
      "arg": "hidemargin"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "selectimage"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "Variable",
      "arg": "variable"
     }
    ],
    "name": "add_radiobutton",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     }
    ],
    "name": "add_separator",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "accelerator"
     },
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "int",
      "arg": "columnbreak"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "bool",
      "arg": "hidemargin"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "Menu",
      "arg": "menu"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "int",
      "arg": "underline"
     }
    ],
    "name": "insert_cascade",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "accelerator"
     },
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "int",
      "arg": "columnbreak"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "bool",
      "arg": "hidemargin"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "Any",
      "arg": "offvalue"
     },
     {
      "annotation": "Any",
      "arg": "onvalue"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "selectimage"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "Variable",
      "arg": "variable"
     }
    ],
    "name": "insert_checkbutton",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "accelerator"
     },
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "int",
      "arg": "columnbreak"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "bool",
      "arg": "hidemargin"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "int",
      "arg": "underline"
     }
    ],
    "name": "insert_command",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "accelerator"
     },
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "int",
      "arg": "columnbreak"
     },
     {
      "annotation": "(Callable[[], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "bool",
      "arg": "hidemargin"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "selectimage"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "Variable",
      "arg": "variable"
     }
    ],
    "name": "insert_radiobutton",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     }
    ],
    "name": "insert_separator",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_MenuIndex | None)",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "delete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "entrycget",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "entryconfigure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "index",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "invoke",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "post",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "type",
    "returns": "Literal['cascade', 'checkbutton', 'command', 'radiobutton', 'separator']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "unpost",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "xposition",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_MenuIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Menu",
    "kwonlyargs": [],
    "name": "yposition",
    "returns": "int"
   }
  ]
 },
 {
  "className": "tkinter.Menubutton",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menubutton",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "Literal['above', 'below', 'left', 'right', 'flush']",
      "arg": "direction"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "Menu",
      "arg": "menu"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menubutton",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "Literal['above', 'below', 'left', 'right', 'flush']",
      "arg": "direction"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "Menu",
      "arg": "menu"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Menubutton",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   }
  ]
 },
 {
  "className": "tkinter.Message",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Message",
    "kwonlyargs": [
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "int",
      "arg": "aspect"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Message",
    "kwonlyargs": [
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "int",
      "arg": "aspect"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Message",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   }
  ]
 },
 {
  "className": "tkinter.Radiobutton",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Radiobutton",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_ButtonCommand",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_Relief",
      "arg": "offrelief"
     },
     {
      "annotation": "_Relief",
      "arg": "overrelief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "selectimage"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "tristateimage"
     },
     {
      "annotation": "Any",
      "arg": "tristatevalue"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "(Variable | Literal[''])",
      "arg": "variable"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Radiobutton",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "activeforeground"
     },
     {
      "annotation": "_Anchor",
      "arg": "anchor"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bitmap"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_ButtonCommand",
      "arg": "command"
     },
     {
      "annotation": "_Compound",
      "arg": "compound"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "indicatoron"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_Relief",
      "arg": "offrelief"
     },
     {
      "annotation": "_Relief",
      "arg": "overrelief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectcolor"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "selectimage"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "_ImageSpec",
      "arg": "tristateimage"
     },
     {
      "annotation": "Any",
      "arg": "tristatevalue"
     },
     {
      "annotation": "int",
      "arg": "underline"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "(Variable | Literal[''])",
      "arg": "variable"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "wraplength"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Radiobutton",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Radiobutton",
    "kwonlyargs": [],
    "name": "deselect",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Radiobutton",
    "kwonlyargs": [],
    "name": "flash",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Radiobutton",
    "kwonlyargs": [],
    "name": "invoke",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Radiobutton",
    "kwonlyargs": [],
    "name": "select",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Scale",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Scale",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "float",
      "arg": "bigincrement"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "(str | Callable[[str], Any])",
      "arg": "command"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "int",
      "arg": "digits"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "float",
      "arg": "from_"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "length"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "Literal['horizontal', 'vertical']",
      "arg": "orient"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "int",
      "arg": "repeatdelay"
     },
     {
      "annotation": "int",
      "arg": "repeatinterval"
     },
     {
      "annotation": "float",
      "arg": "resolution"
     },
     {
      "annotation": "bool",
      "arg": "showvalue"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "sliderlength"
     },
     {
      "annotation": "_Relief",
      "arg": "sliderrelief"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "float",
      "arg": "tickinterval"
     },
     {
      "annotation": "float",
      "arg": "to"
     },
     {
      "annotation": "_Color",
      "arg": "troughcolor"
     },
     {
      "annotation": "(IntVar | DoubleVar)",
      "arg": "variable"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Scale",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "float",
      "arg": "bigincrement"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "(str | Callable[[str], Any])",
      "arg": "command"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "int",
      "arg": "digits"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "float",
      "arg": "from_"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "str",
      "arg": "label"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "length"
     },
     {
      "annotation": "Literal['horizontal', 'vertical']",
      "arg": "orient"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "int",
      "arg": "repeatdelay"
     },
     {
      "annotation": "int",
      "arg": "repeatinterval"
     },
     {
      "annotation": "float",
      "arg": "resolution"
     },
     {
      "annotation": "bool",
      "arg": "showvalue"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "sliderlength"
     },
     {
      "annotation": "_Relief",
      "arg": "sliderrelief"
     },
     {
      "annotation": "Literal['normal', 'active', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "float",
      "arg": "tickinterval"
     },
     {
      "annotation": "float",
      "arg": "to"
     },
     {
      "annotation": "_Color",
      "arg": "troughcolor"
     },
     {
      "annotation": "(IntVar | DoubleVar)",
      "arg": "variable"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Scale",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Scale",
    "kwonlyargs": [],
    "name": "get",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "value"
     }
    ],
    "className": "tkinter.Scale",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "value"
     }
    ],
    "className": "tkinter.Scale",
    "kwonlyargs": [],
    "name": "coords",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     },
     {
      "annotation": "",
      "arg": "y"
     }
    ],
    "className": "tkinter.Scale",
    "kwonlyargs": [],
    "name": "identify",
    "returns": "Literal['', 'slider', 'trough1', 'trough2']"
   }
  ]
 },
 {
  "className": "tkinter.Scrollbar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Relief",
      "arg": "activerelief"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "(Callable[..., tuple[float, float] | None] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "elementborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "bool",
      "arg": "jump"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "Literal['horizontal', 'vertical']",
      "arg": "orient"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "int",
      "arg": "repeatdelay"
     },
     {
      "annotation": "int",
      "arg": "repeatinterval"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "_Color",
      "arg": "troughcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Relief",
      "arg": "activerelief"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "(Callable[..., tuple[float, float] | None] | str)",
      "arg": "command"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "elementborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "bool",
      "arg": "jump"
     },
     {
      "annotation": "Literal['horizontal', 'vertical']",
      "arg": "orient"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "int",
      "arg": "repeatdelay"
     },
     {
      "annotation": "int",
      "arg": "repeatinterval"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "_Color",
      "arg": "troughcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "index"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [],
    "name": "activate",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "deltax"
     },
     {
      "annotation": "int",
      "arg": "deltay"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [],
    "name": "delta",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [],
    "name": "fraction",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [],
    "name": "identify",
    "returns": "Literal['arrow1', 'arrow2', 'slider', 'trough1', 'trough2', '']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(tuple[float, float, float, float] | tuple[float, float])"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "first"
     },
     {
      "annotation": "float",
      "arg": "last"
     }
    ],
    "className": "tkinter.Scrollbar",
    "kwonlyargs": [],
    "name": "set",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Text",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "autoseparators"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "bool",
      "arg": "blockcursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "(int | Literal[''])",
      "arg": "endline"
     },
     {
      "annotation": "bool",
      "arg": "exportselection"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_Color",
      "arg": "inactiveselectbackground"
     },
     {
      "annotation": "_Color",
      "arg": "insertbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertborderwidth"
     },
     {
      "annotation": "int",
      "arg": "insertofftime"
     },
     {
      "annotation": "int",
      "arg": "insertontime"
     },
     {
      "annotation": "Literal['none', 'hollow', 'solid']",
      "arg": "insertunfocussed"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertwidth"
     },
     {
      "annotation": "int",
      "arg": "maxundo"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "bool",
      "arg": "setgrid"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing2"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing3"
     },
     {
      "annotation": "(int | Literal[''])",
      "arg": "startline"
     },
     {
      "annotation": "Literal['normal', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "(_ScreenUnits | str | tuple[_ScreenUnits | str, ...])",
      "arg": "tabs"
     },
     {
      "annotation": "Literal['tabular', 'wordprocessor']",
      "arg": "tabstyle"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "bool",
      "arg": "undo"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "Literal['none', 'char', 'word']",
      "arg": "wrap"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "yscrollcommand"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "autoseparators"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "bool",
      "arg": "blockcursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "(int | Literal[''])",
      "arg": "endline"
     },
     {
      "annotation": "bool",
      "arg": "exportselection"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "_Color",
      "arg": "inactiveselectbackground"
     },
     {
      "annotation": "_Color",
      "arg": "insertbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertborderwidth"
     },
     {
      "annotation": "int",
      "arg": "insertofftime"
     },
     {
      "annotation": "int",
      "arg": "insertontime"
     },
     {
      "annotation": "Literal['none', 'hollow', 'solid']",
      "arg": "insertunfocussed"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertwidth"
     },
     {
      "annotation": "int",
      "arg": "maxundo"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "bool",
      "arg": "setgrid"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing2"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing3"
     },
     {
      "annotation": "(int | Literal[''])",
      "arg": "startline"
     },
     {
      "annotation": "Literal['normal', 'disabled']",
      "arg": "state"
     },
     {
      "annotation": "(_ScreenUnits | str | tuple[_ScreenUnits | str, ...])",
      "arg": "tabs"
     },
     {
      "annotation": "Literal['tabular', 'wordprocessor']",
      "arg": "tabstyle"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "bool",
      "arg": "undo"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "Literal['none', 'char', 'word']",
      "arg": "wrap"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "yscrollcommand"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "bbox",
    "returns": "(tuple[int, int, int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "Literal['<', '<=', '==', '>=', '>', '!=']",
      "arg": "op"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "compare",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index1"
     },
     {
      "annotation": "",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "count",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "boolean"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "debug",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "boolean"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "debug",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "delete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "dlineinfo",
    "returns": "(tuple[int, int, int, int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index2"
     },
     {
      "annotation": "None",
      "arg": "command"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "all"
     },
     {
      "annotation": "bool",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "mark"
     },
     {
      "annotation": "bool",
      "arg": "tag"
     },
     {
      "annotation": "bool",
      "arg": "text"
     },
     {
      "annotation": "bool",
      "arg": "window"
     }
    ],
    "name": "dump",
    "returns": "list[tuple[str, str, str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index2"
     },
     {
      "annotation": "(Callable[[str, str, str], Any] | str)",
      "arg": "command"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "all"
     },
     {
      "annotation": "bool",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "mark"
     },
     {
      "annotation": "bool",
      "arg": "tag"
     },
     {
      "annotation": "bool",
      "arg": "text"
     },
     {
      "annotation": "bool",
      "arg": "window"
     }
    ],
    "name": "dump",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [
     {
      "annotation": "(Callable[[str, str, str], Any] | str)",
      "arg": "command"
     },
     {
      "annotation": "bool",
      "arg": "all"
     },
     {
      "annotation": "bool",
      "arg": "image"
     },
     {
      "annotation": "bool",
      "arg": "mark"
     },
     {
      "annotation": "bool",
      "arg": "tag"
     },
     {
      "annotation": "bool",
      "arg": "text"
     },
     {
      "annotation": "bool",
      "arg": "window"
     }
    ],
    "name": "dump",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "edit",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "arg"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "edit_modified",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "arg"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "edit_modified",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "edit_redo",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "edit_reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "edit_separator",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "edit_undo",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "get",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "",
      "arg": "option"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "image_cget",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "image_configure",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "image_create",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "image_names",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "index",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     },
     {
      "annotation": "str",
      "arg": "chars"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "markName"
     },
     {
      "annotation": "None",
      "arg": "direction"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "mark_gravity",
    "returns": "Literal['left', 'right']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "markName"
     },
     {
      "annotation": "Literal['left', 'right']",
      "arg": "direction"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "mark_gravity",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "mark_names",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "markName"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "mark_set",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "mark_unset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "mark_next",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "mark_previous",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | Text)",
      "arg": "newPathName"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "peer_create",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "peer_names",
    "returns": "tuple[_tkinter.Tcl_Obj, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index2"
     },
     {
      "annotation": "str",
      "arg": "chars"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "replace",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "scan_mark",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "scan_dragto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "pattern"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "stopindex"
     },
     {
      "annotation": "(bool | None)",
      "arg": "forwards"
     },
     {
      "annotation": "(bool | None)",
      "arg": "backwards"
     },
     {
      "annotation": "(bool | None)",
      "arg": "exact"
     },
     {
      "annotation": "(bool | None)",
      "arg": "regexp"
     },
     {
      "annotation": "(bool | None)",
      "arg": "nocase"
     },
     {
      "annotation": "(Variable | None)",
      "arg": "count"
     },
     {
      "annotation": "(bool | None)",
      "arg": "elide"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "search",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "see",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_add",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "(Callable[[Event[Text]], Any] | None)",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_bind",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "(str | None)",
      "arg": "sequence"
     },
     {
      "annotation": "str",
      "arg": "func"
     },
     {
      "annotation": "(Literal['', '+'] | bool | None)",
      "arg": "add"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "str",
      "arg": "sequence"
     },
     {
      "annotation": "(str | None)",
      "arg": "funcid"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_unbind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_cget",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_Bitmap",
      "arg": "bgstipple"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "bool",
      "arg": "elide"
     },
     {
      "annotation": "_Bitmap",
      "arg": "fgstipple"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "Literal['left', 'right', 'center']",
      "arg": "justify"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "lmargin1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "lmargin2"
     },
     {
      "annotation": "_Color",
      "arg": "lmargincolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "offset"
     },
     {
      "annotation": "bool",
      "arg": "overstrike"
     },
     {
      "annotation": "_Color",
      "arg": "overstrikefg"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "rmargin"
     },
     {
      "annotation": "_Color",
      "arg": "rmargincolor"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing1"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing2"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "spacing3"
     },
     {
      "annotation": "Any",
      "arg": "tabs"
     },
     {
      "annotation": "Literal['tabular', 'wordprocessor']",
      "arg": "tabstyle"
     },
     {
      "annotation": "bool",
      "arg": "underline"
     },
     {
      "annotation": "_Color",
      "arg": "underlinefg"
     },
     {
      "annotation": "Literal['none', 'char', 'word']",
      "arg": "wrap"
     }
    ],
    "name": "tag_configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__first_tag_name"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_delete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "(str | None)",
      "arg": "belowThis"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_lower",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_names",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_nextrange",
    "returns": "(tuple[str, str] | tuple[()])"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_prevrange",
    "returns": "(tuple[str, str] | tuple[()])"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "(str | None)",
      "arg": "aboveThis"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_raise",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_ranges",
    "returns": "tuple[_tkinter.Tcl_Obj, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "tagName"
     },
     {
      "annotation": "_TextIndex",
      "arg": "index1"
     },
     {
      "annotation": "(_TextIndex | None)",
      "arg": "index2"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "tag_remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "",
      "arg": "option"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "window_cget",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "window_configure",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "window_create",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "window_names",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Text",
    "kwonlyargs": [],
    "name": "yview_pickplace",
    "returns": ""
   }
  ]
 },
 {
  "className": "tkinter.OptionMenu",
  "fields": [
   {
    "annotation": "Any",
    "className": "tkinter.OptionMenu",
    "name": "widgetName"
   },
   {
    "annotation": "Any",
    "className": "tkinter.OptionMenu",
    "name": "menuname"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "StringVar",
      "arg": "variable"
     },
     {
      "annotation": "str",
      "arg": "value"
     }
    ],
    "className": "tkinter.OptionMenu",
    "kwonlyargs": [
     {
      "annotation": "(Callable[[StringVar], Any] | None)",
      "arg": "command"
     }
    ],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Image",
  "fields": [
   {
    "annotation": "Any",
    "className": "tkinter.Image",
    "name": "name"
   },
   {
    "annotation": "_tkinter.TkappType",
    "className": "tkinter.Image",
    "name": "tk"
   },
   {
    "annotation": "Any",
    "className": "tkinter.Image",
    "name": "configure"
   },
   {
    "annotation": "Any",
    "className": "tkinter.Image",
    "name": "config"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "imgtype"
     },
     {
      "annotation": "(Any | None)",
      "arg": "name"
     },
     {
      "annotation": "",
      "arg": "cnf"
     },
     {
      "annotation": "(Misc | _tkinter.TkappType | None)",
      "arg": "master"
     }
    ],
    "className": "tkinter.Image",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Image",
    "kwonlyargs": [],
    "name": "__del__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "key"
     },
     {
      "annotation": "",
      "arg": "value"
     }
    ],
    "className": "tkinter.Image",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "key"
     }
    ],
    "className": "tkinter.Image",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Image",
    "kwonlyargs": [],
    "name": "height",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Image",
    "kwonlyargs": [],
    "name": "type",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Image",
    "kwonlyargs": [],
    "name": "width",
    "returns": "int"
   }
  ]
 },
 {
  "className": "tkinter.PhotoImage",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "cnf"
     },
     {
      "annotation": "(Misc | _tkinter.TkappType | None)",
      "arg": "master"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [
     {
      "annotation": "(str | bytes)",
      "arg": "data"
     },
     {
      "annotation": "str",
      "arg": "format"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "file"
     },
     {
      "annotation": "float",
      "arg": "gamma"
     },
     {
      "annotation": "int",
      "arg": "height"
     },
     {
      "annotation": "(int | str)",
      "arg": "palette"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [
     {
      "annotation": "(str | bytes)",
      "arg": "data"
     },
     {
      "annotation": "str",
      "arg": "format"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "file"
     },
     {
      "annotation": "float",
      "arg": "gamma"
     },
     {
      "annotation": "int",
      "arg": "height"
     },
     {
      "annotation": "(int | str)",
      "arg": "palette"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "blank",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "option"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "cget",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "PhotoImage"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "(int | Literal[''])",
      "arg": "y"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "zoom",
    "returns": "PhotoImage"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "(int | Literal[''])",
      "arg": "y"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "subsample",
    "returns": "PhotoImage"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "get",
    "returns": "tuple[int, int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | list[str] | list[list[_Color]] | list[tuple[_Color, ...]] | tuple[\n    str, ...] | tuple[list[_Color], ...] | tuple[tuple[_Color, ...], ...])",
      "arg": "data"
     },
     {
      "annotation": "(tuple[int, int] | None)",
      "arg": "to"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "put",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "filename"
     },
     {
      "annotation": "(str | None)",
      "arg": "format"
     },
     {
      "annotation": "(tuple[int, int] | None)",
      "arg": "from_coords"
     }
    ],
    "className": "tkinter.PhotoImage",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.BitmapImage",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "name"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "cnf"
     },
     {
      "annotation": "(Misc | _tkinter.TkappType | None)",
      "arg": "master"
     }
    ],
    "className": "tkinter.BitmapImage",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "(str | bytes)",
      "arg": "data"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "file"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "str",
      "arg": "maskdata"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "maskfile"
     }
    ],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tkinter.Spinbox",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "buttonbackground"
     },
     {
      "annotation": "_Cursor",
      "arg": "buttoncursor"
     },
     {
      "annotation": "_Relief",
      "arg": "buttondownrelief"
     },
     {
      "annotation": "_Relief",
      "arg": "buttonuprelief"
     },
     {
      "annotation": "(Callable[[], Any] | str | list[str] | tuple[str, ...])",
      "arg": "command"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledbackground"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "bool",
      "arg": "exportselection"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "str",
      "arg": "format"
     },
     {
      "annotation": "float",
      "arg": "from_"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "float",
      "arg": "increment"
     },
     {
      "annotation": "_Color",
      "arg": "insertbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertborderwidth"
     },
     {
      "annotation": "int",
      "arg": "insertofftime"
     },
     {
      "annotation": "int",
      "arg": "insertontime"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertwidth"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "invalidcommand"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "invcmd"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_Color",
      "arg": "readonlybackground"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "int",
      "arg": "repeatdelay"
     },
     {
      "annotation": "int",
      "arg": "repeatinterval"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "Literal['normal', 'disabled', 'readonly']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "float",
      "arg": "to"
     },
     {
      "annotation": "Literal['none', 'focus', 'focusin', 'focusout', 'key', 'all']",
      "arg": "validate"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "validatecommand"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "vcmd"
     },
     {
      "annotation": "(list[str] | tuple[str, ...])",
      "arg": "values"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "bool",
      "arg": "wrap"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "activebackground"
     },
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "buttonbackground"
     },
     {
      "annotation": "_Cursor",
      "arg": "buttoncursor"
     },
     {
      "annotation": "_Relief",
      "arg": "buttondownrelief"
     },
     {
      "annotation": "_Relief",
      "arg": "buttonuprelief"
     },
     {
      "annotation": "(Callable[[], Any] | str | list[str] | tuple[str, ...])",
      "arg": "command"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "disabledbackground"
     },
     {
      "annotation": "_Color",
      "arg": "disabledforeground"
     },
     {
      "annotation": "bool",
      "arg": "exportselection"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "str",
      "arg": "format"
     },
     {
      "annotation": "float",
      "arg": "from_"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "float",
      "arg": "increment"
     },
     {
      "annotation": "_Color",
      "arg": "insertbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertborderwidth"
     },
     {
      "annotation": "int",
      "arg": "insertofftime"
     },
     {
      "annotation": "int",
      "arg": "insertontime"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "insertwidth"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "invalidcommand"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "invcmd"
     },
     {
      "annotation": "Literal['left', 'center', 'right']",
      "arg": "justify"
     },
     {
      "annotation": "_Color",
      "arg": "readonlybackground"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "int",
      "arg": "repeatdelay"
     },
     {
      "annotation": "int",
      "arg": "repeatinterval"
     },
     {
      "annotation": "_Color",
      "arg": "selectbackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "selectborderwidth"
     },
     {
      "annotation": "_Color",
      "arg": "selectforeground"
     },
     {
      "annotation": "Literal['normal', 'disabled', 'readonly']",
      "arg": "state"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "Variable",
      "arg": "textvariable"
     },
     {
      "annotation": "float",
      "arg": "to"
     },
     {
      "annotation": "Literal['none', 'focus', 'focusin', 'focusout', 'key', 'all']",
      "arg": "validate"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "validatecommand"
     },
     {
      "annotation": "_EntryValidateCommand",
      "arg": "vcmd"
     },
     {
      "annotation": "(list[str] | tuple[str, ...])",
      "arg": "values"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "bool",
      "arg": "wrap"
     },
     {
      "annotation": "_XYScrollCommand",
      "arg": "xscrollcommand"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "bbox",
    "returns": "(tuple[int, int, int, int] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "first"
     },
     {
      "annotation": "(Any | None)",
      "arg": "last"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "delete",
    "returns": "Literal['']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "get",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "icursor",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "identify",
    "returns": "Literal['', 'buttondown', 'buttonup', 'entry']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "index"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_EntryIndex",
      "arg": "index"
     },
     {
      "annotation": "str",
      "arg": "s"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "Literal['']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal['none', 'buttonup', 'buttondown']",
      "arg": "element"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "invoke",
    "returns": "Literal['']"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "scan",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "scan_mark",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "scan_dragto",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "selection",
    "returns": "tuple[int, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "selection_adjust",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "selection_clear",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "element"
     }
    ],
    "className": "tkinter.Spinbox",
    "kwonlyargs": [],
    "name": "selection_element",
    "returns": ""
   }
  ]
 },
 {
  "className": "tkinter.LabelFrame",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.LabelFrame",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "str",
      "arg": "class_"
     },
     {
      "annotation": "(Literal['new', ''] | Misc)",
      "arg": "colormap"
     },
     {
      "annotation": "bool",
      "arg": "container"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Literal['nw', 'n', 'ne', 'en', 'e', 'es', 'se', 's', 'sw', 'ws', 'w', 'wn']",
      "arg": "labelanchor"
     },
     {
      "annotation": "Misc",
      "arg": "labelwidget"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "(str | tuple[str, int])",
      "arg": "visual"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.LabelFrame",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_Color",
      "arg": "fg"
     },
     {
      "annotation": "_FontDescription",
      "arg": "font"
     },
     {
      "annotation": "_Color",
      "arg": "foreground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "_Color",
      "arg": "highlightbackground"
     },
     {
      "annotation": "_Color",
      "arg": "highlightcolor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "highlightthickness"
     },
     {
      "annotation": "Literal['nw', 'n', 'ne', 'en', 'e', 'es', 'se', 's', 'sw', 'ws', 'w', 'wn']",
      "arg": "labelanchor"
     },
     {
      "annotation": "Misc",
      "arg": "labelwidget"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "padx"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "pady"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_TakeFocusValue",
      "arg": "takefocus"
     },
     {
      "annotation": "(float | str)",
      "arg": "text"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.LabelFrame",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   }
  ]
 },
 {
  "className": "tkinter.PanedWindow",
  "fields": [
   {
    "annotation": "Any",
    "className": "tkinter.PanedWindow",
    "name": "forget"
   },
   {
    "annotation": "Any",
    "className": "tkinter.PanedWindow",
    "name": "paneconfig"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "handlepad"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "handlesize"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "bool",
      "arg": "opaqueresize"
     },
     {
      "annotation": "Literal['horizontal', 'vertical']",
      "arg": "orient"
     },
     {
      "annotation": "_Color",
      "arg": "proxybackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "proxyborderwidth"
     },
     {
      "annotation": "_Relief",
      "arg": "proxyrelief"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Cursor",
      "arg": "sashcursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "sashpad"
     },
     {
      "annotation": "_Relief",
      "arg": "sashrelief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "sashwidth"
     },
     {
      "annotation": "bool",
      "arg": "showhandle"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [
     {
      "annotation": "_Color",
      "arg": "background"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "bd"
     },
     {
      "annotation": "_Color",
      "arg": "bg"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "border"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "borderwidth"
     },
     {
      "annotation": "_Cursor",
      "arg": "cursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "handlepad"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "handlesize"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "height"
     },
     {
      "annotation": "bool",
      "arg": "opaqueresize"
     },
     {
      "annotation": "Literal['horizontal', 'vertical']",
      "arg": "orient"
     },
     {
      "annotation": "_Color",
      "arg": "proxybackground"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "proxyborderwidth"
     },
     {
      "annotation": "_Relief",
      "arg": "proxyrelief"
     },
     {
      "annotation": "_Relief",
      "arg": "relief"
     },
     {
      "annotation": "_Cursor",
      "arg": "sashcursor"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "sashpad"
     },
     {
      "annotation": "_Relief",
      "arg": "sashrelief"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "sashwidth"
     },
     {
      "annotation": "bool",
      "arg": "showhandle"
     },
     {
      "annotation": "_ScreenUnits",
      "arg": "width"
     }
    ],
    "name": "configure",
    "returns": "(dict[str, tuple[str, str, str, Any, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "configure",
    "returns": "tuple[str, str, str, Any, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Widget",
      "arg": "child"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "add",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "child"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "y"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "identify",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "proxy",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "proxy_coord",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "proxy_forget",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "x"
     },
     {
      "annotation": "",
      "arg": "y"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "proxy_place",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "sash",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "sash_coord",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "sash_mark",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "index"
     },
     {
      "annotation": "",
      "arg": "x"
     },
     {
      "annotation": "",
      "arg": "y"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "sash_place",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "child"
     },
     {
      "annotation": "",
      "arg": "option"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "panecget",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "",
      "arg": "tagOrId"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cnf"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "paneconfigure",
    "returns": ""
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tkinter.PanedWindow",
    "kwonlyargs": [],
    "name": "panes",
    "returns": ""
   }
  ]
 },
 {
  "className": "contextlib.ContextDecorator",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_F",
      "arg": "func"
     }
    ],
    "className": "contextlib.ContextDecorator",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "_F"
   }
  ]
 },
 {
  "className": "contextlib.AsyncContextDecorator",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_AF",
      "arg": "func"
     }
    ],
    "className": "contextlib.AsyncContextDecorator",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "_AF"
   }
  ]
 },
 {
  "className": "contextlib.closing",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_SupportsCloseT",
      "arg": "thing"
     }
    ],
    "className": "contextlib.closing",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextlib.closing",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "contextlib.aclosing",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_SupportsAcloseT",
      "arg": "thing"
     }
    ],
    "className": "contextlib.aclosing",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "contextlib.suppress",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextlib.suppress",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exctype"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "excinst"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "exctb"
     }
    ],
    "className": "contextlib.suppress",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "contextlib.redirect_stdout",
  "fields": [],
  "methods": []
 },
 {
  "className": "contextlib.redirect_stderr",
  "fields": [],
  "methods": []
 },
 {
  "className": "contextlib.ExitStack",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextlib.ExitStack",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractContextManager[_T]",
      "arg": "cm"
     }
    ],
    "className": "contextlib.ExitStack",
    "kwonlyargs": [],
    "name": "enter_context",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_CM_EF",
      "arg": "exit"
     }
    ],
    "className": "contextlib.ExitStack",
    "kwonlyargs": [],
    "name": "push",
    "returns": "_CM_EF"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[_P, _T]",
      "arg": "__callback"
     }
    ],
    "className": "contextlib.ExitStack",
    "kwonlyargs": [],
    "name": "callback",
    "returns": "Callable[_P, _T]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "contextlib.ExitStack",
    "kwonlyargs": [],
    "name": "pop_all",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextlib.ExitStack",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "contextlib.ExitStack",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "__exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "__exc_value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__traceback"
     }
    ],
    "className": "contextlib.ExitStack",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "contextlib.AsyncExitStack",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextlib.AsyncExitStack",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractContextManager[_T]",
      "arg": "cm"
     }
    ],
    "className": "contextlib.AsyncExitStack",
    "kwonlyargs": [],
    "name": "enter_context",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_CM_EF",
      "arg": "exit"
     }
    ],
    "className": "contextlib.AsyncExitStack",
    "kwonlyargs": [],
    "name": "push",
    "returns": "_CM_EF"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ACM_EF",
      "arg": "exit"
     }
    ],
    "className": "contextlib.AsyncExitStack",
    "kwonlyargs": [],
    "name": "push_async_exit",
    "returns": "_ACM_EF"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[_P, _T]",
      "arg": "__callback"
     }
    ],
    "className": "contextlib.AsyncExitStack",
    "kwonlyargs": [],
    "name": "callback",
    "returns": "Callable[_P, _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[_P, Awaitable[_T]]",
      "arg": "__callback"
     }
    ],
    "className": "contextlib.AsyncExitStack",
    "kwonlyargs": [],
    "name": "push_async_callback",
    "returns": "Callable[_P, Awaitable[_T]]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "contextlib.AsyncExitStack",
    "kwonlyargs": [],
    "name": "pop_all",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "contextlib.nullcontext",
  "fields": [
   {
    "annotation": "_T",
    "className": "contextlib.nullcontext",
    "name": "enter_result"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "nullcontext[None]",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "enter_result"
     }
    ],
    "className": "contextlib.nullcontext",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "nullcontext[_T]",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "enter_result"
     }
    ],
    "className": "contextlib.nullcontext",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextlib.nullcontext",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextlib.nullcontext",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ossaudiodev.OSSAudioError",
  "fields": [],
  "methods": []
 },
 {
  "className": "contextvars.ContextVar",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "contextvars.ContextVar",
    "kwonlyargs": [
     {
      "annotation": "_T",
      "arg": "default"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextvars.ContextVar",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextvars.ContextVar",
    "kwonlyargs": [],
    "name": "get",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_D | _T)",
      "arg": "default"
     }
    ],
    "className": "contextvars.ContextVar",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_D | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "__value"
     }
    ],
    "className": "contextvars.ContextVar",
    "kwonlyargs": [],
    "name": "set",
    "returns": "Token[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Token[_T]",
      "arg": "__token"
     }
    ],
    "className": "contextvars.ContextVar",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   }
  ]
 },
 {
  "className": "contextvars.Token",
  "fields": [
   {
    "annotation": "ClassVar[object]",
    "className": "contextvars.Token",
    "name": "MISSING"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextvars.Token",
    "kwonlyargs": [],
    "name": "var",
    "returns": "ContextVar[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextvars.Token",
    "kwonlyargs": [],
    "name": "old_value",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "contextvars.Context",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextvars.Context",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ContextVar[_T]",
      "arg": "__key"
     }
    ],
    "className": "contextvars.Context",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_T | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ContextVar[_T]",
      "arg": "__key"
     },
     {
      "annotation": "_D",
      "arg": "__default"
     }
    ],
    "className": "contextvars.Context",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_T | _D)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[_P, _T]",
      "arg": "callable"
     }
    ],
    "className": "contextvars.Context",
    "kwonlyargs": [],
    "name": "run",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextvars.Context",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "Context"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ContextVar[_T]",
      "arg": "__key"
     }
    ],
    "className": "contextvars.Context",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextvars.Context",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[ContextVar[Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "contextvars.Context",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "pathlib.PurePath",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "parts",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "drive",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "root",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "anchor",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "suffix",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "suffixes",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "stem",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__fspath__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "PurePath",
      "arg": "other"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "PurePath",
      "arg": "other"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "PurePath",
      "arg": "other"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "PurePath",
      "arg": "other"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "StrPath",
      "arg": "key"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "StrPath",
      "arg": "key"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "__bytes__",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "as_posix",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "as_uri",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "is_absolute",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "is_reserved",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "path_pattern"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "match",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "relative_to",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "with_name",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "suffix"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "with_suffix",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "joinpath",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "parents",
    "returns": "Sequence[Self]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pathlib.PurePath",
    "kwonlyargs": [],
    "name": "parent",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "pathlib.PurePosixPath",
  "fields": [],
  "methods": []
 },
 {
  "className": "pathlib.PureWindowsPath",
  "fields": [],
  "methods": []
 },
 {
  "className": "pathlib.Path",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "t"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "v"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "cwd",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "exists",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "pattern"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "glob",
    "returns": "Generator[Self, None, None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "is_dir",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "is_file",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "is_symlink",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "is_socket",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "is_fifo",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "is_block_device",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "is_char_device",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "iterdir",
    "returns": "Generator[Self, None, None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "mode"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "lchmod",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "lstat",
    "returns": "stat_result"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "mode"
     },
     {
      "annotation": "bool",
      "arg": "parents"
     },
     {
      "annotation": "bool",
      "arg": "exist_ok"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "mkdir",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OpenTextMode",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "buffering"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(str | None)",
      "arg": "errors"
     },
     {
      "annotation": "(str | None)",
      "arg": "newline"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "open",
    "returns": "TextIOWrapper"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OpenBinaryMode",
      "arg": "mode"
     },
     {
      "annotation": "Literal[0]",
      "arg": "buffering"
     },
     {
      "annotation": "None",
      "arg": "encoding"
     },
     {
      "annotation": "None",
      "arg": "errors"
     },
     {
      "annotation": "None",
      "arg": "newline"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "open",
    "returns": "FileIO"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OpenBinaryModeUpdating",
      "arg": "mode"
     },
     {
      "annotation": "Literal[-1, 1]",
      "arg": "buffering"
     },
     {
      "annotation": "None",
      "arg": "encoding"
     },
     {
      "annotation": "None",
      "arg": "errors"
     },
     {
      "annotation": "None",
      "arg": "newline"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "open",
    "returns": "BufferedRandom"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OpenBinaryModeWriting",
      "arg": "mode"
     },
     {
      "annotation": "Literal[-1, 1]",
      "arg": "buffering"
     },
     {
      "annotation": "None",
      "arg": "encoding"
     },
     {
      "annotation": "None",
      "arg": "errors"
     },
     {
      "annotation": "None",
      "arg": "newline"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "open",
    "returns": "BufferedWriter"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OpenBinaryModeReading",
      "arg": "mode"
     },
     {
      "annotation": "Literal[-1, 1]",
      "arg": "buffering"
     },
     {
      "annotation": "None",
      "arg": "encoding"
     },
     {
      "annotation": "None",
      "arg": "errors"
     },
     {
      "annotation": "None",
      "arg": "newline"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "open",
    "returns": "BufferedReader"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "OpenBinaryMode",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "buffering"
     },
     {
      "annotation": "None",
      "arg": "encoding"
     },
     {
      "annotation": "None",
      "arg": "errors"
     },
     {
      "annotation": "None",
      "arg": "newline"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "open",
    "returns": "BinaryIO"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "buffering"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(str | None)",
      "arg": "errors"
     },
     {
      "annotation": "(str | None)",
      "arg": "newline"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "open",
    "returns": "IO[Any]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "strict"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "resolve",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "pattern"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "rglob",
    "returns": "Generator[Self, None, None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "rmdir",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | Path)",
      "arg": "target"
     },
     {
      "annotation": "bool",
      "arg": "target_is_directory"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "symlink_to",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "mode"
     },
     {
      "annotation": "bool",
      "arg": "exist_ok"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "touch",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "home",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "absolute",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "expanduser",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "read_bytes",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(str | None)",
      "arg": "errors"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "read_text",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | bytes | int | Path)",
      "arg": "other_path"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "samefile",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "pathlib.Path",
    "kwonlyargs": [],
    "name": "write_bytes",
    "returns": "int"
   }
  ]
 },
 {
  "className": "pathlib.PosixPath",
  "fields": [],
  "methods": []
 },
 {
  "className": "pathlib.WindowsPath",
  "fields": [],
  "methods": []
 },
 {
  "className": "tokenize.TokenInfo",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tokenize.TokenInfo",
    "kwonlyargs": [],
    "name": "exact_type",
    "returns": "int"
   }
  ]
 },
 {
  "className": "tokenize.TokenError",
  "fields": [],
  "methods": []
 },
 {
  "className": "tokenize.StopTokenizing",
  "fields": [],
  "methods": []
 },
 {
  "className": "tokenize.Untokenizer",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "tokenize.Untokenizer",
    "name": "tokens"
   },
   {
    "annotation": "int",
    "className": "tokenize.Untokenizer",
    "name": "prev_row"
   },
   {
    "annotation": "int",
    "className": "tokenize.Untokenizer",
    "name": "prev_col"
   },
   {
    "annotation": "(str | None)",
    "className": "tokenize.Untokenizer",
    "name": "encoding"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tokenize.Untokenizer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Position",
      "arg": "start"
     }
    ],
    "className": "tokenize.Untokenizer",
    "kwonlyargs": [],
    "name": "add_whitespace",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_Token]",
      "arg": "iterable"
     }
    ],
    "className": "tokenize.Untokenizer",
    "kwonlyargs": [],
    "name": "untokenize",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[int | str]",
      "arg": "token"
     },
     {
      "annotation": "Iterable[_Token]",
      "arg": "iterable"
     }
    ],
    "className": "tokenize.Untokenizer",
    "kwonlyargs": [],
    "name": "compat",
    "returns": "None"
   }
  ]
 },
 {
  "className": "_operator.attrgetter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "attr"
     }
    ],
    "className": "_operator.attrgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "attrgetter[Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "attr"
     },
     {
      "annotation": "str",
      "arg": "__attr2"
     }
    ],
    "className": "_operator.attrgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "attrgetter[tuple[Any, Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "attr"
     },
     {
      "annotation": "str",
      "arg": "__attr2"
     },
     {
      "annotation": "str",
      "arg": "__attr3"
     }
    ],
    "className": "_operator.attrgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "attrgetter[tuple[Any, Any, Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "attr"
     },
     {
      "annotation": "str",
      "arg": "__attr2"
     },
     {
      "annotation": "str",
      "arg": "__attr3"
     },
     {
      "annotation": "str",
      "arg": "__attr4"
     }
    ],
    "className": "_operator.attrgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "attrgetter[tuple[Any, Any, Any, Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "attr"
     }
    ],
    "className": "_operator.attrgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "attrgetter[tuple[Any, ...]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "obj"
     }
    ],
    "className": "_operator.attrgetter",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "_operator.itemgetter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "item"
     }
    ],
    "className": "_operator.itemgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "itemgetter[Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "item"
     },
     {
      "annotation": "Any",
      "arg": "__item2"
     }
    ],
    "className": "_operator.itemgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "itemgetter[tuple[Any, Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "item"
     },
     {
      "annotation": "Any",
      "arg": "__item2"
     },
     {
      "annotation": "Any",
      "arg": "__item3"
     }
    ],
    "className": "_operator.itemgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "itemgetter[tuple[Any, Any, Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "item"
     },
     {
      "annotation": "Any",
      "arg": "__item2"
     },
     {
      "annotation": "Any",
      "arg": "__item3"
     },
     {
      "annotation": "Any",
      "arg": "__item4"
     }
    ],
    "className": "_operator.itemgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "itemgetter[tuple[Any, Any, Any, Any]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "item"
     }
    ],
    "className": "_operator.itemgetter",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "itemgetter[tuple[Any, ...]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "obj"
     }
    ],
    "className": "_operator.itemgetter",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "_operator.methodcaller",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "_operator.methodcaller",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "obj"
     }
    ],
    "className": "_operator.methodcaller",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "copy.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "pdb.Restart",
  "fields": [],
  "methods": []
 },
 {
  "className": "pdb.Pdb",
  "fields": [
   {
    "annotation": "ClassVar[list[str]]",
    "className": "pdb.Pdb",
    "name": "commands_resuming"
   },
   {
    "annotation": "dict[str, str]",
    "className": "pdb.Pdb",
    "name": "aliases"
   },
   {
    "annotation": "str",
    "className": "pdb.Pdb",
    "name": "mainpyfile"
   },
   {
    "annotation": "bool",
    "className": "pdb.Pdb",
    "name": "_wait_for_mainpyfile"
   },
   {
    "annotation": "list[str]",
    "className": "pdb.Pdb",
    "name": "rcLines"
   },
   {
    "annotation": "dict[int, list[str]]",
    "className": "pdb.Pdb",
    "name": "commands"
   },
   {
    "annotation": "dict[int, bool]",
    "className": "pdb.Pdb",
    "name": "commands_doprompt"
   },
   {
    "annotation": "dict[int, bool]",
    "className": "pdb.Pdb",
    "name": "commands_silent"
   },
   {
    "annotation": "bool",
    "className": "pdb.Pdb",
    "name": "commands_defining"
   },
   {
    "annotation": "(int | None)",
    "className": "pdb.Pdb",
    "name": "commands_bnum"
   },
   {
    "annotation": "(int | None)",
    "className": "pdb.Pdb",
    "name": "lineno"
   },
   {
    "annotation": "list[tuple[FrameType, int]]",
    "className": "pdb.Pdb",
    "name": "stack"
   },
   {
    "annotation": "int",
    "className": "pdb.Pdb",
    "name": "curindex"
   },
   {
    "annotation": "(FrameType | None)",
    "className": "pdb.Pdb",
    "name": "curframe"
   },
   {
    "annotation": "Mapping[str, Any]",
    "className": "pdb.Pdb",
    "name": "curframe_locals"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "completekey"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "stdin"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "stdout"
     },
     {
      "annotation": "(Iterable[str] | None)",
      "arg": "skip"
     },
     {
      "annotation": "bool",
      "arg": "nosigint"
     },
     {
      "annotation": "bool",
      "arg": "readrc"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "forget",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(FrameType | None)",
      "arg": "f"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "tb"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "setup",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "execRcLines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "bp_commands",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(FrameType | None)",
      "arg": "frame"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "traceback"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "interaction",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "obj"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "displayhook",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "handle_command_def",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "defaultFile",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "identifier"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "lineinfo",
    "returns": "(tuple[None, None, None] | tuple[str, str, int])"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "checkline",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_getval",
    "returns": "object"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "print_stack_trace",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[FrameType, int]",
      "arg": "frame_lineno"
     },
     {
      "annotation": "str",
      "arg": "prompt_prefix"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "print_stack_entry",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "lookupmodule",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_runscript",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_commands",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     },
     {
      "annotation": "bool",
      "arg": "temporary"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_break",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_tbreak",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_enable",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_disable",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_condition",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_ignore",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_clear",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_where",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_up",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_down",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_until",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_step",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_next",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_run",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_return",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_continue",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_jump",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_debug",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_quit",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_EOF",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_args",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_retval",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_p",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_pp",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_list",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_whatis",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_alias",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_unalias",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_help",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "help_exec",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "help_pdb",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "signal.Signals",
      "arg": "signum"
     },
     {
      "annotation": "FrameType",
      "arg": "frame"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "sigint_handler",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "message",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "error",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "number"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_select_frame",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     },
     {
      "annotation": "(FrameType | None)",
      "arg": "frame"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_getval_except",
    "returns": "object"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "lines"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "Sequence[int]",
      "arg": "breaks"
     },
     {
      "annotation": "(FrameType | None)",
      "arg": "frame"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_print_lines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_cmdloop",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_display",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_interact",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_longlist",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_source",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "arg"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "do_undisplay",
    "returns": "(bool | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "str",
      "arg": "line"
     },
     {
      "annotation": "int",
      "arg": "begidx"
     },
     {
      "annotation": "int",
      "arg": "endidx"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_complete_location",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "str",
      "arg": "line"
     },
     {
      "annotation": "int",
      "arg": "begidx"
     },
     {
      "annotation": "int",
      "arg": "endidx"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_complete_bpnumber",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "str",
      "arg": "line"
     },
     {
      "annotation": "int",
      "arg": "begidx"
     },
     {
      "annotation": "int",
      "arg": "endidx"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "_complete_expression",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "str",
      "arg": "line"
     },
     {
      "annotation": "int",
      "arg": "begidx"
     },
     {
      "annotation": "int",
      "arg": "endidx"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "complete_undisplay",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "str",
      "arg": "line"
     },
     {
      "annotation": "int",
      "arg": "begidx"
     },
     {
      "annotation": "int",
      "arg": "endidx"
     }
    ],
    "className": "pdb.Pdb",
    "kwonlyargs": [],
    "name": "complete_unalias",
    "returns": "list[str]"
   }
  ]
 },
 {
  "className": "trace.CoverageResults",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[tuple[str, int], int] | None)",
      "arg": "counts"
     },
     {
      "annotation": "(dict[_fileModuleFunction, int] | None)",
      "arg": "calledfuncs"
     },
     {
      "annotation": "(StrPath | None)",
      "arg": "infile"
     },
     {
      "annotation": "(dict[tuple[_fileModuleFunction, _fileModuleFunction], int] | None)",
      "arg": "callers"
     },
     {
      "annotation": "(StrPath | None)",
      "arg": "outfile"
     }
    ],
    "className": "trace.CoverageResults",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "CoverageResults",
      "arg": "other"
     }
    ],
    "className": "trace.CoverageResults",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "show_missing"
     },
     {
      "annotation": "bool",
      "arg": "summary"
     },
     {
      "annotation": "(StrPath | None)",
      "arg": "coverdir"
     }
    ],
    "className": "trace.CoverageResults",
    "kwonlyargs": [],
    "name": "write_results",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrPath",
      "arg": "path"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "lines"
     },
     {
      "annotation": "Any",
      "arg": "lnotab"
     },
     {
      "annotation": "Mapping[int, int]",
      "arg": "lines_hit"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     }
    ],
    "className": "trace.CoverageResults",
    "kwonlyargs": [],
    "name": "write_results_file",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "trace.CoverageResults",
    "kwonlyargs": [],
    "name": "is_ignored_filename",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "trace.Trace",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "count"
     },
     {
      "annotation": "int",
      "arg": "trace"
     },
     {
      "annotation": "int",
      "arg": "countfuncs"
     },
     {
      "annotation": "int",
      "arg": "countcallers"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "ignoremods"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "ignoredirs"
     },
     {
      "annotation": "(StrPath | None)",
      "arg": "infile"
     },
     {
      "annotation": "(StrPath | None)",
      "arg": "outfile"
     },
     {
      "annotation": "bool",
      "arg": "timing"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | types.CodeType)",
      "arg": "cmd"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "run",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | types.CodeType)",
      "arg": "cmd"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "globals"
     },
     {
      "annotation": "(Mapping[str, Any] | None)",
      "arg": "locals"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "runctx",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "types.FrameType",
      "arg": "frame"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "file_module_function_of",
    "returns": "_fileModuleFunction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "types.FrameType",
      "arg": "frame"
     },
     {
      "annotation": "str",
      "arg": "why"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "globaltrace_trackcallers",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "types.FrameType",
      "arg": "frame"
     },
     {
      "annotation": "str",
      "arg": "why"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "globaltrace_countfuncs",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "types.FrameType",
      "arg": "frame"
     },
     {
      "annotation": "str",
      "arg": "why"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "globaltrace_lt",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "types.FrameType",
      "arg": "frame"
     },
     {
      "annotation": "str",
      "arg": "why"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "localtrace_trace_and_count",
    "returns": "_localtrace"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "types.FrameType",
      "arg": "frame"
     },
     {
      "annotation": "str",
      "arg": "why"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "localtrace_trace",
    "returns": "_localtrace"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "types.FrameType",
      "arg": "frame"
     },
     {
      "annotation": "str",
      "arg": "why"
     },
     {
      "annotation": "Any",
      "arg": "arg"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "localtrace_count",
    "returns": "_localtrace"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "trace.Trace",
    "kwonlyargs": [],
    "name": "results",
    "returns": "CoverageResults"
   }
  ]
 },
 {
  "className": "pickle.PickleBuffer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "buffer"
     }
    ],
    "className": "pickle.PickleBuffer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pickle.PickleBuffer",
    "kwonlyargs": [],
    "name": "raw",
    "returns": "memoryview"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pickle.PickleBuffer",
    "kwonlyargs": [],
    "name": "release",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pickle.PickleError",
  "fields": [],
  "methods": []
 },
 {
  "className": "pickle.PicklingError",
  "fields": [],
  "methods": []
 },
 {
  "className": "pickle.UnpicklingError",
  "fields": [],
  "methods": []
 },
 {
  "className": "pickle.Pickler",
  "fields": [
   {
    "annotation": "bool",
    "className": "pickle.Pickler",
    "name": "fast"
   },
   {
    "annotation": "Mapping[type, Callable[[Any], _reducedtype]]",
    "className": "pickle.Pickler",
    "name": "dispatch_table"
   },
   {
    "annotation": "bool",
    "className": "pickle.Pickler",
    "name": "bin"
   },
   {
    "annotation": "ClassVar[dict[type, Callable[[Unpickler, Any], None]]]",
    "className": "pickle.Pickler",
    "name": "dispatch"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     }
    ],
    "className": "pickle.Pickler",
    "kwonlyargs": [],
    "name": "dump",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pickle.Pickler",
    "kwonlyargs": [],
    "name": "clear_memo",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "obj"
     }
    ],
    "className": "pickle.Pickler",
    "kwonlyargs": [],
    "name": "persistent_id",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "pickle.Unpickler",
  "fields": [
   {
    "annotation": "ClassVar[dict[int, Callable[[Unpickler], None]]]",
    "className": "pickle.Unpickler",
    "name": "dispatch"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pickle.Unpickler",
    "kwonlyargs": [],
    "name": "load",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__module_name"
     },
     {
      "annotation": "str",
      "arg": "__global_name"
     }
    ],
    "className": "pickle.Unpickler",
    "kwonlyargs": [],
    "name": "find_class",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "pid"
     }
    ],
    "className": "pickle.Unpickler",
    "kwonlyargs": [],
    "name": "persistent_load",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "traceback.TracebackException",
  "fields": [
   {
    "annotation": "TracebackException",
    "className": "traceback.TracebackException",
    "name": "__cause__"
   },
   {
    "annotation": "TracebackException",
    "className": "traceback.TracebackException",
    "name": "__context__"
   },
   {
    "annotation": "bool",
    "className": "traceback.TracebackException",
    "name": "__suppress_context__"
   },
   {
    "annotation": "StackSummary",
    "className": "traceback.TracebackException",
    "name": "stack"
   },
   {
    "annotation": "type[BaseException]",
    "className": "traceback.TracebackException",
    "name": "exc_type"
   },
   {
    "annotation": "str",
    "className": "traceback.TracebackException",
    "name": "filename"
   },
   {
    "annotation": "int",
    "className": "traceback.TracebackException",
    "name": "lineno"
   },
   {
    "annotation": "str",
    "className": "traceback.TracebackException",
    "name": "text"
   },
   {
    "annotation": "int",
    "className": "traceback.TracebackException",
    "name": "offset"
   },
   {
    "annotation": "str",
    "className": "traceback.TracebackException",
    "name": "msg"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "traceback.TracebackException",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "traceback.TracebackException",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "chain"
     }
    ],
    "name": "format",
    "returns": "Generator[str, None, None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "traceback.TracebackException",
    "kwonlyargs": [],
    "name": "format_exception_only",
    "returns": "Generator[str, None, None]"
   }
  ]
 },
 {
  "className": "traceback.FrameSummary",
  "fields": [
   {
    "annotation": "str",
    "className": "traceback.FrameSummary",
    "name": "filename"
   },
   {
    "annotation": "(int | None)",
    "className": "traceback.FrameSummary",
    "name": "lineno"
   },
   {
    "annotation": "str",
    "className": "traceback.FrameSummary",
    "name": "name"
   },
   {
    "annotation": "(dict[str, str] | None)",
    "className": "traceback.FrameSummary",
    "name": "locals"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "traceback.FrameSummary",
    "kwonlyargs": [],
    "name": "line",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[0]",
      "arg": "pos"
     }
    ],
    "className": "traceback.FrameSummary",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[1]",
      "arg": "pos"
     }
    ],
    "className": "traceback.FrameSummary",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[2]",
      "arg": "pos"
     }
    ],
    "className": "traceback.FrameSummary",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Literal[3]",
      "arg": "pos"
     }
    ],
    "className": "traceback.FrameSummary",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "pos"
     }
    ],
    "className": "traceback.FrameSummary",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "traceback.FrameSummary",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "traceback.FrameSummary",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "traceback.StackSummary",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[tuple[FrameType, int]]",
      "arg": "frame_gen"
     }
    ],
    "className": "traceback.StackSummary",
    "kwonlyargs": [
     {
      "annotation": "(int | None)",
      "arg": "limit"
     },
     {
      "annotation": "bool",
      "arg": "lookup_lines"
     },
     {
      "annotation": "bool",
      "arg": "capture_locals"
     }
    ],
    "name": "extract",
    "returns": "StackSummary"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "list[_PT]",
      "arg": "a_list"
     }
    ],
    "className": "traceback.StackSummary",
    "kwonlyargs": [],
    "name": "from_list",
    "returns": "StackSummary"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "traceback.StackSummary",
    "kwonlyargs": [],
    "name": "format",
    "returns": "list[str]"
   }
  ]
 },
 {
  "className": "pickletools.ArgumentDescriptor",
  "fields": [
   {
    "annotation": "str",
    "className": "pickletools.ArgumentDescriptor",
    "name": "name"
   },
   {
    "annotation": "int",
    "className": "pickletools.ArgumentDescriptor",
    "name": "n"
   },
   {
    "annotation": "_Reader",
    "className": "pickletools.ArgumentDescriptor",
    "name": "reader"
   },
   {
    "annotation": "str",
    "className": "pickletools.ArgumentDescriptor",
    "name": "doc"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "int",
      "arg": "n"
     },
     {
      "annotation": "_Reader",
      "arg": "reader"
     },
     {
      "annotation": "str",
      "arg": "doc"
     }
    ],
    "className": "pickletools.ArgumentDescriptor",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pickletools.StackObject",
  "fields": [
   {
    "annotation": "str",
    "className": "pickletools.StackObject",
    "name": "name"
   },
   {
    "annotation": "(type[Any] | tuple[type[Any], ...])",
    "className": "pickletools.StackObject",
    "name": "obtype"
   },
   {
    "annotation": "str",
    "className": "pickletools.StackObject",
    "name": "doc"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(type[Any] | tuple[type[Any], ...])",
      "arg": "obtype"
     },
     {
      "annotation": "str",
      "arg": "doc"
     }
    ],
    "className": "pickletools.StackObject",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pickletools.OpcodeInfo",
  "fields": [
   {
    "annotation": "str",
    "className": "pickletools.OpcodeInfo",
    "name": "name"
   },
   {
    "annotation": "str",
    "className": "pickletools.OpcodeInfo",
    "name": "code"
   },
   {
    "annotation": "(ArgumentDescriptor | None)",
    "className": "pickletools.OpcodeInfo",
    "name": "arg"
   },
   {
    "annotation": "list[StackObject]",
    "className": "pickletools.OpcodeInfo",
    "name": "stack_before"
   },
   {
    "annotation": "list[StackObject]",
    "className": "pickletools.OpcodeInfo",
    "name": "stack_after"
   },
   {
    "annotation": "int",
    "className": "pickletools.OpcodeInfo",
    "name": "proto"
   },
   {
    "annotation": "str",
    "className": "pickletools.OpcodeInfo",
    "name": "doc"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "str",
      "arg": "code"
     },
     {
      "annotation": "(ArgumentDescriptor | None)",
      "arg": "arg"
     },
     {
      "annotation": "list[StackObject]",
      "arg": "stack_before"
     },
     {
      "annotation": "list[StackObject]",
      "arg": "stack_after"
     },
     {
      "annotation": "int",
      "arg": "proto"
     },
     {
      "annotation": "str",
      "arg": "doc"
     }
    ],
    "className": "pickletools.OpcodeInfo",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tracemalloc.BaseFilter",
  "fields": [
   {
    "annotation": "bool",
    "className": "tracemalloc.BaseFilter",
    "name": "inclusive"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "inclusive"
     }
    ],
    "className": "tracemalloc.BaseFilter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tracemalloc.DomainFilter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tracemalloc.DomainFilter",
    "kwonlyargs": [],
    "name": "domain",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "inclusive"
     },
     {
      "annotation": "int",
      "arg": "domain"
     }
    ],
    "className": "tracemalloc.DomainFilter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tracemalloc.Filter",
  "fields": [
   {
    "annotation": "(int | None)",
    "className": "tracemalloc.Filter",
    "name": "domain"
   },
   {
    "annotation": "(int | None)",
    "className": "tracemalloc.Filter",
    "name": "lineno"
   },
   {
    "annotation": "bool",
    "className": "tracemalloc.Filter",
    "name": "all_frames"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tracemalloc.Filter",
    "kwonlyargs": [],
    "name": "filename_pattern",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "inclusive"
     },
     {
      "annotation": "str",
      "arg": "filename_pattern"
     },
     {
      "annotation": "(int | None)",
      "arg": "lineno"
     },
     {
      "annotation": "bool",
      "arg": "all_frames"
     },
     {
      "annotation": "(int | None)",
      "arg": "domain"
     }
    ],
    "className": "tracemalloc.Filter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "tracemalloc.Statistic",
  "fields": [
   {
    "annotation": "int",
    "className": "tracemalloc.Statistic",
    "name": "count"
   },
   {
    "annotation": "int",
    "className": "tracemalloc.Statistic",
    "name": "size"
   },
   {
    "annotation": "Traceback",
    "className": "tracemalloc.Statistic",
    "name": "traceback"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Traceback",
      "arg": "traceback"
     },
     {
      "annotation": "int",
      "arg": "size"
     },
     {
      "annotation": "int",
      "arg": "count"
     }
    ],
    "className": "tracemalloc.Statistic",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "tracemalloc.Statistic",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "tracemalloc.StatisticDiff",
  "fields": [
   {
    "annotation": "int",
    "className": "tracemalloc.StatisticDiff",
    "name": "count"
   },
   {
    "annotation": "int",
    "className": "tracemalloc.StatisticDiff",
    "name": "count_diff"
   },
   {
    "annotation": "int",
    "className": "tracemalloc.StatisticDiff",
    "name": "size"
   },
   {
    "annotation": "int",
    "className": "tracemalloc.StatisticDiff",
    "name": "size_diff"
   },
   {
    "annotation": "Traceback",
    "className": "tracemalloc.StatisticDiff",
    "name": "traceback"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Traceback",
      "arg": "traceback"
     },
     {
      "annotation": "int",
      "arg": "size"
     },
     {
      "annotation": "int",
      "arg": "size_diff"
     },
     {
      "annotation": "int",
      "arg": "count"
     },
     {
      "annotation": "int",
      "arg": "count_diff"
     }
    ],
    "className": "tracemalloc.StatisticDiff",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "tracemalloc.StatisticDiff",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "tracemalloc.Frame",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tracemalloc.Frame",
    "kwonlyargs": [],
    "name": "filename",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tracemalloc.Frame",
    "kwonlyargs": [],
    "name": "lineno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_FrameTupleT",
      "arg": "frame"
     }
    ],
    "className": "tracemalloc.Frame",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "tracemalloc.Frame",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Frame",
      "arg": "other"
     }
    ],
    "className": "tracemalloc.Frame",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "tracemalloc.Trace",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tracemalloc.Trace",
    "kwonlyargs": [],
    "name": "domain",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tracemalloc.Trace",
    "kwonlyargs": [],
    "name": "size",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tracemalloc.Trace",
    "kwonlyargs": [],
    "name": "traceback",
    "returns": "Traceback"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_TraceTupleT",
      "arg": "trace"
     }
    ],
    "className": "tracemalloc.Trace",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "tracemalloc.Trace",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "tracemalloc.Traceback",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsIndex",
      "arg": "index"
     }
    ],
    "className": "tracemalloc.Traceback",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Frame"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "index"
     }
    ],
    "className": "tracemalloc.Traceback",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Sequence[Frame]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Frame",
      "arg": "frame"
     }
    ],
    "className": "tracemalloc.Traceback",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "tracemalloc.Traceback",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "tracemalloc.Traceback",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Traceback",
      "arg": "other"
     }
    ],
    "className": "tracemalloc.Traceback",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "tracemalloc.Snapshot",
  "fields": [
   {
    "annotation": "int",
    "className": "tracemalloc.Snapshot",
    "name": "traceback_limit"
   },
   {
    "annotation": "Sequence[Trace]",
    "className": "tracemalloc.Snapshot",
    "name": "traces"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[_TraceTupleT]",
      "arg": "traces"
     },
     {
      "annotation": "int",
      "arg": "traceback_limit"
     }
    ],
    "className": "tracemalloc.Snapshot",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Snapshot",
      "arg": "old_snapshot"
     },
     {
      "annotation": "str",
      "arg": "key_type"
     },
     {
      "annotation": "bool",
      "arg": "cumulative"
     }
    ],
    "className": "tracemalloc.Snapshot",
    "kwonlyargs": [],
    "name": "compare_to",
    "returns": "list[StatisticDiff]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "tracemalloc.Snapshot",
    "kwonlyargs": [],
    "name": "dump",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[DomainFilter | Filter]",
      "arg": "filters"
     }
    ],
    "className": "tracemalloc.Snapshot",
    "kwonlyargs": [],
    "name": "filter_traces",
    "returns": "Snapshot"
   },
   {
    "args": [
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "tracemalloc.Snapshot",
    "kwonlyargs": [],
    "name": "load",
    "returns": "Snapshot"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key_type"
     },
     {
      "annotation": "bool",
      "arg": "cumulative"
     }
    ],
    "className": "tracemalloc.Snapshot",
    "kwonlyargs": [],
    "name": "statistics",
    "returns": "list[Statistic]"
   }
  ]
 },
 {
  "className": "csv.excel",
  "fields": [
   {
    "annotation": "str",
    "className": "csv.excel",
    "name": "delimiter"
   },
   {
    "annotation": "str",
    "className": "csv.excel",
    "name": "quotechar"
   },
   {
    "annotation": "bool",
    "className": "csv.excel",
    "name": "doublequote"
   },
   {
    "annotation": "bool",
    "className": "csv.excel",
    "name": "skipinitialspace"
   },
   {
    "annotation": "str",
    "className": "csv.excel",
    "name": "lineterminator"
   },
   {
    "annotation": "int",
    "className": "csv.excel",
    "name": "quoting"
   }
  ],
  "methods": []
 },
 {
  "className": "csv.excel_tab",
  "fields": [
   {
    "annotation": "str",
    "className": "csv.excel_tab",
    "name": "delimiter"
   }
  ],
  "methods": []
 },
 {
  "className": "csv.unix_dialect",
  "fields": [
   {
    "annotation": "str",
    "className": "csv.unix_dialect",
    "name": "delimiter"
   },
   {
    "annotation": "str",
    "className": "csv.unix_dialect",
    "name": "quotechar"
   },
   {
    "annotation": "bool",
    "className": "csv.unix_dialect",
    "name": "doublequote"
   },
   {
    "annotation": "bool",
    "className": "csv.unix_dialect",
    "name": "skipinitialspace"
   },
   {
    "annotation": "str",
    "className": "csv.unix_dialect",
    "name": "lineterminator"
   },
   {
    "annotation": "int",
    "className": "csv.unix_dialect",
    "name": "quoting"
   }
  ],
  "methods": []
 },
 {
  "className": "csv.DictReader",
  "fields": [
   {
    "annotation": "(Sequence[_T] | None)",
    "className": "csv.DictReader",
    "name": "fieldnames"
   },
   {
    "annotation": "(str | None)",
    "className": "csv.DictReader",
    "name": "restkey"
   },
   {
    "annotation": "(str | None)",
    "className": "csv.DictReader",
    "name": "restval"
   },
   {
    "annotation": "_reader",
    "className": "csv.DictReader",
    "name": "reader"
   },
   {
    "annotation": "_DialectLike",
    "className": "csv.DictReader",
    "name": "dialect"
   },
   {
    "annotation": "int",
    "className": "csv.DictReader",
    "name": "line_num"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "f"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "fieldnames"
     },
     {
      "annotation": "(str | None)",
      "arg": "restkey"
     },
     {
      "annotation": "(str | None)",
      "arg": "restval"
     },
     {
      "annotation": "_DialectLike",
      "arg": "dialect"
     }
    ],
    "className": "csv.DictReader",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "DictReader[str]",
      "arg": "self"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "f"
     },
     {
      "annotation": "(Sequence[str] | None)",
      "arg": "fieldnames"
     },
     {
      "annotation": "(str | None)",
      "arg": "restkey"
     },
     {
      "annotation": "(str | None)",
      "arg": "restval"
     },
     {
      "annotation": "_DialectLike",
      "arg": "dialect"
     }
    ],
    "className": "csv.DictReader",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "csv.DictReader",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "csv.DictReader",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_DictReadMapping[_T, str]"
   }
  ]
 },
 {
  "className": "csv.DictWriter",
  "fields": [
   {
    "annotation": "Collection[_T]",
    "className": "csv.DictWriter",
    "name": "fieldnames"
   },
   {
    "annotation": "(Any | None)",
    "className": "csv.DictWriter",
    "name": "restval"
   },
   {
    "annotation": "str",
    "className": "csv.DictWriter",
    "name": "extrasaction"
   },
   {
    "annotation": "_writer",
    "className": "csv.DictWriter",
    "name": "writer"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "f"
     },
     {
      "annotation": "Collection[_T]",
      "arg": "fieldnames"
     },
     {
      "annotation": "(Any | None)",
      "arg": "restval"
     },
     {
      "annotation": "str",
      "arg": "extrasaction"
     },
     {
      "annotation": "_DialectLike",
      "arg": "dialect"
     }
    ],
    "className": "csv.DictWriter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[_T, Any]",
      "arg": "rowdict"
     }
    ],
    "className": "csv.DictWriter",
    "kwonlyargs": [],
    "name": "writerow",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Mapping[_T, Any]]",
      "arg": "rowdicts"
     }
    ],
    "className": "csv.DictWriter",
    "kwonlyargs": [],
    "name": "writerows",
    "returns": "None"
   }
  ]
 },
 {
  "className": "csv.Sniffer",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "csv.Sniffer",
    "name": "preferred"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "csv.Sniffer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sample"
     },
     {
      "annotation": "(str | None)",
      "arg": "delimiters"
     }
    ],
    "className": "csv.Sniffer",
    "kwonlyargs": [],
    "name": "sniff",
    "returns": "type[Dialect]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sample"
     }
    ],
    "className": "csv.Sniffer",
    "kwonlyargs": [],
    "name": "has_header",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "ctypes.CDLL",
  "fields": [
   {
    "annotation": "ClassVar[int]",
    "className": "ctypes.CDLL",
    "name": "_func_flags_"
   },
   {
    "annotation": "ClassVar[_CData]",
    "className": "ctypes.CDLL",
    "name": "_func_restype_"
   },
   {
    "annotation": "str",
    "className": "ctypes.CDLL",
    "name": "_name"
   },
   {
    "annotation": "int",
    "className": "ctypes.CDLL",
    "name": "_handle"
   },
   {
    "annotation": "type[_FuncPointer]",
    "className": "ctypes.CDLL",
    "name": "_FuncPtr"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "ctypes.CDLL",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "_NamedFuncPointer"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name_or_ordinal"
     }
    ],
    "className": "ctypes.CDLL",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_NamedFuncPointer"
   }
  ]
 },
 {
  "className": "ctypes.PyDLL",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.LibraryLoader",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[_DLLT]",
      "arg": "dlltype"
     }
    ],
    "className": "ctypes.LibraryLoader",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "ctypes.LibraryLoader",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "_DLLT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "ctypes.LibraryLoader",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_DLLT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "ctypes.LibraryLoader",
    "kwonlyargs": [],
    "name": "LoadLibrary",
    "returns": "_DLLT"
   }
  ]
 },
 {
  "className": "ctypes.ArgumentError",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.pointer",
  "fields": [
   {
    "annotation": "type[_CT]",
    "className": "ctypes.pointer",
    "name": "_type_"
   },
   {
    "annotation": "_CT",
    "className": "ctypes.pointer",
    "name": "contents"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_CT",
      "arg": "arg"
     }
    ],
    "className": "ctypes.pointer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__i"
     }
    ],
    "className": "ctypes.pointer",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_CT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     }
    ],
    "className": "ctypes.pointer",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "list[_CT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__i"
     },
     {
      "annotation": "_CT",
      "arg": "__o"
     }
    ],
    "className": "ctypes.pointer",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     },
     {
      "annotation": "Iterable[_CT]",
      "arg": "__o"
     }
    ],
    "className": "ctypes.pointer",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ctypes.c_byte",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_char",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | bytes)",
      "arg": "value"
     }
    ],
    "className": "ctypes.c_char",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ctypes.c_char_p",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | bytes | None)",
      "arg": "value"
     }
    ],
    "className": "ctypes.c_char_p",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ctypes.c_double",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_longdouble",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_float",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_int",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_int8",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_int16",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_int32",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_int64",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_long",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_longlong",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_short",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_size_t",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_ssize_t",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_ubyte",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_uint",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_uint8",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_uint16",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_uint32",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_uint64",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_ulong",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_ulonglong",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_ushort",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_void_p",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_wchar",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.c_wchar_p",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | str | None)",
      "arg": "value"
     }
    ],
    "className": "ctypes.c_wchar_p",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ctypes.c_bool",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "value"
     }
    ],
    "className": "ctypes.c_bool",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ctypes.py_object",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.Union",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.Structure",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.BigEndianStructure",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.LittleEndianStructure",
  "fields": [],
  "methods": []
 },
 {
  "className": "ctypes.Array",
  "fields": [
   {
    "annotation": "bytes",
    "className": "ctypes.Array",
    "name": "raw"
   },
   {
    "annotation": "Any",
    "className": "ctypes.Array",
    "name": "value"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "_length_",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "value"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "_length_",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "_type_",
    "returns": "type[_CT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[_CT]",
      "arg": "value"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "_type_",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__i"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "list[Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__i"
     },
     {
      "annotation": "Any",
      "arg": "__o"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "__s"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "__o"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ctypes.Array",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "pipes.Template",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pipes.Template",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pipes.Template",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pipes.Template",
    "kwonlyargs": [],
    "name": "clone",
    "returns": "Template"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "flag"
     }
    ],
    "className": "pipes.Template",
    "kwonlyargs": [],
    "name": "debug",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "str",
      "arg": "kind"
     }
    ],
    "className": "pipes.Template",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "str",
      "arg": "kind"
     }
    ],
    "className": "pipes.Template",
    "kwonlyargs": [],
    "name": "prepend",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "file"
     },
     {
      "annotation": "str",
      "arg": "rw"
     }
    ],
    "className": "pipes.Template",
    "kwonlyargs": [],
    "name": "open",
    "returns": "os._wrap_close"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "infile"
     },
     {
      "annotation": "str",
      "arg": "outfile"
     }
    ],
    "className": "pipes.Template",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "int"
   }
  ]
 },
 {
  "className": "turtle.ScrolledCanvas",
  "fields": [
   {
    "annotation": "str",
    "className": "turtle.ScrolledCanvas",
    "name": "bg"
   },
   {
    "annotation": "Scrollbar",
    "className": "turtle.ScrolledCanvas",
    "name": "hscroll"
   },
   {
    "annotation": "Scrollbar",
    "className": "turtle.ScrolledCanvas",
    "name": "vscroll"
   },
   {
    "annotation": "int",
    "className": "turtle.ScrolledCanvas",
    "name": "canvwidth"
   },
   {
    "annotation": "int",
    "className": "turtle.ScrolledCanvas",
    "name": "canvheight"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Misc | None)",
      "arg": "master"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "int",
      "arg": "height"
     },
     {
      "annotation": "int",
      "arg": "canvwidth"
     },
     {
      "annotation": "int",
      "arg": "canvheight"
     }
    ],
    "className": "turtle.ScrolledCanvas",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "canvwidth"
     },
     {
      "annotation": "(int | None)",
      "arg": "canvheight"
     },
     {
      "annotation": "(str | None)",
      "arg": "bg"
     }
    ],
    "className": "turtle.ScrolledCanvas",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   }
  ]
 },
 {
  "className": "turtle.TurtleScreenBase",
  "fields": [
   {
    "annotation": "Canvas",
    "className": "turtle.TurtleScreenBase",
    "name": "cv"
   },
   {
    "annotation": "int",
    "className": "turtle.TurtleScreenBase",
    "name": "canvwidth"
   },
   {
    "annotation": "int",
    "className": "turtle.TurtleScreenBase",
    "name": "canvheight"
   },
   {
    "annotation": "float",
    "className": "turtle.TurtleScreenBase",
    "name": "xscale"
   },
   {
    "annotation": "float",
    "className": "turtle.TurtleScreenBase",
    "name": "yscale"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Canvas",
      "arg": "cv"
     }
    ],
    "className": "turtle.TurtleScreenBase",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreenBase",
    "kwonlyargs": [],
    "name": "mainloop",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "str",
      "arg": "prompt"
     }
    ],
    "className": "turtle.TurtleScreenBase",
    "kwonlyargs": [],
    "name": "textinput",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "str",
      "arg": "prompt"
     },
     {
      "annotation": "(float | None)",
      "arg": "default"
     },
     {
      "annotation": "(float | None)",
      "arg": "minval"
     },
     {
      "annotation": "(float | None)",
      "arg": "maxval"
     }
    ],
    "className": "turtle.TurtleScreenBase",
    "kwonlyargs": [],
    "name": "numinput",
    "returns": "(float | None)"
   }
  ]
 },
 {
  "className": "turtle.Terminator",
  "fields": [],
  "methods": []
 },
 {
  "className": "turtle.TurtleGraphicsError",
  "fields": [],
  "methods": []
 },
 {
  "className": "turtle.Shape",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "type_"
     },
     {
      "annotation": "(_PolygonCoords | PhotoImage | None)",
      "arg": "data"
     }
    ],
    "className": "turtle.Shape",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_PolygonCoords",
      "arg": "poly"
     },
     {
      "annotation": "_Color",
      "arg": "fill"
     },
     {
      "annotation": "(_Color | None)",
      "arg": "outline"
     }
    ],
    "className": "turtle.Shape",
    "kwonlyargs": [],
    "name": "addcomponent",
    "returns": "None"
   }
  ]
 },
 {
  "className": "turtle.TurtleScreen",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Canvas",
      "arg": "cv"
     },
     {
      "annotation": "str",
      "arg": "mode"
     },
     {
      "annotation": "float",
      "arg": "colormode"
     },
     {
      "annotation": "int",
      "arg": "delay"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "mode"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "mode",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mode"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "mode",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "llx"
     },
     {
      "annotation": "float",
      "arg": "lly"
     },
     {
      "annotation": "float",
      "arg": "urx"
     },
     {
      "annotation": "float",
      "arg": "ury"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "setworldcoordinates",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(_PolygonCoords | Shape | None)",
      "arg": "shape"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "register_shape",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "cmode"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "colormode",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "cmode"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "colormode",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "turtles",
    "returns": "list[Turtle]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "bgcolor",
    "returns": "_AnyColor"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Color",
      "arg": "color"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "bgcolor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "r"
     },
     {
      "annotation": "float",
      "arg": "g"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "bgcolor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "n"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "tracer",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     },
     {
      "annotation": "(int | None)",
      "arg": "delay"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "tracer",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "delay"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "delay",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "delay"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "delay",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "window_width",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "window_height",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "getcanvas",
    "returns": "Canvas"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "getshapes",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[float, float], Any]",
      "arg": "fun"
     },
     {
      "annotation": "int",
      "arg": "btn"
     },
     {
      "annotation": "(Any | None)",
      "arg": "add"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "onclick",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[], Any]",
      "arg": "fun"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "onkey",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "xdummy"
     },
     {
      "annotation": "(float | None)",
      "arg": "ydummy"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "listen",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[], Any]",
      "arg": "fun"
     },
     {
      "annotation": "int",
      "arg": "t"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "ontimer",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "picname"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "bgpic",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "picname"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "bgpic",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "canvwidth"
     },
     {
      "annotation": "None",
      "arg": "canvheight"
     },
     {
      "annotation": "None",
      "arg": "bg"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "screensize",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "canvwidth"
     },
     {
      "annotation": "int",
      "arg": "canvheight"
     },
     {
      "annotation": "(_Color | None)",
      "arg": "bg"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "screensize",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[], Any]",
      "arg": "fun"
     },
     {
      "annotation": "(str | None)",
      "arg": "key"
     }
    ],
    "className": "turtle.TurtleScreen",
    "kwonlyargs": [],
    "name": "onkeypress",
    "returns": "None"
   }
  ]
 },
 {
  "className": "turtle.TNavigator",
  "fields": [
   {
    "annotation": "dict[str, Vec2D]",
    "className": "turtle.TNavigator",
    "name": "START_ORIENTATION"
   },
   {
    "annotation": "str",
    "className": "turtle.TNavigator",
    "name": "DEFAULT_MODE"
   },
   {
    "annotation": "int",
    "className": "turtle.TNavigator",
    "name": "DEFAULT_ANGLEOFFSET"
   },
   {
    "annotation": "int",
    "className": "turtle.TNavigator",
    "name": "DEFAULT_ANGLEORIENT"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "mode"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "fullcircle"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "degrees",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "radians",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "distance"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "forward",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "distance"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "back",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "angle"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "right",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "angle"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "left",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "pos",
    "returns": "Vec2D"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "xcor",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "ycor",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[float, float]",
      "arg": "x"
     },
     {
      "annotation": "None",
      "arg": "y"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "goto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x"
     },
     {
      "annotation": "float",
      "arg": "y"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "goto",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "home",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "setx",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "y"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "sety",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(TNavigator | tuple[float, float])",
      "arg": "x"
     },
     {
      "annotation": "None",
      "arg": "y"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "distance",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x"
     },
     {
      "annotation": "float",
      "arg": "y"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "distance",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(TNavigator | tuple[float, float])",
      "arg": "x"
     },
     {
      "annotation": "None",
      "arg": "y"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "towards",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x"
     },
     {
      "annotation": "float",
      "arg": "y"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "towards",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "heading",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "to_angle"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "setheading",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "radius"
     },
     {
      "annotation": "(float | None)",
      "arg": "extent"
     },
     {
      "annotation": "(int | None)",
      "arg": "steps"
     }
    ],
    "className": "turtle.TNavigator",
    "kwonlyargs": [],
    "name": "circle",
    "returns": "None"
   }
  ]
 },
 {
  "className": "turtle.TPen",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "resizemode"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "rmode"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "resizemode",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "rmode"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "resizemode",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "width"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "pensize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "pensize",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "penup",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "pendown",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "isdown",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "speed"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "speed",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Speed",
      "arg": "speed"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "speed",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "pencolor",
    "returns": "_AnyColor"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Color",
      "arg": "color"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "pencolor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "r"
     },
     {
      "annotation": "float",
      "arg": "g"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "pencolor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "fillcolor",
    "returns": "_AnyColor"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Color",
      "arg": "color"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "fillcolor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "r"
     },
     {
      "annotation": "float",
      "arg": "g"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "fillcolor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "color",
    "returns": "tuple[_AnyColor, _AnyColor]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Color",
      "arg": "color"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "color",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "r"
     },
     {
      "annotation": "float",
      "arg": "g"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "color",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Color",
      "arg": "color1"
     },
     {
      "annotation": "_Color",
      "arg": "color2"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "color",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "showturtle",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "hideturtle",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "isvisible",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [],
    "name": "pen",
    "returns": "_PenState"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_PenState | None)",
      "arg": "pen"
     }
    ],
    "className": "turtle.TPen",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "shown"
     },
     {
      "annotation": "bool",
      "arg": "pendown"
     },
     {
      "annotation": "_Color",
      "arg": "pencolor"
     },
     {
      "annotation": "_Color",
      "arg": "fillcolor"
     },
     {
      "annotation": "int",
      "arg": "pensize"
     },
     {
      "annotation": "int",
      "arg": "speed"
     },
     {
      "annotation": "str",
      "arg": "resizemode"
     },
     {
      "annotation": "tuple[float, float]",
      "arg": "stretchfactor"
     },
     {
      "annotation": "int",
      "arg": "outline"
     },
     {
      "annotation": "float",
      "arg": "tilt"
     }
    ],
    "name": "pen",
    "returns": "None"
   }
  ]
 },
 {
  "className": "turtle.RawTurtle",
  "fields": [
   {
    "annotation": "TurtleScreen",
    "className": "turtle.RawTurtle",
    "name": "screen"
   },
   {
    "annotation": "ClassVar[list[TurtleScreen]]",
    "className": "turtle.RawTurtle",
    "name": "screens"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Canvas | TurtleScreen | None)",
      "arg": "canvas"
     },
     {
      "annotation": "str",
      "arg": "shape"
     },
     {
      "annotation": "int",
      "arg": "undobuffersize"
     },
     {
      "annotation": "bool",
      "arg": "visible"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "setundobuffer",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "undobufferentries",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "clone",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "name"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "shape",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "shape",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "shapesize",
    "returns": "tuple[float, float, float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "stretch_wid"
     },
     {
      "annotation": "(float | None)",
      "arg": "stretch_len"
     },
     {
      "annotation": "(float | None)",
      "arg": "outline"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "shapesize",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "shear"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "shearfactor",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "shear"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "shearfactor",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "shapetransform",
    "returns": "tuple[float, float, float, float]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "t11"
     },
     {
      "annotation": "(float | None)",
      "arg": "t12"
     },
     {
      "annotation": "(float | None)",
      "arg": "t21"
     },
     {
      "annotation": "(float | None)",
      "arg": "t22"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "shapetransform",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "get_shapepoly",
    "returns": "(_PolygonCoords | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "angle"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "settiltangle",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "angle"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "tiltangle",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "angle"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "tiltangle",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "angle"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "tilt",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "stamp",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | tuple[int, ...])",
      "arg": "stampid"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "clearstamp",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "n"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "clearstamps",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "filling",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "begin_fill",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "end_fill",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "size"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "dot",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "arg"
     },
     {
      "annotation": "bool",
      "arg": "move"
     },
     {
      "annotation": "str",
      "arg": "align"
     },
     {
      "annotation": "tuple[str, int, str]",
      "arg": "font"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "write",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "begin_poly",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "end_poly",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "get_poly",
    "returns": "(_PolygonCoords | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "getscreen",
    "returns": "TurtleScreen"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "getturtle",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[float, float], Any]",
      "arg": "fun"
     },
     {
      "annotation": "int",
      "arg": "btn"
     },
     {
      "annotation": "(bool | None)",
      "arg": "add"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "onclick",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[float, float], Any]",
      "arg": "fun"
     },
     {
      "annotation": "int",
      "arg": "btn"
     },
     {
      "annotation": "(bool | None)",
      "arg": "add"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "onrelease",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[float, float], Any]",
      "arg": "fun"
     },
     {
      "annotation": "int",
      "arg": "btn"
     },
     {
      "annotation": "(bool | None)",
      "arg": "add"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "ondrag",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "turtle.RawTurtle",
    "kwonlyargs": [],
    "name": "undo",
    "returns": "None"
   }
  ]
 },
 {
  "className": "turtle.Turtle",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "shape"
     },
     {
      "annotation": "int",
      "arg": "undobuffersize"
     },
     {
      "annotation": "bool",
      "arg": "visible"
     }
    ],
    "className": "turtle.Turtle",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "_py_abc.ABCMeta",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "__mcls"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "tuple[type[Any], ...]",
      "arg": "__bases"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "__namespace"
     }
    ],
    "className": "_py_abc.ABCMeta",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "type[_T]",
      "arg": "subclass"
     }
    ],
    "className": "_py_abc.ABCMeta",
    "kwonlyargs": [],
    "name": "register",
    "returns": "type[_T]"
   }
  ]
 },
 {
  "className": "dataclasses.KW_ONLY",
  "fields": [],
  "methods": []
 },
 {
  "className": "dataclasses.Field",
  "fields": [
   {
    "annotation": "str",
    "className": "dataclasses.Field",
    "name": "name"
   },
   {
    "annotation": "Type[_T]",
    "className": "dataclasses.Field",
    "name": "type"
   },
   {
    "annotation": "(_T | Literal[_MISSING_TYPE.MISSING])",
    "className": "dataclasses.Field",
    "name": "default"
   },
   {
    "annotation": "(_DefaultFactory[_T] | Literal[_MISSING_TYPE.MISSING])",
    "className": "dataclasses.Field",
    "name": "default_factory"
   },
   {
    "annotation": "bool",
    "className": "dataclasses.Field",
    "name": "repr"
   },
   {
    "annotation": "(bool | None)",
    "className": "dataclasses.Field",
    "name": "hash"
   },
   {
    "annotation": "bool",
    "className": "dataclasses.Field",
    "name": "init"
   },
   {
    "annotation": "bool",
    "className": "dataclasses.Field",
    "name": "compare"
   },
   {
    "annotation": "types.MappingProxyType[Any, Any]",
    "className": "dataclasses.Field",
    "name": "metadata"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Type[Any]",
      "arg": "owner"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "dataclasses.Field",
    "kwonlyargs": [],
    "name": "__set_name__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "dataclasses.FrozenInstanceError",
  "fields": [],
  "methods": []
 },
 {
  "className": "dataclasses.InitVar",
  "fields": [
   {
    "annotation": "Type[_T]",
    "className": "dataclasses.InitVar",
    "name": "type"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Type[_T]",
      "arg": "type"
     }
    ],
    "className": "dataclasses.InitVar",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pkgutil.ModuleInfo",
  "fields": [
   {
    "annotation": "(MetaPathFinder | PathEntryFinder)",
    "className": "pkgutil.ModuleInfo",
    "name": "module_finder"
   },
   {
    "annotation": "str",
    "className": "pkgutil.ModuleInfo",
    "name": "name"
   },
   {
    "annotation": "bool",
    "className": "pkgutil.ModuleInfo",
    "name": "ispkg"
   }
  ],
  "methods": []
 },
 {
  "className": "pkgutil.ImpImporter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "path"
     }
    ],
    "className": "pkgutil.ImpImporter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pkgutil.ImpLoader",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fullname"
     },
     {
      "annotation": "IO[str]",
      "arg": "file"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "tuple[str, str, int]",
      "arg": "etc"
     }
    ],
    "className": "pkgutil.ImpLoader",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "types.FunctionType",
  "fields": [
   {
    "annotation": "CodeType",
    "className": "types.FunctionType",
    "name": "__code__"
   },
   {
    "annotation": "(tuple[Any, ...] | None)",
    "className": "types.FunctionType",
    "name": "__defaults__"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "types.FunctionType",
    "name": "__dict__"
   },
   {
    "annotation": "str",
    "className": "types.FunctionType",
    "name": "__name__"
   },
   {
    "annotation": "str",
    "className": "types.FunctionType",
    "name": "__qualname__"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "types.FunctionType",
    "name": "__annotations__"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "types.FunctionType",
    "name": "__kwdefaults__"
   },
   {
    "annotation": "str",
    "className": "types.FunctionType",
    "name": "__module__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FunctionType",
    "kwonlyargs": [],
    "name": "__closure__",
    "returns": "(tuple[_Cell, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FunctionType",
    "kwonlyargs": [],
    "name": "__globals__",
    "returns": "dict[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "CodeType",
      "arg": "code"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "globals"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(tuple[object, ...] | None)",
      "arg": "argdefs"
     },
     {
      "annotation": "(tuple[_Cell, ...] | None)",
      "arg": "closure"
     }
    ],
    "className": "types.FunctionType",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FunctionType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "obj"
     },
     {
      "annotation": "type",
      "arg": "type"
     }
    ],
    "className": "types.FunctionType",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "FunctionType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "obj"
     },
     {
      "annotation": "(type | None)",
      "arg": "type"
     }
    ],
    "className": "types.FunctionType",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "MethodType"
   }
  ]
 },
 {
  "className": "types.CodeType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_argcount",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_kwonlyargcount",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_nlocals",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_stacksize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_flags",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_code",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_consts",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_names",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_varnames",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_filename",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_firstlineno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_lnotab",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_freevars",
    "returns": "tuple[str, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CodeType",
    "kwonlyargs": [],
    "name": "co_cellvars",
    "returns": "tuple[str, ...]"
   }
  ]
 },
 {
  "className": "types.MappingProxyType",
  "fields": [
   {
    "annotation": "ClassVar[None]",
    "className": "types.MappingProxyType",
    "name": "__hash__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsKeysAndGetItem[_KT, _VT_co]",
      "arg": "mapping"
     }
    ],
    "className": "types.MappingProxyType",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__k"
     }
    ],
    "className": "types.MappingProxyType",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_VT_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MappingProxyType",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MappingProxyType",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MappingProxyType",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "dict[_KT, _VT_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MappingProxyType",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "KeysView[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MappingProxyType",
    "kwonlyargs": [],
    "name": "values",
    "returns": "ValuesView[_VT_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MappingProxyType",
    "kwonlyargs": [],
    "name": "items",
    "returns": "ItemsView[_KT, _VT_co]"
   }
  ]
 },
 {
  "className": "types.SimpleNamespace",
  "fields": [
   {
    "annotation": "ClassVar[None]",
    "className": "types.SimpleNamespace",
    "name": "__hash__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.SimpleNamespace",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "types.SimpleNamespace",
    "kwonlyargs": [],
    "name": "__getattribute__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "types.SimpleNamespace",
    "kwonlyargs": [],
    "name": "__setattr__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__name"
     }
    ],
    "className": "types.SimpleNamespace",
    "kwonlyargs": [],
    "name": "__delattr__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "types.ModuleType",
  "fields": [
   {
    "annotation": "str",
    "className": "types.ModuleType",
    "name": "__name__"
   },
   {
    "annotation": "(str | None)",
    "className": "types.ModuleType",
    "name": "__file__"
   },
   {
    "annotation": "(_LoaderProtocol | None)",
    "className": "types.ModuleType",
    "name": "__loader__"
   },
   {
    "annotation": "(str | None)",
    "className": "types.ModuleType",
    "name": "__package__"
   },
   {
    "annotation": "MutableSequence[str]",
    "className": "types.ModuleType",
    "name": "__path__"
   },
   {
    "annotation": "(ModuleSpec | None)",
    "className": "types.ModuleType",
    "name": "__spec__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.ModuleType",
    "kwonlyargs": [],
    "name": "__dict__",
    "returns": "dict[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "doc"
     }
    ],
    "className": "types.ModuleType",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "types.ModuleType",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "types.GeneratorType",
  "fields": [
   {
    "annotation": "str",
    "className": "types.GeneratorType",
    "name": "__name__"
   },
   {
    "annotation": "str",
    "className": "types.GeneratorType",
    "name": "__qualname__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "gi_code",
    "returns": "CodeType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "gi_frame",
    "returns": "FrameType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "gi_running",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "gi_yieldfrom",
    "returns": "(GeneratorType[_T_co, _T_contra, Any] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "GeneratorType[_T_co, _T_contra, _V_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T_contra",
      "arg": "__arg"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "send",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[BaseException]",
      "arg": "__typ"
     },
     {
      "annotation": "(BaseException | object)",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "throw",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BaseException",
      "arg": "__typ"
     },
     {
      "annotation": "None",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "types.GeneratorType",
    "kwonlyargs": [],
    "name": "throw",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "types.AsyncGeneratorType",
  "fields": [
   {
    "annotation": "str",
    "className": "types.AsyncGeneratorType",
    "name": "__name__"
   },
   {
    "annotation": "str",
    "className": "types.AsyncGeneratorType",
    "name": "__qualname__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.AsyncGeneratorType",
    "kwonlyargs": [],
    "name": "ag_await",
    "returns": "(Awaitable[Any] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.AsyncGeneratorType",
    "kwonlyargs": [],
    "name": "ag_frame",
    "returns": "FrameType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.AsyncGeneratorType",
    "kwonlyargs": [],
    "name": "ag_running",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.AsyncGeneratorType",
    "kwonlyargs": [],
    "name": "ag_code",
    "returns": "CodeType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.AsyncGeneratorType",
    "kwonlyargs": [],
    "name": "__aiter__",
    "returns": "AsyncGeneratorType[_T_co, _T_contra]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.AsyncGeneratorType",
    "kwonlyargs": [],
    "name": "__anext__",
    "returns": "Coroutine[Any, Any, _T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T_contra",
      "arg": "__val"
     }
    ],
    "className": "types.AsyncGeneratorType",
    "kwonlyargs": [],
    "name": "asend",
    "returns": "Coroutine[Any, Any, _T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.AsyncGeneratorType",
    "kwonlyargs": [],
    "name": "aclose",
    "returns": "Coroutine[Any, Any, None]"
   }
  ]
 },
 {
  "className": "types.CoroutineType",
  "fields": [
   {
    "annotation": "str",
    "className": "types.CoroutineType",
    "name": "__name__"
   },
   {
    "annotation": "str",
    "className": "types.CoroutineType",
    "name": "__qualname__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "cr_await",
    "returns": "(Any | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "cr_code",
    "returns": "CodeType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "cr_frame",
    "returns": "FrameType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "cr_running",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "__await__",
    "returns": "Generator[Any, None, _V_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T_contra",
      "arg": "__arg"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "send",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[BaseException]",
      "arg": "__typ"
     },
     {
      "annotation": "(BaseException | object)",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "throw",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BaseException",
      "arg": "__typ"
     },
     {
      "annotation": "None",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "types.CoroutineType",
    "kwonlyargs": [],
    "name": "throw",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "types.MethodType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodType",
    "kwonlyargs": [],
    "name": "__closure__",
    "returns": "(tuple[_Cell, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodType",
    "kwonlyargs": [],
    "name": "__defaults__",
    "returns": "(tuple[Any, ...] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodType",
    "kwonlyargs": [],
    "name": "__func__",
    "returns": "_StaticFunctionType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodType",
    "kwonlyargs": [],
    "name": "__self__",
    "returns": "object"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodType",
    "kwonlyargs": [],
    "name": "__name__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodType",
    "kwonlyargs": [],
    "name": "__qualname__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., Any]",
      "arg": "__func"
     },
     {
      "annotation": "object",
      "arg": "__obj"
     }
    ],
    "className": "types.MethodType",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "types.BuiltinFunctionType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.BuiltinFunctionType",
    "kwonlyargs": [],
    "name": "__self__",
    "returns": "(object | ModuleType)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.BuiltinFunctionType",
    "kwonlyargs": [],
    "name": "__name__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.BuiltinFunctionType",
    "kwonlyargs": [],
    "name": "__qualname__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.BuiltinFunctionType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "types.WrapperDescriptorType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.WrapperDescriptorType",
    "kwonlyargs": [],
    "name": "__name__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.WrapperDescriptorType",
    "kwonlyargs": [],
    "name": "__qualname__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.WrapperDescriptorType",
    "kwonlyargs": [],
    "name": "__objclass__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.WrapperDescriptorType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     },
     {
      "annotation": "type",
      "arg": "__type"
     }
    ],
    "className": "types.WrapperDescriptorType",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "types.MethodWrapperType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodWrapperType",
    "kwonlyargs": [],
    "name": "__self__",
    "returns": "object"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodWrapperType",
    "kwonlyargs": [],
    "name": "__name__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodWrapperType",
    "kwonlyargs": [],
    "name": "__qualname__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodWrapperType",
    "kwonlyargs": [],
    "name": "__objclass__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodWrapperType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__other"
     }
    ],
    "className": "types.MethodWrapperType",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__other"
     }
    ],
    "className": "types.MethodWrapperType",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "types.MethodDescriptorType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodDescriptorType",
    "kwonlyargs": [],
    "name": "__name__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodDescriptorType",
    "kwonlyargs": [],
    "name": "__qualname__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodDescriptorType",
    "kwonlyargs": [],
    "name": "__objclass__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MethodDescriptorType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "obj"
     },
     {
      "annotation": "type",
      "arg": "type"
     }
    ],
    "className": "types.MethodDescriptorType",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "types.ClassMethodDescriptorType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.ClassMethodDescriptorType",
    "kwonlyargs": [],
    "name": "__name__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.ClassMethodDescriptorType",
    "kwonlyargs": [],
    "name": "__qualname__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.ClassMethodDescriptorType",
    "kwonlyargs": [],
    "name": "__objclass__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.ClassMethodDescriptorType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "obj"
     },
     {
      "annotation": "type",
      "arg": "type"
     }
    ],
    "className": "types.ClassMethodDescriptorType",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "types.TracebackType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.TracebackType",
    "kwonlyargs": [],
    "name": "tb_frame",
    "returns": "FrameType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.TracebackType",
    "kwonlyargs": [],
    "name": "tb_lasti",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.TracebackType",
    "kwonlyargs": [],
    "name": "tb_lineno",
    "returns": "int"
   }
  ]
 },
 {
  "className": "types.FrameType",
  "fields": [
   {
    "annotation": "(Callable[[FrameType, str, Any], Any] | None)",
    "className": "types.FrameType",
    "name": "f_trace"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FrameType",
    "kwonlyargs": [],
    "name": "f_back",
    "returns": "(FrameType | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FrameType",
    "kwonlyargs": [],
    "name": "f_builtins",
    "returns": "dict[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FrameType",
    "kwonlyargs": [],
    "name": "f_code",
    "returns": "CodeType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FrameType",
    "kwonlyargs": [],
    "name": "f_globals",
    "returns": "dict[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FrameType",
    "kwonlyargs": [],
    "name": "f_lasti",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FrameType",
    "kwonlyargs": [],
    "name": "f_lineno",
    "returns": "(int | Any)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FrameType",
    "kwonlyargs": [],
    "name": "f_locals",
    "returns": "dict[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.FrameType",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   }
  ]
 },
 {
  "className": "types.GetSetDescriptorType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GetSetDescriptorType",
    "kwonlyargs": [],
    "name": "__name__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GetSetDescriptorType",
    "kwonlyargs": [],
    "name": "__qualname__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GetSetDescriptorType",
    "kwonlyargs": [],
    "name": "__objclass__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     },
     {
      "annotation": "type",
      "arg": "__type"
     }
    ],
    "className": "types.GetSetDescriptorType",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__instance"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "types.GetSetDescriptorType",
    "kwonlyargs": [],
    "name": "__set__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     }
    ],
    "className": "types.GetSetDescriptorType",
    "kwonlyargs": [],
    "name": "__delete__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "types.MemberDescriptorType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MemberDescriptorType",
    "kwonlyargs": [],
    "name": "__name__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MemberDescriptorType",
    "kwonlyargs": [],
    "name": "__qualname__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.MemberDescriptorType",
    "kwonlyargs": [],
    "name": "__objclass__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     },
     {
      "annotation": "type",
      "arg": "__type"
     }
    ],
    "className": "types.MemberDescriptorType",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__instance"
     },
     {
      "annotation": "Any",
      "arg": "__value"
     }
    ],
    "className": "types.MemberDescriptorType",
    "kwonlyargs": [],
    "name": "__set__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     }
    ],
    "className": "types.MemberDescriptorType",
    "kwonlyargs": [],
    "name": "__delete__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "types.GenericAlias",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GenericAlias",
    "kwonlyargs": [],
    "name": "__origin__",
    "returns": "type"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GenericAlias",
    "kwonlyargs": [],
    "name": "__args__",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.GenericAlias",
    "kwonlyargs": [],
    "name": "__parameters__",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type",
      "arg": "origin"
     },
     {
      "annotation": "Any",
      "arg": "args"
     }
    ],
    "className": "types.GenericAlias",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "types.GenericAlias",
    "kwonlyargs": [],
    "name": "__getattr__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "types.NoneType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.NoneType",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "Literal[False]"
   }
  ]
 },
 {
  "className": "types.UnionType",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "types.UnionType",
    "kwonlyargs": [],
    "name": "__args__",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     }
    ],
    "className": "types.UnionType",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "UnionType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__obj"
     }
    ],
    "className": "types.UnionType",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "UnionType"
   }
  ]
 },
 {
  "className": "datetime.tzinfo",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(datetime | None)",
      "arg": "__dt"
     }
    ],
    "className": "datetime.tzinfo",
    "kwonlyargs": [],
    "name": "tzname",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(datetime | None)",
      "arg": "__dt"
     }
    ],
    "className": "datetime.tzinfo",
    "kwonlyargs": [],
    "name": "utcoffset",
    "returns": "(timedelta | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(datetime | None)",
      "arg": "__dt"
     }
    ],
    "className": "datetime.tzinfo",
    "kwonlyargs": [],
    "name": "dst",
    "returns": "(timedelta | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "datetime",
      "arg": "__dt"
     }
    ],
    "className": "datetime.tzinfo",
    "kwonlyargs": [],
    "name": "fromutc",
    "returns": "datetime"
   }
  ]
 },
 {
  "className": "datetime.timezone",
  "fields": [
   {
    "annotation": "ClassVar[timezone]",
    "className": "datetime.timezone",
    "name": "utc"
   },
   {
    "annotation": "ClassVar[timezone]",
    "className": "datetime.timezone",
    "name": "min"
   },
   {
    "annotation": "ClassVar[timezone]",
    "className": "datetime.timezone",
    "name": "max"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "offset"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "datetime.timezone",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timezone",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "datetime.date",
  "fields": [
   {
    "annotation": "ClassVar[date]",
    "className": "datetime.date",
    "name": "min"
   },
   {
    "annotation": "ClassVar[date]",
    "className": "datetime.date",
    "name": "max"
   },
   {
    "annotation": "ClassVar[timedelta]",
    "className": "datetime.date",
    "name": "resolution"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     },
     {
      "annotation": "int",
      "arg": "day"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "float",
      "arg": "__timestamp"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "fromtimestamp",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "today",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "fromordinal",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "year",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "month",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "day",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "ctime",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__format"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "strftime",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__fmt"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "__format__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "isoformat",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "timetuple",
    "returns": "struct_time"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "toordinal",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     },
     {
      "annotation": "int",
      "arg": "day"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "replace",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "date",
      "arg": "__other"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "date",
      "arg": "__other"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "date",
      "arg": "__other"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "date",
      "arg": "__other"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "weekday",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.date",
    "kwonlyargs": [],
    "name": "isoweekday",
    "returns": "int"
   }
  ]
 },
 {
  "className": "datetime.time",
  "fields": [
   {
    "annotation": "ClassVar[time]",
    "className": "datetime.time",
    "name": "min"
   },
   {
    "annotation": "ClassVar[time]",
    "className": "datetime.time",
    "name": "max"
   },
   {
    "annotation": "ClassVar[timedelta]",
    "className": "datetime.time",
    "name": "resolution"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "int",
      "arg": "hour"
     },
     {
      "annotation": "int",
      "arg": "minute"
     },
     {
      "annotation": "int",
      "arg": "second"
     },
     {
      "annotation": "int",
      "arg": "microsecond"
     },
     {
      "annotation": "(_tzinfo | None)",
      "arg": "tzinfo"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [
     {
      "annotation": "int",
      "arg": "fold"
     }
    ],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "hour",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "minute",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "second",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "microsecond",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "tzinfo",
    "returns": "(_tzinfo | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "fold",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "time",
      "arg": "__other"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "time",
      "arg": "__other"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "time",
      "arg": "__other"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "time",
      "arg": "__other"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "timespec"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "isoformat",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__format"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "strftime",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__fmt"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "__format__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "utcoffset",
    "returns": "(timedelta | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "tzname",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [],
    "name": "dst",
    "returns": "(timedelta | None)"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "hour"
     },
     {
      "annotation": "int",
      "arg": "minute"
     },
     {
      "annotation": "int",
      "arg": "second"
     },
     {
      "annotation": "int",
      "arg": "microsecond"
     },
     {
      "annotation": "(_tzinfo | None)",
      "arg": "tzinfo"
     }
    ],
    "className": "datetime.time",
    "kwonlyargs": [
     {
      "annotation": "int",
      "arg": "fold"
     }
    ],
    "name": "replace",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "datetime.timedelta",
  "fields": [
   {
    "annotation": "ClassVar[timedelta]",
    "className": "datetime.timedelta",
    "name": "min"
   },
   {
    "annotation": "ClassVar[timedelta]",
    "className": "datetime.timedelta",
    "name": "max"
   },
   {
    "annotation": "ClassVar[timedelta]",
    "className": "datetime.timedelta",
    "name": "resolution"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "float",
      "arg": "days"
     },
     {
      "annotation": "float",
      "arg": "seconds"
     },
     {
      "annotation": "float",
      "arg": "microseconds"
     },
     {
      "annotation": "float",
      "arg": "milliseconds"
     },
     {
      "annotation": "float",
      "arg": "minutes"
     },
     {
      "annotation": "float",
      "arg": "hours"
     },
     {
      "annotation": "float",
      "arg": "weeks"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "days",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "seconds",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "microseconds",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "total_seconds",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__abs__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__floordiv__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__floordiv__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "timedelta"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__divmod__",
    "returns": "tuple[int, timedelta]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "timedelta",
      "arg": "__other"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.timedelta",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "datetime.datetime",
  "fields": [
   {
    "annotation": "ClassVar[datetime]",
    "className": "datetime.datetime",
    "name": "min"
   },
   {
    "annotation": "ClassVar[datetime]",
    "className": "datetime.datetime",
    "name": "max"
   },
   {
    "annotation": "ClassVar[timedelta]",
    "className": "datetime.datetime",
    "name": "resolution"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     },
     {
      "annotation": "int",
      "arg": "day"
     },
     {
      "annotation": "int",
      "arg": "hour"
     },
     {
      "annotation": "int",
      "arg": "minute"
     },
     {
      "annotation": "int",
      "arg": "second"
     },
     {
      "annotation": "int",
      "arg": "microsecond"
     },
     {
      "annotation": "(_tzinfo | None)",
      "arg": "tzinfo"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [
     {
      "annotation": "int",
      "arg": "fold"
     }
    ],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "hour",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "minute",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "second",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "microsecond",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "tzinfo",
    "returns": "(_tzinfo | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "fold",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "float",
      "arg": "__timestamp"
     },
     {
      "annotation": "(_tzinfo | None)",
      "arg": "tz"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "fromtimestamp",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "float",
      "arg": "__t"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "utcfromtimestamp",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "utcnow",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "_date",
      "arg": "date"
     },
     {
      "annotation": "_time",
      "arg": "time"
     },
     {
      "annotation": "(_tzinfo | None)",
      "arg": "tzinfo"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "combine",
    "returns": "datetime"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "timestamp",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "utctimetuple",
    "returns": "struct_time"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "date",
    "returns": "_date"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "time",
    "returns": "_time"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "timetz",
    "returns": "_time"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "year"
     },
     {
      "annotation": "int",
      "arg": "month"
     },
     {
      "annotation": "int",
      "arg": "day"
     },
     {
      "annotation": "int",
      "arg": "hour"
     },
     {
      "annotation": "int",
      "arg": "minute"
     },
     {
      "annotation": "int",
      "arg": "second"
     },
     {
      "annotation": "int",
      "arg": "microsecond"
     },
     {
      "annotation": "(_tzinfo | None)",
      "arg": "tzinfo"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [
     {
      "annotation": "int",
      "arg": "fold"
     }
    ],
    "name": "replace",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "ctime",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "sep"
     },
     {
      "annotation": "str",
      "arg": "timespec"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "isoformat",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "__date_string"
     },
     {
      "annotation": "str",
      "arg": "__format"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "strptime",
    "returns": "datetime"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "utcoffset",
    "returns": "(timedelta | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "tzname",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "dst",
    "returns": "(timedelta | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "datetime",
      "arg": "__other"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "datetime",
      "arg": "__other"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "datetime",
      "arg": "__other"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "datetime",
      "arg": "__other"
     }
    ],
    "className": "datetime.datetime",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "platform.uname_result",
  "fields": [
   {
    "annotation": "str",
    "className": "platform.uname_result",
    "name": "system"
   },
   {
    "annotation": "str",
    "className": "platform.uname_result",
    "name": "node"
   },
   {
    "annotation": "str",
    "className": "platform.uname_result",
    "name": "release"
   },
   {
    "annotation": "str",
    "className": "platform.uname_result",
    "name": "version"
   },
   {
    "annotation": "str",
    "className": "platform.uname_result",
    "name": "machine"
   },
   {
    "annotation": "str",
    "className": "platform.uname_result",
    "name": "processor"
   }
  ],
  "methods": []
 },
 {
  "className": "typing.TypeVar",
  "fields": [
   {
    "annotation": "str",
    "className": "typing.TypeVar",
    "name": "__name__"
   },
   {
    "annotation": "(Any | None)",
    "className": "typing.TypeVar",
    "name": "__bound__"
   },
   {
    "annotation": "tuple[Any, ...]",
    "className": "typing.TypeVar",
    "name": "__constraints__"
   },
   {
    "annotation": "bool",
    "className": "typing.TypeVar",
    "name": "__covariant__"
   },
   {
    "annotation": "bool",
    "className": "typing.TypeVar",
    "name": "__contravariant__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "typing.TypeVar",
    "kwonlyargs": [
     {
      "annotation": "(Any | None)",
      "arg": "bound"
     },
     {
      "annotation": "bool",
      "arg": "covariant"
     },
     {
      "annotation": "bool",
      "arg": "contravariant"
     }
    ],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "typing.ParamSpecArgs",
  "fields": [
   {
    "annotation": "ParamSpec",
    "className": "typing.ParamSpecArgs",
    "name": "__origin__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ParamSpec",
      "arg": "origin"
     }
    ],
    "className": "typing.ParamSpecArgs",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "typing.ParamSpecKwargs",
  "fields": [
   {
    "annotation": "ParamSpec",
    "className": "typing.ParamSpecKwargs",
    "name": "__origin__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ParamSpec",
      "arg": "origin"
     }
    ],
    "className": "typing.ParamSpecKwargs",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "typing.ParamSpec",
  "fields": [
   {
    "annotation": "str",
    "className": "typing.ParamSpec",
    "name": "__name__"
   },
   {
    "annotation": "(Any | None)",
    "className": "typing.ParamSpec",
    "name": "__bound__"
   },
   {
    "annotation": "bool",
    "className": "typing.ParamSpec",
    "name": "__covariant__"
   },
   {
    "annotation": "bool",
    "className": "typing.ParamSpec",
    "name": "__contravariant__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "typing.ParamSpec",
    "kwonlyargs": [
     {
      "annotation": "(Any | None)",
      "arg": "bound"
     },
     {
      "annotation": "bool",
      "arg": "contravariant"
     },
     {
      "annotation": "bool",
      "arg": "covariant"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.ParamSpec",
    "kwonlyargs": [],
    "name": "args",
    "returns": "ParamSpecArgs"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.ParamSpec",
    "kwonlyargs": [],
    "name": "kwargs",
    "returns": "ParamSpecKwargs"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "right"
     }
    ],
    "className": "typing.ParamSpec",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "_SpecialForm"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "left"
     }
    ],
    "className": "typing.ParamSpec",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "_SpecialForm"
   }
  ]
 },
 {
  "className": "typing.NewType",
  "fields": [
   {
    "annotation": "type",
    "className": "typing.NewType",
    "name": "__supertype__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "Any",
      "arg": "tp"
     }
    ],
    "className": "typing.NewType",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "x"
     }
    ],
    "className": "typing.NewType",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "typing.NewType",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "_SpecialForm"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "other"
     }
    ],
    "className": "typing.NewType",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "_SpecialForm"
   }
  ]
 },
 {
  "className": "typing.SupportsInt",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.SupportsInt",
    "kwonlyargs": [],
    "name": "__int__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "typing.SupportsFloat",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.SupportsFloat",
    "kwonlyargs": [],
    "name": "__float__",
    "returns": "float"
   }
  ]
 },
 {
  "className": "typing.SupportsComplex",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.SupportsComplex",
    "kwonlyargs": [],
    "name": "__complex__",
    "returns": "complex"
   }
  ]
 },
 {
  "className": "typing.SupportsBytes",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.SupportsBytes",
    "kwonlyargs": [],
    "name": "__bytes__",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "typing.SupportsIndex",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.SupportsIndex",
    "kwonlyargs": [],
    "name": "__index__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "typing.SupportsAbs",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.SupportsAbs",
    "kwonlyargs": [],
    "name": "__abs__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "typing.SupportsRound",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.SupportsRound",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__ndigits"
     }
    ],
    "className": "typing.SupportsRound",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "_T_co"
   }
  ]
 },
 {
  "className": "typing.Sized",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Sized",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "typing.Hashable",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Hashable",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "typing.Iterable",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Iterable",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_T_co]"
   }
  ]
 },
 {
  "className": "typing.Iterator",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Iterator",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Iterator",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_T_co]"
   }
  ]
 },
 {
  "className": "typing.Reversible",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Reversible",
    "kwonlyargs": [],
    "name": "__reversed__",
    "returns": "Iterator[_T_co]"
   }
  ]
 },
 {
  "className": "typing.Generator",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T_contra",
      "arg": "__value"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "send",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Type[BaseException]",
      "arg": "__typ"
     },
     {
      "annotation": "(BaseException | object)",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "throw",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BaseException",
      "arg": "__typ"
     },
     {
      "annotation": "None",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "throw",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Generator[_T_co, _T_contra, _V_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "gi_code",
    "returns": "CodeType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "gi_frame",
    "returns": "FrameType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "gi_running",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Generator",
    "kwonlyargs": [],
    "name": "gi_yieldfrom",
    "returns": "(Generator[Any, Any, Any] | None)"
   }
  ]
 },
 {
  "className": "typing.Awaitable",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Awaitable",
    "kwonlyargs": [],
    "name": "__await__",
    "returns": "Generator[Any, None, _T_co]"
   }
  ]
 },
 {
  "className": "typing.Coroutine",
  "fields": [
   {
    "annotation": "str",
    "className": "typing.Coroutine",
    "name": "__name__"
   },
   {
    "annotation": "str",
    "className": "typing.Coroutine",
    "name": "__qualname__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Coroutine",
    "kwonlyargs": [],
    "name": "cr_await",
    "returns": "(Any | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Coroutine",
    "kwonlyargs": [],
    "name": "cr_code",
    "returns": "CodeType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Coroutine",
    "kwonlyargs": [],
    "name": "cr_frame",
    "returns": "FrameType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Coroutine",
    "kwonlyargs": [],
    "name": "cr_running",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T_contra",
      "arg": "__value"
     }
    ],
    "className": "typing.Coroutine",
    "kwonlyargs": [],
    "name": "send",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Type[BaseException]",
      "arg": "__typ"
     },
     {
      "annotation": "(BaseException | object)",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "typing.Coroutine",
    "kwonlyargs": [],
    "name": "throw",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BaseException",
      "arg": "__typ"
     },
     {
      "annotation": "None",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "typing.Coroutine",
    "kwonlyargs": [],
    "name": "throw",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Coroutine",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "typing.AwaitableGenerator",
  "fields": [],
  "methods": []
 },
 {
  "className": "typing.AsyncIterable",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncIterable",
    "kwonlyargs": [],
    "name": "__aiter__",
    "returns": "AsyncIterator[_T_co]"
   }
  ]
 },
 {
  "className": "typing.AsyncIterator",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncIterator",
    "kwonlyargs": [],
    "name": "__anext__",
    "returns": "Awaitable[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncIterator",
    "kwonlyargs": [],
    "name": "__aiter__",
    "returns": "AsyncIterator[_T_co]"
   }
  ]
 },
 {
  "className": "typing.AsyncGenerator",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "__anext__",
    "returns": "Awaitable[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T_contra",
      "arg": "__value"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "asend",
    "returns": "Awaitable[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Type[BaseException]",
      "arg": "__typ"
     },
     {
      "annotation": "(BaseException | object)",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "athrow",
    "returns": "Awaitable[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "BaseException",
      "arg": "__typ"
     },
     {
      "annotation": "None",
      "arg": "__val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__tb"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "athrow",
    "returns": "Awaitable[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "aclose",
    "returns": "Awaitable[None]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "ag_await",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "ag_code",
    "returns": "CodeType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "ag_frame",
    "returns": "FrameType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AsyncGenerator",
    "kwonlyargs": [],
    "name": "ag_running",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "typing.Container",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__x"
     }
    ],
    "className": "typing.Container",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "typing.Collection",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Collection",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "typing.Sequence",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "index"
     }
    ],
    "className": "typing.Sequence",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "index"
     }
    ],
    "className": "typing.Sequence",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "Sequence[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "stop"
     }
    ],
    "className": "typing.Sequence",
    "kwonlyargs": [],
    "name": "index",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "typing.Sequence",
    "kwonlyargs": [],
    "name": "count",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "value"
     }
    ],
    "className": "typing.Sequence",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Sequence",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Sequence",
    "kwonlyargs": [],
    "name": "__reversed__",
    "returns": "Iterator[_T_co]"
   }
  ]
 },
 {
  "className": "typing.MutableSequence",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "index"
     },
     {
      "annotation": "_T",
      "arg": "value"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "insert",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "index"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "index"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "MutableSequence[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "index"
     },
     {
      "annotation": "_T",
      "arg": "value"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "index"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "value"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "index"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "slice",
      "arg": "index"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "value"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "append",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "values"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "extend",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "reverse",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "index"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "value"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "TypeshedSelf",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "values"
     }
    ],
    "className": "typing.MutableSequence",
    "kwonlyargs": [],
    "name": "__iadd__",
    "returns": "TypeshedSelf"
   }
  ]
 },
 {
  "className": "typing.AbstractSet",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "x"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "_hash",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "AbstractSet[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "AbstractSet[_T_co | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "AbstractSet[_T_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "AbstractSet[_T_co | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.AbstractSet",
    "kwonlyargs": [],
    "name": "isdisjoint",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "typing.MutableSet",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "value"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "add",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "value"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "discard",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "value"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "remove",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "TypeshedSelf",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T]",
      "arg": "it"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "__ior__",
    "returns": "TypeshedSelf"
   },
   {
    "args": [
     {
      "annotation": "TypeshedSelf",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[Any]",
      "arg": "it"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "__iand__",
    "returns": "TypeshedSelf"
   },
   {
    "args": [
     {
      "annotation": "TypeshedSelf",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[_T]",
      "arg": "it"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "__ixor__",
    "returns": "TypeshedSelf"
   },
   {
    "args": [
     {
      "annotation": "TypeshedSelf",
      "arg": "self"
     },
     {
      "annotation": "AbstractSet[Any]",
      "arg": "it"
     }
    ],
    "className": "typing.MutableSet",
    "kwonlyargs": [],
    "name": "__isub__",
    "returns": "TypeshedSelf"
   }
  ]
 },
 {
  "className": "typing.MappingView",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[Any, Any]",
      "arg": "mapping"
     }
    ],
    "className": "typing.MappingView",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.MappingView",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "typing.ItemsView",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[_KT_co, _VT_co]",
      "arg": "mapping"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "set[tuple[_KT_co, _VT_co]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__rand__",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "item"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[tuple[_KT_co, _VT_co]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "set[tuple[_KT_co, _VT_co] | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "set[tuple[_KT_co, _VT_co] | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "set[tuple[_KT_co, _VT_co]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "set[tuple[_KT_co, _VT_co] | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.ItemsView",
    "kwonlyargs": [],
    "name": "__rxor__",
    "returns": "set[tuple[_KT_co, _VT_co] | _T]"
   }
  ]
 },
 {
  "className": "typing.KeysView",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[_KT_co, Any]",
      "arg": "mapping"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "set[_KT_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__rand__",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "key"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_KT_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "set[_KT_co | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "set[_KT_co | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "other"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "set[_KT_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "set[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "set[_KT_co | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_T]",
      "arg": "other"
     }
    ],
    "className": "typing.KeysView",
    "kwonlyargs": [],
    "name": "__rxor__",
    "returns": "set[_KT_co | _T]"
   }
  ]
 },
 {
  "className": "typing.ValuesView",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Mapping[Any, _VT_co]",
      "arg": "mapping"
     }
    ],
    "className": "typing.ValuesView",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "value"
     }
    ],
    "className": "typing.ValuesView",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.ValuesView",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_VT_co]"
   }
  ]
 },
 {
  "className": "typing.ContextManager",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.ContextManager",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "_T_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Type[BaseException] | None)",
      "arg": "__exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "__exc_value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__traceback"
     }
    ],
    "className": "typing.ContextManager",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "(bool | None)"
   }
  ]
 },
 {
  "className": "typing.AsyncContextManager",
  "fields": [],
  "methods": []
 },
 {
  "className": "typing.Mapping",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__k"
     }
    ],
    "className": "typing.Mapping",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_VT_co"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     }
    ],
    "className": "typing.Mapping",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_VT_co | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     },
     {
      "annotation": "(_VT_co | _T)",
      "arg": "default"
     }
    ],
    "className": "typing.Mapping",
    "kwonlyargs": [],
    "name": "get",
    "returns": "(_VT_co | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Mapping",
    "kwonlyargs": [],
    "name": "items",
    "returns": "ItemsView[_KT, _VT_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Mapping",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "KeysView[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Mapping",
    "kwonlyargs": [],
    "name": "values",
    "returns": "ValuesView[_VT_co]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__o"
     }
    ],
    "className": "typing.Mapping",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "typing.MutableMapping",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__k"
     },
     {
      "annotation": "_VT",
      "arg": "__v"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__v"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "clear",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     },
     {
      "annotation": "(_VT | _T)",
      "arg": "default"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "(_VT | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "popitem",
    "returns": "tuple[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "MutableMapping[_KT, _T | None]",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "setdefault",
    "returns": "(_T | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "__key"
     },
     {
      "annotation": "_VT",
      "arg": "__default"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "setdefault",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsKeysAndGetItem[_KT, _VT]",
      "arg": "__m"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[tuple[_KT, _VT]]",
      "arg": "__m"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.MutableMapping",
    "kwonlyargs": [],
    "name": "update",
    "returns": "None"
   }
  ]
 },
 {
  "className": "typing.IO",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "mode",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "closed",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "flush",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "isatty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__n"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "read",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "readable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__limit"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__hint"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "readlines",
    "returns": "list[AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__offset"
     },
     {
      "annotation": "int",
      "arg": "__whence"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "seek",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "seekable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "__size"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "truncate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "writable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "__s"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "write",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[AnyStr]",
      "arg": "__lines"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "writelines",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "IO[AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Type[BaseException] | None)",
      "arg": "__t"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "__value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "__traceback"
     }
    ],
    "className": "typing.IO",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "typing.BinaryIO",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.BinaryIO",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "BinaryIO"
   }
  ]
 },
 {
  "className": "typing.TextIO",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.TextIO",
    "kwonlyargs": [],
    "name": "buffer",
    "returns": "BinaryIO"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.TextIO",
    "kwonlyargs": [],
    "name": "encoding",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.TextIO",
    "kwonlyargs": [],
    "name": "errors",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.TextIO",
    "kwonlyargs": [],
    "name": "line_buffering",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.TextIO",
    "kwonlyargs": [],
    "name": "newlines",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.TextIO",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "TextIO"
   }
  ]
 },
 {
  "className": "typing.ByteString",
  "fields": [],
  "methods": []
 },
 {
  "className": "typing.Match",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "pos",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "endpos",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "lastindex",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "lastgroup",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "string",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "re",
    "returns": "Pattern[AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "template"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "expand",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Literal[0]",
      "arg": "__group"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "group",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | int)",
      "arg": "__group"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "group",
    "returns": "(AnyStr | Any)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | int)",
      "arg": "__group1"
     },
     {
      "annotation": "(str | int)",
      "arg": "__group2"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "group",
    "returns": "tuple[AnyStr | Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "groups",
    "returns": "tuple[AnyStr | Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "default"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "groups",
    "returns": "tuple[AnyStr | _T, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "groupdict",
    "returns": "dict[str, AnyStr | Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "default"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "groupdict",
    "returns": "dict[str, AnyStr | _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | str)",
      "arg": "__group"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "start",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | str)",
      "arg": "__group"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "end",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | str)",
      "arg": "__group"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "span",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "regs",
    "returns": "tuple[tuple[int, int], ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Literal[0]",
      "arg": "__key"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | str)",
      "arg": "__key"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "(AnyStr | Any)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "__copy__",
    "returns": "Match[AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__memo"
     }
    ],
    "className": "typing.Match",
    "kwonlyargs": [],
    "name": "__deepcopy__",
    "returns": "Match[AnyStr]"
   }
  ]
 },
 {
  "className": "typing.Pattern",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "flags",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "groupindex",
    "returns": "Mapping[str, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "groups",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "pattern",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "pos"
     },
     {
      "annotation": "int",
      "arg": "endpos"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "search",
    "returns": "(Match[AnyStr] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "pos"
     },
     {
      "annotation": "int",
      "arg": "endpos"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "match",
    "returns": "(Match[AnyStr] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "pos"
     },
     {
      "annotation": "int",
      "arg": "endpos"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "fullmatch",
    "returns": "(Match[AnyStr] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "maxsplit"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "split",
    "returns": "list[AnyStr | Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "pos"
     },
     {
      "annotation": "int",
      "arg": "endpos"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "findall",
    "returns": "list[Any]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "pos"
     },
     {
      "annotation": "int",
      "arg": "endpos"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "finditer",
    "returns": "Iterator[Match[AnyStr]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "repl"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "count"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "sub",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[Match[AnyStr]], AnyStr]",
      "arg": "repl"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "count"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "sub",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "repl"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "count"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "subn",
    "returns": "tuple[AnyStr, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[Match[AnyStr]], AnyStr]",
      "arg": "repl"
     },
     {
      "annotation": "AnyStr",
      "arg": "string"
     },
     {
      "annotation": "int",
      "arg": "count"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "subn",
    "returns": "tuple[AnyStr, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "__copy__",
    "returns": "Pattern[AnyStr]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "__memo"
     }
    ],
    "className": "typing.Pattern",
    "kwonlyargs": [],
    "name": "__deepcopy__",
    "returns": "Pattern[AnyStr]"
   }
  ]
 },
 {
  "className": "typing.NamedTuple",
  "fields": [
   {
    "annotation": "dict[str, Any]",
    "className": "typing.NamedTuple",
    "name": "_field_defaults"
   },
   {
    "annotation": "tuple[str, ...]",
    "className": "typing.NamedTuple",
    "name": "_fields"
   },
   {
    "annotation": "str",
    "className": "typing.NamedTuple",
    "name": "_source"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "typename"
     },
     {
      "annotation": "Iterable[tuple[str, Any]]",
      "arg": "fields"
     }
    ],
    "className": "typing.NamedTuple",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "typename"
     },
     {
      "annotation": "None",
      "arg": "fields"
     }
    ],
    "className": "typing.NamedTuple",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Type[_T]",
      "arg": "cls"
     },
     {
      "annotation": "Iterable[Any]",
      "arg": "iterable"
     }
    ],
    "className": "typing.NamedTuple",
    "kwonlyargs": [],
    "name": "_make",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "TypeshedSelf",
      "arg": "self"
     }
    ],
    "className": "typing.NamedTuple",
    "kwonlyargs": [],
    "name": "_replace",
    "returns": "TypeshedSelf"
   }
  ]
 },
 {
  "className": "typing.ForwardRef",
  "fields": [
   {
    "annotation": "str",
    "className": "typing.ForwardRef",
    "name": "__forward_arg__"
   },
   {
    "annotation": "CodeType",
    "className": "typing.ForwardRef",
    "name": "__forward_code__"
   },
   {
    "annotation": "bool",
    "className": "typing.ForwardRef",
    "name": "__forward_evaluated__"
   },
   {
    "annotation": "(Any | None)",
    "className": "typing.ForwardRef",
    "name": "__forward_value__"
   },
   {
    "annotation": "bool",
    "className": "typing.ForwardRef",
    "name": "__forward_is_argument__"
   },
   {
    "annotation": "bool",
    "className": "typing.ForwardRef",
    "name": "__forward_is_class__"
   },
   {
    "annotation": "(Any | None)",
    "className": "typing.ForwardRef",
    "name": "__forward_module__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "globalns"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "localns"
     }
    ],
    "className": "typing.ForwardRef",
    "kwonlyargs": [],
    "name": "_evaluate",
    "returns": "(Any | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "typing.ForwardRef",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "typing.ForwardRef",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   }
  ]
 },
 {
  "className": "plistlib.PlistFormat",
  "fields": [
   {
    "annotation": "int",
    "className": "plistlib.PlistFormat",
    "name": "FMT_XML"
   },
   {
    "annotation": "int",
    "className": "plistlib.PlistFormat",
    "name": "FMT_BINARY"
   }
  ],
  "methods": []
 },
 {
  "className": "plistlib.UID",
  "fields": [
   {
    "annotation": "int",
    "className": "plistlib.UID",
    "name": "data"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "data"
     }
    ],
    "className": "plistlib.UID",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "plistlib.UID",
    "kwonlyargs": [],
    "name": "__index__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "plistlib.UID",
    "kwonlyargs": [],
    "name": "__reduce__",
    "returns": "tuple[type[Self], tuple[int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "plistlib.UID",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "plistlib.UID",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "plistlib.InvalidFileException",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "message"
     }
    ],
    "className": "plistlib.InvalidFileException",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "unicodedata.UCD",
  "fields": [
   {
    "annotation": "str",
    "className": "unicodedata.UCD",
    "name": "unidata_version"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "bidirectional",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "category",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "combining",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     },
     {
      "annotation": "_T",
      "arg": "__default"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "decimal",
    "returns": "(int | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "decomposition",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     },
     {
      "annotation": "_T",
      "arg": "__default"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "digit",
    "returns": "(int | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "east_asian_width",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | bytes)",
      "arg": "__name"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "lookup",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "mirrored",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     },
     {
      "annotation": "_T",
      "arg": "__default"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "name",
    "returns": "(str | _T)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__form"
     },
     {
      "annotation": "str",
      "arg": "__unistr"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "normalize",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__chr"
     },
     {
      "annotation": "_T",
      "arg": "__default"
     }
    ],
    "className": "unicodedata.UCD",
    "kwonlyargs": [],
    "name": "numeric",
    "returns": "(float | _T)"
   }
  ]
 },
 {
  "className": "_random.Random",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "seed"
     }
    ],
    "className": "_random.Random",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__n"
     }
    ],
    "className": "_random.Random",
    "kwonlyargs": [],
    "name": "seed",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_random.Random",
    "kwonlyargs": [],
    "name": "getstate",
    "returns": "_State"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_State",
      "arg": "__state"
     }
    ],
    "className": "_random.Random",
    "kwonlyargs": [],
    "name": "setstate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_random.Random",
    "kwonlyargs": [],
    "name": "random",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__k"
     }
    ],
    "className": "_random.Random",
    "kwonlyargs": [],
    "name": "getrandbits",
    "returns": "int"
   }
  ]
 },
 {
  "className": "poplib.error_proto",
  "fields": [],
  "methods": []
 },
 {
  "className": "poplib.POP3",
  "fields": [
   {
    "annotation": "str",
    "className": "poplib.POP3",
    "name": "encoding"
   },
   {
    "annotation": "str",
    "className": "poplib.POP3",
    "name": "host"
   },
   {
    "annotation": "int",
    "className": "poplib.POP3",
    "name": "port"
   },
   {
    "annotation": "socket.socket",
    "className": "poplib.POP3",
    "name": "sock"
   },
   {
    "annotation": "BinaryIO",
    "className": "poplib.POP3",
    "name": "file"
   },
   {
    "annotation": "bytes",
    "className": "poplib.POP3",
    "name": "welcome"
   },
   {
    "annotation": "Pattern[str]",
    "className": "poplib.POP3",
    "name": "timestamp"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "getwelcome",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "set_debuglevel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "user",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "pswd"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "pass_",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "stat",
    "returns": "tuple[int, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Any | None)",
      "arg": "which"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "list",
    "returns": "_LongResp"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "which"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "retr",
    "returns": "_LongResp"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "which"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "dele",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "noop",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "rset",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "quit",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "rpop",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     },
     {
      "annotation": "str",
      "arg": "password"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "apop",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "which"
     },
     {
      "annotation": "int",
      "arg": "howmuch"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "top",
    "returns": "_LongResp"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "uidl",
    "returns": "_LongResp"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "which"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "uidl",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "utf8",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "capa",
    "returns": "dict[str, _list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ssl.SSLContext | None)",
      "arg": "context"
     }
    ],
    "className": "poplib.POP3",
    "kwonlyargs": [],
    "name": "stls",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "poplib.POP3_SSL",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "(str | None)",
      "arg": "keyfile"
     },
     {
      "annotation": "(str | None)",
      "arg": "certfile"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     },
     {
      "annotation": "(ssl.SSLContext | None)",
      "arg": "context"
     }
    ],
    "className": "poplib.POP3_SSL",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "context"
     },
     {
      "annotation": "Any",
      "arg": "keyfile"
     },
     {
      "annotation": "Any",
      "arg": "certfile"
     }
    ],
    "className": "poplib.POP3_SSL",
    "kwonlyargs": [],
    "name": "stls",
    "returns": "NoReturn"
   }
  ]
 },
 {
  "className": "difflib.Match",
  "fields": [
   {
    "annotation": "int",
    "className": "difflib.Match",
    "name": "a"
   },
   {
    "annotation": "int",
    "className": "difflib.Match",
    "name": "b"
   },
   {
    "annotation": "int",
    "className": "difflib.Match",
    "name": "size"
   }
  ],
  "methods": []
 },
 {
  "className": "difflib.SequenceMatcher",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[_T], bool] | None)",
      "arg": "isjunk"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "a"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "b"
     },
     {
      "annotation": "bool",
      "arg": "autojunk"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "a"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "b"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "set_seqs",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "a"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "set_seq1",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "b"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "set_seq2",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "get_matching_blocks",
    "returns": "list[Match]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "get_opcodes",
    "returns": "list[tuple[str, int, int, int, int]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "get_grouped_opcodes",
    "returns": "Iterable[list[tuple[str, int, int, int, int]]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "ratio",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "quick_ratio",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "difflib.SequenceMatcher",
    "kwonlyargs": [],
    "name": "real_quick_ratio",
    "returns": "float"
   }
  ]
 },
 {
  "className": "difflib.Differ",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[str], bool] | None)",
      "arg": "linejunk"
     },
     {
      "annotation": "(Callable[[str], bool] | None)",
      "arg": "charjunk"
     }
    ],
    "className": "difflib.Differ",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "a"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "b"
     }
    ],
    "className": "difflib.Differ",
    "kwonlyargs": [],
    "name": "compare",
    "returns": "Iterator[str]"
   }
  ]
 },
 {
  "className": "difflib.HtmlDiff",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "tabsize"
     },
     {
      "annotation": "(int | None)",
      "arg": "wrapcolumn"
     },
     {
      "annotation": "(Callable[[str], bool] | None)",
      "arg": "linejunk"
     },
     {
      "annotation": "(Callable[[str], bool] | None)",
      "arg": "charjunk"
     }
    ],
    "className": "difflib.HtmlDiff",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "fromlines"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "tolines"
     },
     {
      "annotation": "str",
      "arg": "fromdesc"
     },
     {
      "annotation": "str",
      "arg": "todesc"
     },
     {
      "annotation": "bool",
      "arg": "context"
     },
     {
      "annotation": "int",
      "arg": "numlines"
     }
    ],
    "className": "difflib.HtmlDiff",
    "kwonlyargs": [
     {
      "annotation": "str",
      "arg": "charset"
     }
    ],
    "name": "make_file",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "fromlines"
     },
     {
      "annotation": "Sequence[str]",
      "arg": "tolines"
     },
     {
      "annotation": "str",
      "arg": "fromdesc"
     },
     {
      "annotation": "str",
      "arg": "todesc"
     },
     {
      "annotation": "bool",
      "arg": "context"
     },
     {
      "annotation": "int",
      "arg": "numlines"
     }
    ],
    "className": "difflib.HtmlDiff",
    "kwonlyargs": [],
    "name": "make_table",
    "returns": "str"
   }
  ]
 },
 {
  "className": "dis.Instruction",
  "fields": [
   {
    "annotation": "str",
    "className": "dis.Instruction",
    "name": "opname"
   },
   {
    "annotation": "int",
    "className": "dis.Instruction",
    "name": "opcode"
   },
   {
    "annotation": "(int | None)",
    "className": "dis.Instruction",
    "name": "arg"
   },
   {
    "annotation": "Any",
    "className": "dis.Instruction",
    "name": "argval"
   },
   {
    "annotation": "str",
    "className": "dis.Instruction",
    "name": "argrepr"
   },
   {
    "annotation": "int",
    "className": "dis.Instruction",
    "name": "offset"
   },
   {
    "annotation": "(int | None)",
    "className": "dis.Instruction",
    "name": "starts_line"
   },
   {
    "annotation": "bool",
    "className": "dis.Instruction",
    "name": "is_jump_target"
   }
  ],
  "methods": []
 },
 {
  "className": "dis.Bytecode",
  "fields": [
   {
    "annotation": "types.CodeType",
    "className": "dis.Bytecode",
    "name": "codeobj"
   },
   {
    "annotation": "int",
    "className": "dis.Bytecode",
    "name": "first_line"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "dis.Bytecode",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[Instruction]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "dis.Bytecode",
    "kwonlyargs": [],
    "name": "info",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "dis.Bytecode",
    "kwonlyargs": [],
    "name": "dis",
    "returns": "str"
   }
  ]
 },
 {
  "className": "uu.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "pprint.PrettyPrinter",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "pprint.PrettyPrinter",
    "kwonlyargs": [],
    "name": "pformat",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "pprint.PrettyPrinter",
    "kwonlyargs": [],
    "name": "pprint",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "pprint.PrettyPrinter",
    "kwonlyargs": [],
    "name": "isreadable",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "pprint.PrettyPrinter",
    "kwonlyargs": [],
    "name": "isrecursive",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "dict[int, int]",
      "arg": "context"
     },
     {
      "annotation": "int",
      "arg": "maxlevels"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "pprint.PrettyPrinter",
    "kwonlyargs": [],
    "name": "format",
    "returns": "tuple[str, bool, bool]"
   }
  ]
 },
 {
  "className": "uuid.SafeUUID",
  "fields": [
   {
    "annotation": "int",
    "className": "uuid.SafeUUID",
    "name": "safe"
   },
   {
    "annotation": "int",
    "className": "uuid.SafeUUID",
    "name": "unsafe"
   },
   {
    "annotation": "None",
    "className": "uuid.SafeUUID",
    "name": "unknown"
   }
  ],
  "methods": []
 },
 {
  "className": "uuid.UUID",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "bytes",
    "returns": "_Bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "bytes_le",
    "returns": "_Bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "clock_seq",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "clock_seq_hi_variant",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "clock_seq_low",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "fields",
    "returns": "_FieldsType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "hex",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "int",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "node",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "time",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "time_hi_version",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "time_low",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "time_mid",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "urn",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "variant",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "version",
    "returns": "(_Int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "__int__",
    "returns": "_Int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "UUID",
      "arg": "other"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "UUID",
      "arg": "other"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "UUID",
      "arg": "other"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "UUID",
      "arg": "other"
     }
    ],
    "className": "uuid.UUID",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "doctest.TestResults",
  "fields": [
   {
    "annotation": "int",
    "className": "doctest.TestResults",
    "name": "failed"
   },
   {
    "annotation": "int",
    "className": "doctest.TestResults",
    "name": "attempted"
   }
  ],
  "methods": []
 },
 {
  "className": "doctest.Example",
  "fields": [
   {
    "annotation": "str",
    "className": "doctest.Example",
    "name": "source"
   },
   {
    "annotation": "str",
    "className": "doctest.Example",
    "name": "want"
   },
   {
    "annotation": "(str | None)",
    "className": "doctest.Example",
    "name": "exc_msg"
   },
   {
    "annotation": "int",
    "className": "doctest.Example",
    "name": "lineno"
   },
   {
    "annotation": "int",
    "className": "doctest.Example",
    "name": "indent"
   },
   {
    "annotation": "dict[int, bool]",
    "className": "doctest.Example",
    "name": "options"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "source"
     },
     {
      "annotation": "str",
      "arg": "want"
     },
     {
      "annotation": "(str | None)",
      "arg": "exc_msg"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     },
     {
      "annotation": "int",
      "arg": "indent"
     },
     {
      "annotation": "(dict[int, bool] | None)",
      "arg": "options"
     }
    ],
    "className": "doctest.Example",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.Example",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "doctest.Example",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "doctest.DocTest",
  "fields": [
   {
    "annotation": "list[Example]",
    "className": "doctest.DocTest",
    "name": "examples"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "doctest.DocTest",
    "name": "globs"
   },
   {
    "annotation": "str",
    "className": "doctest.DocTest",
    "name": "name"
   },
   {
    "annotation": "(str | None)",
    "className": "doctest.DocTest",
    "name": "filename"
   },
   {
    "annotation": "(int | None)",
    "className": "doctest.DocTest",
    "name": "lineno"
   },
   {
    "annotation": "(str | None)",
    "className": "doctest.DocTest",
    "name": "docstring"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[Example]",
      "arg": "examples"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "globs"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "filename"
     },
     {
      "annotation": "(int | None)",
      "arg": "lineno"
     },
     {
      "annotation": "(str | None)",
      "arg": "docstring"
     }
    ],
    "className": "doctest.DocTest",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocTest",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "DocTest",
      "arg": "other"
     }
    ],
    "className": "doctest.DocTest",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "doctest.DocTest",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "doctest.DocTestParser",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "string"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "doctest.DocTestParser",
    "kwonlyargs": [],
    "name": "parse",
    "returns": "list[str | Example]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "string"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "globs"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "filename"
     },
     {
      "annotation": "(int | None)",
      "arg": "lineno"
     }
    ],
    "className": "doctest.DocTestParser",
    "kwonlyargs": [],
    "name": "get_doctest",
    "returns": "DocTest"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "string"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "doctest.DocTestParser",
    "kwonlyargs": [],
    "name": "get_examples",
    "returns": "list[Example]"
   }
  ]
 },
 {
  "className": "doctest.DocTestFinder",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "verbose"
     },
     {
      "annotation": "DocTestParser",
      "arg": "parser"
     },
     {
      "annotation": "bool",
      "arg": "recurse"
     },
     {
      "annotation": "bool",
      "arg": "exclude_empty"
     }
    ],
    "className": "doctest.DocTestFinder",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "obj"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(None | bool | types.ModuleType)",
      "arg": "module"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "globs"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "extraglobs"
     }
    ],
    "className": "doctest.DocTestFinder",
    "kwonlyargs": [],
    "name": "find",
    "returns": "list[DocTest]"
   }
  ]
 },
 {
  "className": "doctest.DocTestRunner",
  "fields": [
   {
    "annotation": "str",
    "className": "doctest.DocTestRunner",
    "name": "DIVIDER"
   },
   {
    "annotation": "int",
    "className": "doctest.DocTestRunner",
    "name": "optionflags"
   },
   {
    "annotation": "int",
    "className": "doctest.DocTestRunner",
    "name": "original_optionflags"
   },
   {
    "annotation": "int",
    "className": "doctest.DocTestRunner",
    "name": "tries"
   },
   {
    "annotation": "int",
    "className": "doctest.DocTestRunner",
    "name": "failures"
   },
   {
    "annotation": "DocTest",
    "className": "doctest.DocTestRunner",
    "name": "test"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(OutputChecker | None)",
      "arg": "checker"
     },
     {
      "annotation": "(bool | None)",
      "arg": "verbose"
     },
     {
      "annotation": "int",
      "arg": "optionflags"
     }
    ],
    "className": "doctest.DocTestRunner",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Out",
      "arg": "out"
     },
     {
      "annotation": "DocTest",
      "arg": "test"
     },
     {
      "annotation": "Example",
      "arg": "example"
     }
    ],
    "className": "doctest.DocTestRunner",
    "kwonlyargs": [],
    "name": "report_start",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Out",
      "arg": "out"
     },
     {
      "annotation": "DocTest",
      "arg": "test"
     },
     {
      "annotation": "Example",
      "arg": "example"
     },
     {
      "annotation": "str",
      "arg": "got"
     }
    ],
    "className": "doctest.DocTestRunner",
    "kwonlyargs": [],
    "name": "report_success",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Out",
      "arg": "out"
     },
     {
      "annotation": "DocTest",
      "arg": "test"
     },
     {
      "annotation": "Example",
      "arg": "example"
     },
     {
      "annotation": "str",
      "arg": "got"
     }
    ],
    "className": "doctest.DocTestRunner",
    "kwonlyargs": [],
    "name": "report_failure",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Out",
      "arg": "out"
     },
     {
      "annotation": "DocTest",
      "arg": "test"
     },
     {
      "annotation": "Example",
      "arg": "example"
     },
     {
      "annotation": "ExcInfo",
      "arg": "exc_info"
     }
    ],
    "className": "doctest.DocTestRunner",
    "kwonlyargs": [],
    "name": "report_unexpected_exception",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "DocTest",
      "arg": "test"
     },
     {
      "annotation": "(int | None)",
      "arg": "compileflags"
     },
     {
      "annotation": "(_Out | None)",
      "arg": "out"
     },
     {
      "annotation": "bool",
      "arg": "clear_globs"
     }
    ],
    "className": "doctest.DocTestRunner",
    "kwonlyargs": [],
    "name": "run",
    "returns": "TestResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bool | None)",
      "arg": "verbose"
     }
    ],
    "className": "doctest.DocTestRunner",
    "kwonlyargs": [],
    "name": "summarize",
    "returns": "TestResults"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "DocTestRunner",
      "arg": "other"
     }
    ],
    "className": "doctest.DocTestRunner",
    "kwonlyargs": [],
    "name": "merge",
    "returns": "None"
   }
  ]
 },
 {
  "className": "doctest.OutputChecker",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "want"
     },
     {
      "annotation": "str",
      "arg": "got"
     },
     {
      "annotation": "int",
      "arg": "optionflags"
     }
    ],
    "className": "doctest.OutputChecker",
    "kwonlyargs": [],
    "name": "check_output",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Example",
      "arg": "example"
     },
     {
      "annotation": "str",
      "arg": "got"
     },
     {
      "annotation": "int",
      "arg": "optionflags"
     }
    ],
    "className": "doctest.OutputChecker",
    "kwonlyargs": [],
    "name": "output_difference",
    "returns": "str"
   }
  ]
 },
 {
  "className": "doctest.DocTestFailure",
  "fields": [
   {
    "annotation": "DocTest",
    "className": "doctest.DocTestFailure",
    "name": "test"
   },
   {
    "annotation": "Example",
    "className": "doctest.DocTestFailure",
    "name": "example"
   },
   {
    "annotation": "str",
    "className": "doctest.DocTestFailure",
    "name": "got"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "DocTest",
      "arg": "test"
     },
     {
      "annotation": "Example",
      "arg": "example"
     },
     {
      "annotation": "str",
      "arg": "got"
     }
    ],
    "className": "doctest.DocTestFailure",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "doctest.UnexpectedException",
  "fields": [
   {
    "annotation": "DocTest",
    "className": "doctest.UnexpectedException",
    "name": "test"
   },
   {
    "annotation": "Example",
    "className": "doctest.UnexpectedException",
    "name": "example"
   },
   {
    "annotation": "ExcInfo",
    "className": "doctest.UnexpectedException",
    "name": "exc_info"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "DocTest",
      "arg": "test"
     },
     {
      "annotation": "Example",
      "arg": "example"
     },
     {
      "annotation": "ExcInfo",
      "arg": "exc_info"
     }
    ],
    "className": "doctest.UnexpectedException",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "doctest.DebugRunner",
  "fields": [],
  "methods": []
 },
 {
  "className": "doctest.DocTestCase",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "DocTest",
      "arg": "test"
     },
     {
      "annotation": "int",
      "arg": "optionflags"
     },
     {
      "annotation": "(Callable[[DocTest], Any] | None)",
      "arg": "setUp"
     },
     {
      "annotation": "(Callable[[DocTest], Any] | None)",
      "arg": "tearDown"
     },
     {
      "annotation": "(OutputChecker | None)",
      "arg": "checker"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "setUp",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "tearDown",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "runTest",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "err"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "format_failure",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "debug",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "id",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocTestCase",
    "kwonlyargs": [],
    "name": "shortDescription",
    "returns": "str"
   }
  ]
 },
 {
  "className": "doctest.SkipDocTestCase",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "types.ModuleType",
      "arg": "module"
     }
    ],
    "className": "doctest.SkipDocTestCase",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.SkipDocTestCase",
    "kwonlyargs": [],
    "name": "setUp",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.SkipDocTestCase",
    "kwonlyargs": [],
    "name": "test_skip",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.SkipDocTestCase",
    "kwonlyargs": [],
    "name": "shortDescription",
    "returns": "str"
   }
  ]
 },
 {
  "className": "doctest.DocFileCase",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "doctest.DocFileCase",
    "kwonlyargs": [],
    "name": "id",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "err"
     }
    ],
    "className": "doctest.DocFileCase",
    "kwonlyargs": [],
    "name": "format_failure",
    "returns": "str"
   }
  ]
 },
 {
  "className": "profile.Profile",
  "fields": [
   {
    "annotation": "int",
    "className": "profile.Profile",
    "name": "bias"
   },
   {
    "annotation": "dict[_Label, tuple[int, int, int, int, dict[_Label, tuple[int, int, int, int]]]\n    ]",
    "className": "profile.Profile",
    "name": "stats"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Callable[[], float] | None)",
      "arg": "timer"
     },
     {
      "annotation": "(int | None)",
      "arg": "bias"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "set_cmd",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "simulate_call",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "simulate_cmd_complete",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | int)",
      "arg": "sort"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "print_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "file"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "dump_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "create_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "snapshot_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "run",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "globals"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "locals"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "runctx",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[_P, _T]",
      "arg": "__func"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "runcall",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "m"
     },
     {
      "annotation": "int",
      "arg": "verbose"
     }
    ],
    "className": "profile.Profile",
    "kwonlyargs": [],
    "name": "calibrate",
    "returns": "float"
   }
  ]
 },
 {
  "className": "venv.EnvBuilder",
  "fields": [
   {
    "annotation": "bool",
    "className": "venv.EnvBuilder",
    "name": "system_site_packages"
   },
   {
    "annotation": "bool",
    "className": "venv.EnvBuilder",
    "name": "clear"
   },
   {
    "annotation": "bool",
    "className": "venv.EnvBuilder",
    "name": "symlinks"
   },
   {
    "annotation": "bool",
    "className": "venv.EnvBuilder",
    "name": "upgrade"
   },
   {
    "annotation": "bool",
    "className": "venv.EnvBuilder",
    "name": "with_pip"
   },
   {
    "annotation": "(str | None)",
    "className": "venv.EnvBuilder",
    "name": "prompt"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "env_dir"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "create",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "path"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "clear_directory",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "env_dir"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "ensure_directories",
    "returns": "SimpleNamespace"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SimpleNamespace",
      "arg": "context"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "create_configuration",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "src"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "dst"
     },
     {
      "annotation": "bool",
      "arg": "relative_symlinks_ok"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "symlink_or_copy",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SimpleNamespace",
      "arg": "context"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "setup_python",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SimpleNamespace",
      "arg": "context"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "_setup_pip",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SimpleNamespace",
      "arg": "context"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "setup_scripts",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SimpleNamespace",
      "arg": "context"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "post_setup",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "SimpleNamespace",
      "arg": "context"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "replace_variables",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SimpleNamespace",
      "arg": "context"
     },
     {
      "annotation": "str",
      "arg": "path"
     }
    ],
    "className": "venv.EnvBuilder",
    "kwonlyargs": [],
    "name": "install_scripts",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pstats.SortKey",
  "fields": [
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "CALLS"
   },
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "CUMULATIVE"
   },
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "FILENAME"
   },
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "LINE"
   },
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "NAME"
   },
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "NFL"
   },
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "PCALLS"
   },
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "STDNAME"
   },
   {
    "annotation": "str",
    "className": "pstats.SortKey",
    "name": "TIME"
   }
  ],
  "methods": []
 },
 {
  "className": "pstats.FunctionProfile",
  "fields": [
   {
    "annotation": "int",
    "className": "pstats.FunctionProfile",
    "name": "ncalls"
   },
   {
    "annotation": "float",
    "className": "pstats.FunctionProfile",
    "name": "tottime"
   },
   {
    "annotation": "float",
    "className": "pstats.FunctionProfile",
    "name": "percall_tottime"
   },
   {
    "annotation": "float",
    "className": "pstats.FunctionProfile",
    "name": "cumtime"
   },
   {
    "annotation": "float",
    "className": "pstats.FunctionProfile",
    "name": "percall_cumtime"
   },
   {
    "annotation": "str",
    "className": "pstats.FunctionProfile",
    "name": "file_name"
   },
   {
    "annotation": "int",
    "className": "pstats.FunctionProfile",
    "name": "line_number"
   }
  ],
  "methods": []
 },
 {
  "className": "pstats.StatsProfile",
  "fields": [
   {
    "annotation": "float",
    "className": "pstats.StatsProfile",
    "name": "total_tt"
   },
   {
    "annotation": "dict[str, FunctionProfile]",
    "className": "pstats.StatsProfile",
    "name": "func_profiles"
   }
  ],
  "methods": []
 },
 {
  "className": "pstats.Stats",
  "fields": [
   {
    "annotation": "_SortArgDict",
    "className": "pstats.Stats",
    "name": "sort_arg_dict_default"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "(None | str | Profile | _cProfile)",
      "arg": "__arg"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [
     {
      "annotation": "(IO[Any] | None)",
      "arg": "stream"
     }
    ],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(None | str | Profile | _cProfile)",
      "arg": "arg"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "init",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(None | str | Profile | _cProfile)",
      "arg": "arg"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "load_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "get_top_level_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "add",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrOrBytesPath",
      "arg": "filename"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "dump_stats",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "get_sort_arg_defs",
    "returns": "_SortArgDict"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Literal[-1, 0, 1, 2]",
      "arg": "field"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "sort_stats",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "sort_stats",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "reverse_order",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "strip_dirs",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "calc_callees",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Selector",
      "arg": "sel"
     },
     {
      "annotation": "list[str]",
      "arg": "list"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "eval_print_amount",
    "returns": "tuple[list[str], str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Iterable[_Selector]",
      "arg": "sel_list"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "get_print_list",
    "returns": "tuple[int, list[str]]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "print_stats",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "print_callees",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "print_callers",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "name_size"
     },
     {
      "annotation": "str",
      "arg": "column_title"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "print_call_heading",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "name_size"
     },
     {
      "annotation": "str",
      "arg": "source"
     },
     {
      "annotation": "dict[str, Any]",
      "arg": "call_dict"
     },
     {
      "annotation": "str",
      "arg": "arrow"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "print_call_line",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "print_title",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "func"
     }
    ],
    "className": "pstats.Stats",
    "kwonlyargs": [],
    "name": "print_line",
    "returns": "None"
   }
  ]
 },
 {
  "className": "warnings.WarningMessage",
  "fields": [
   {
    "annotation": "(Warning | str)",
    "className": "warnings.WarningMessage",
    "name": "message"
   },
   {
    "annotation": "type[Warning]",
    "className": "warnings.WarningMessage",
    "name": "category"
   },
   {
    "annotation": "str",
    "className": "warnings.WarningMessage",
    "name": "filename"
   },
   {
    "annotation": "int",
    "className": "warnings.WarningMessage",
    "name": "lineno"
   },
   {
    "annotation": "(TextIO | None)",
    "className": "warnings.WarningMessage",
    "name": "file"
   },
   {
    "annotation": "(str | None)",
    "className": "warnings.WarningMessage",
    "name": "line"
   },
   {
    "annotation": "(Any | None)",
    "className": "warnings.WarningMessage",
    "name": "source"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Warning | str)",
      "arg": "message"
     },
     {
      "annotation": "type[Warning]",
      "arg": "category"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "int",
      "arg": "lineno"
     },
     {
      "annotation": "(TextIO | None)",
      "arg": "file"
     },
     {
      "annotation": "(str | None)",
      "arg": "line"
     },
     {
      "annotation": "(Any | None)",
      "arg": "source"
     }
    ],
    "className": "warnings.WarningMessage",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "warnings.catch_warnings",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "warnings.catch_warnings",
    "kwonlyargs": [
     {
      "annotation": "Literal[False]",
      "arg": "record"
     },
     {
      "annotation": "(ModuleType | None)",
      "arg": "module"
     }
    ],
    "name": "__new__",
    "returns": "_catch_warnings_without_records"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "warnings.catch_warnings",
    "kwonlyargs": [
     {
      "annotation": "Literal[True]",
      "arg": "record"
     },
     {
      "annotation": "(ModuleType | None)",
      "arg": "module"
     }
    ],
    "name": "__new__",
    "returns": "_catch_warnings_with_records"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "warnings.catch_warnings",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "record"
     },
     {
      "annotation": "(ModuleType | None)",
      "arg": "module"
     }
    ],
    "name": "__new__",
    "returns": "catch_warnings"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "warnings.catch_warnings",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "(list[WarningMessage] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "exc_tb"
     }
    ],
    "className": "warnings.catch_warnings",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "_sitebuiltins.Quitter",
  "fields": [
   {
    "annotation": "str",
    "className": "_sitebuiltins.Quitter",
    "name": "name"
   },
   {
    "annotation": "str",
    "className": "_sitebuiltins.Quitter",
    "name": "eof"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "str",
      "arg": "eof"
     }
    ],
    "className": "_sitebuiltins.Quitter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "code"
     }
    ],
    "className": "_sitebuiltins.Quitter",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "NoReturn"
   }
  ]
 },
 {
  "className": "encodings.CodecRegistryError",
  "fields": [],
  "methods": []
 },
 {
  "className": "wave.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "wave.Wave_read",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_File",
      "arg": "f"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getfp",
    "returns": "(BinaryIO | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "rewind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getnchannels",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getnframes",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getsampwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getframerate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getcomptype",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getcompname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getparams",
    "returns": "_wave_params"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getmarkers",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "id"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "getmark",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "pos"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "setpos",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nframes"
     }
    ],
    "className": "wave.Wave_read",
    "kwonlyargs": [],
    "name": "readframes",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "wave.Wave_write",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_File",
      "arg": "f"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nchannels"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "setnchannels",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getnchannels",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "sampwidth"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "setsampwidth",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getsampwidth",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "framerate"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "setframerate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getframerate",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "nframes"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "setnframes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getnframes",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "comptype"
     },
     {
      "annotation": "str",
      "arg": "compname"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "setcomptype",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getcomptype",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getcompname",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_wave_params",
      "arg": "params"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "setparams",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getparams",
    "returns": "_wave_params"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "id"
     },
     {
      "annotation": "Any",
      "arg": "pos"
     },
     {
      "annotation": "Any",
      "arg": "name"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "setmark",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "id"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getmark",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "getmarkers",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "tell",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "writeframesraw",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "data"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "writeframes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "wave.Wave_write",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "_socket.herror",
  "fields": [],
  "methods": []
 },
 {
  "className": "_socket.gaierror",
  "fields": [],
  "methods": []
 },
 {
  "className": "_socket.socket",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "family",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "type",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "proto",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "timeout",
    "returns": "(float | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "family"
     },
     {
      "annotation": "int",
      "arg": "type"
     },
     {
      "annotation": "int",
      "arg": "proto"
     },
     {
      "annotation": "(_FD | None)",
      "arg": "fileno"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_Address | bytes)",
      "arg": "__address"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "bind",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_Address | bytes)",
      "arg": "__address"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "connect",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_Address | bytes)",
      "arg": "__address"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "connect_ex",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "detach",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "getpeername",
    "returns": "_RetAddress"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "getsockname",
    "returns": "_RetAddress"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__level"
     },
     {
      "annotation": "int",
      "arg": "__optname"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "getsockopt",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__level"
     },
     {
      "annotation": "int",
      "arg": "__optname"
     },
     {
      "annotation": "int",
      "arg": "__buflen"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "getsockopt",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "gettimeout",
    "returns": "(float | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__backlog"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "listen",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__bufsize"
     },
     {
      "annotation": "int",
      "arg": "__flags"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "recv",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__bufsize"
     },
     {
      "annotation": "int",
      "arg": "__flags"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "recvfrom",
    "returns": "tuple[bytes, _RetAddress]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "buffer"
     },
     {
      "annotation": "int",
      "arg": "nbytes"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "recvfrom_into",
    "returns": "tuple[int, _RetAddress]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "WriteableBuffer",
      "arg": "buffer"
     },
     {
      "annotation": "int",
      "arg": "nbytes"
     },
     {
      "annotation": "int",
      "arg": "flags"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "recv_into",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__data"
     },
     {
      "annotation": "int",
      "arg": "__flags"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "send",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__data"
     },
     {
      "annotation": "int",
      "arg": "__flags"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "sendall",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__data"
     },
     {
      "annotation": "_Address",
      "arg": "__address"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "sendto",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "ReadableBuffer",
      "arg": "__data"
     },
     {
      "annotation": "int",
      "arg": "__flags"
     },
     {
      "annotation": "_Address",
      "arg": "__address"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "sendto",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "__flag"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "setblocking",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | None)",
      "arg": "__value"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "settimeout",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__level"
     },
     {
      "annotation": "int",
      "arg": "__optname"
     },
     {
      "annotation": "(int | bytes)",
      "arg": "__value"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "setsockopt",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__level"
     },
     {
      "annotation": "int",
      "arg": "__optname"
     },
     {
      "annotation": "None",
      "arg": "__value"
     },
     {
      "annotation": "int",
      "arg": "__optlen"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "setsockopt",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__how"
     }
    ],
    "className": "_socket.socket",
    "kwonlyargs": [],
    "name": "shutdown",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pwd.struct_passwd",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pwd.struct_passwd",
    "kwonlyargs": [],
    "name": "pw_name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pwd.struct_passwd",
    "kwonlyargs": [],
    "name": "pw_passwd",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pwd.struct_passwd",
    "kwonlyargs": [],
    "name": "pw_uid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pwd.struct_passwd",
    "kwonlyargs": [],
    "name": "pw_gid",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pwd.struct_passwd",
    "kwonlyargs": [],
    "name": "pw_gecos",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pwd.struct_passwd",
    "kwonlyargs": [],
    "name": "pw_dir",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pwd.struct_passwd",
    "kwonlyargs": [],
    "name": "pw_shell",
    "returns": "str"
   }
  ]
 },
 {
  "className": "weakref.WeakMethod",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "_CallableT",
      "arg": "meth"
     },
     {
      "annotation": "(Callable[[_CallableT], object] | None)",
      "arg": "callback"
     }
    ],
    "className": "weakref.WeakMethod",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakMethod",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "(_CallableT | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "weakref.WeakMethod",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "other"
     }
    ],
    "className": "weakref.WeakMethod",
    "kwonlyargs": [],
    "name": "__ne__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "weakref.WeakValueDictionary",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "WeakValueDictionary[_KT, _VT]",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[_KT, _VT] | Iterable[tuple[_KT, _VT]])",
      "arg": "__other"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "WeakValueDictionary[str, _VT]",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[str, _VT] | Iterable[tuple[str, _VT]])",
      "arg": "__other"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "value"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "key"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "WeakValueDictionary[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "memo"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "__deepcopy__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "Iterator[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "values",
    "returns": "Iterator[_VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "items",
    "returns": "Iterator[tuple[_KT, _VT]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "itervaluerefs",
    "returns": "Iterator[KeyedRef[_KT, _VT]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "valuerefs",
    "returns": "list[KeyedRef[_KT, _VT]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "default"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "setdefault",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "(_VT | _T)",
      "arg": "default"
     }
    ],
    "className": "weakref.WeakValueDictionary",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "(_VT | _T)"
   }
  ]
 },
 {
  "className": "weakref.KeyedRef",
  "fields": [
   {
    "annotation": "_KT",
    "className": "weakref.KeyedRef",
    "name": "key"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "type"
     },
     {
      "annotation": "_T",
      "arg": "ob"
     },
     {
      "annotation": "Callable[[_T], Any]",
      "arg": "callback"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "weakref.KeyedRef",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "ob"
     },
     {
      "annotation": "Callable[[_T], Any]",
      "arg": "callback"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "weakref.KeyedRef",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "weakref.WeakKeyDictionary",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "dict"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(Mapping[_KT, _VT] | Iterable[tuple[_KT, _VT]])",
      "arg": "dict"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "value"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__setitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__delitem__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "key"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "copy",
    "returns": "WeakKeyDictionary[_KT, _VT]"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "memo"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "__deepcopy__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "keys",
    "returns": "Iterator[_KT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "values",
    "returns": "Iterator[_VT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "items",
    "returns": "Iterator[tuple[_KT, _VT]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "keyrefs",
    "returns": "list[ref[_KT]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "_VT",
      "arg": "default"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "setdefault",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "_VT"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_KT",
      "arg": "key"
     },
     {
      "annotation": "(_VT | _T)",
      "arg": "default"
     }
    ],
    "className": "weakref.WeakKeyDictionary",
    "kwonlyargs": [],
    "name": "pop",
    "returns": "(_VT | _T)"
   }
  ]
 },
 {
  "className": "weakref.finalize",
  "fields": [
   {
    "annotation": "bool",
    "className": "weakref.finalize",
    "name": "atexit"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "__obj"
     },
     {
      "annotation": "Callable[_P, Any]",
      "arg": "__func"
     }
    ],
    "className": "weakref.finalize",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "_"
     }
    ],
    "className": "weakref.finalize",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "(Any | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.finalize",
    "kwonlyargs": [],
    "name": "detach",
    "returns": "(tuple[Any, Any, tuple[Any, ...], dict[str, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.finalize",
    "kwonlyargs": [],
    "name": "peek",
    "returns": "(tuple[Any, Any, tuple[Any, ...], dict[str, Any]] | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "weakref.finalize",
    "kwonlyargs": [],
    "name": "alive",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "enum.EnumMeta",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "enum.EnumMeta",
    "name": "_member_names_"
   },
   {
    "annotation": "dict[str, Enum]",
    "className": "enum.EnumMeta",
    "name": "_member_map_"
   },
   {
    "annotation": "dict[Any, Enum]",
    "className": "enum.EnumMeta",
    "name": "_value2member_map_"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[_EnumMemberT]",
      "arg": "self"
     }
    ],
    "className": "enum.EnumMeta",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Iterator[_EnumMemberT]"
   },
   {
    "args": [
     {
      "annotation": "type[_EnumMemberT]",
      "arg": "self"
     }
    ],
    "className": "enum.EnumMeta",
    "kwonlyargs": [],
    "name": "__reversed__",
    "returns": "Iterator[_EnumMemberT]"
   },
   {
    "args": [
     {
      "annotation": "type[Any]",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "obj"
     }
    ],
    "className": "enum.EnumMeta",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "type[_EnumMemberT]",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "enum.EnumMeta",
    "kwonlyargs": [],
    "name": "__getitem__",
    "returns": "_EnumMemberT"
   },
   {
    "args": [
     {
      "annotation": "type[_EnumMemberT]",
      "arg": "self"
     }
    ],
    "className": "enum.EnumMeta",
    "kwonlyargs": [],
    "name": "__members__",
    "returns": "types.MappingProxyType[str, _EnumMemberT]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.EnumMeta",
    "kwonlyargs": [],
    "name": "__len__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.EnumMeta",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "Literal[True]"
   },
   {
    "args": [
     {
      "annotation": "type[_EnumMemberT]",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "value"
     },
     {
      "annotation": "None",
      "arg": "names"
     }
    ],
    "className": "enum.EnumMeta",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "_EnumMemberT"
   }
  ]
 },
 {
  "className": "enum.Enum",
  "fields": [
   {
    "annotation": "str",
    "className": "enum.Enum",
    "name": "_name_"
   },
   {
    "annotation": "Any",
    "className": "enum.Enum",
    "name": "_value_"
   },
   {
    "annotation": "str",
    "className": "enum.Enum",
    "name": "_order_"
   },
   {
    "annotation": "str",
    "className": "enum.Enum",
    "name": "__order__"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "value",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     },
     {
      "annotation": "object",
      "arg": "value"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "_missing_",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "str",
      "arg": "name"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "int",
      "arg": "count"
     },
     {
      "annotation": "list[Any]",
      "arg": "last_values"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "_generate_next_value_",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "Any",
      "arg": "value"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "__dir__",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "format_spec"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "__format__",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "proto"
     }
    ],
    "className": "enum.Enum",
    "kwonlyargs": [],
    "name": "__reduce_ex__",
    "returns": "Any"
   }
  ]
 },
 {
  "className": "enum.IntEnum",
  "fields": [
   {
    "annotation": "int",
    "className": "enum.IntEnum",
    "name": "_value_"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.IntEnum",
    "kwonlyargs": [],
    "name": "value",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "int",
      "arg": "value"
     }
    ],
    "className": "enum.IntEnum",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "enum.auto",
  "fields": [
   {
    "annotation": "Any",
    "className": "enum.auto",
    "name": "_value_"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.auto",
    "kwonlyargs": [],
    "name": "value",
    "returns": "Any"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     }
    ],
    "className": "enum.auto",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "enum.Flag",
  "fields": [
   {
    "annotation": "(str | None)",
    "className": "enum.Flag",
    "name": "_name_"
   },
   {
    "annotation": "int",
    "className": "enum.Flag",
    "name": "_value_"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.Flag",
    "kwonlyargs": [],
    "name": "name",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.Flag",
    "kwonlyargs": [],
    "name": "value",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Self",
      "arg": "other"
     }
    ],
    "className": "enum.Flag",
    "kwonlyargs": [],
    "name": "__contains__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "enum.Flag",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Self",
      "arg": "other"
     }
    ],
    "className": "enum.Flag",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Self",
      "arg": "other"
     }
    ],
    "className": "enum.Flag",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Self",
      "arg": "other"
     }
    ],
    "className": "enum.Flag",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "enum.Flag",
    "kwonlyargs": [],
    "name": "__invert__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "enum.IntFlag",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "int",
      "arg": "value"
     }
    ],
    "className": "enum.IntFlag",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "other"
     }
    ],
    "className": "enum.IntFlag",
    "kwonlyargs": [],
    "name": "__or__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "other"
     }
    ],
    "className": "enum.IntFlag",
    "kwonlyargs": [],
    "name": "__and__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "other"
     }
    ],
    "className": "enum.IntFlag",
    "kwonlyargs": [],
    "name": "__xor__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "other"
     }
    ],
    "className": "enum.IntFlag",
    "kwonlyargs": [],
    "name": "__ror__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "other"
     }
    ],
    "className": "enum.IntFlag",
    "kwonlyargs": [],
    "name": "__rand__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "other"
     }
    ],
    "className": "enum.IntFlag",
    "kwonlyargs": [],
    "name": "__rxor__",
    "returns": "Self"
   }
  ]
 },
 {
  "className": "py_compile.PyCompileError",
  "fields": [
   {
    "annotation": "str",
    "className": "py_compile.PyCompileError",
    "name": "exc_type_name"
   },
   {
    "annotation": "BaseException",
    "className": "py_compile.PyCompileError",
    "name": "exc_value"
   },
   {
    "annotation": "str",
    "className": "py_compile.PyCompileError",
    "name": "file"
   },
   {
    "annotation": "str",
    "className": "py_compile.PyCompileError",
    "name": "msg"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[BaseException]",
      "arg": "exc_type"
     },
     {
      "annotation": "BaseException",
      "arg": "exc_value"
     },
     {
      "annotation": "str",
      "arg": "file"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "py_compile.PyCompileError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "py_compile.PycInvalidationMode",
  "fields": [
   {
    "annotation": "int",
    "className": "py_compile.PycInvalidationMode",
    "name": "TIMESTAMP"
   },
   {
    "annotation": "int",
    "className": "py_compile.PycInvalidationMode",
    "name": "CHECKED_HASH"
   },
   {
    "annotation": "int",
    "className": "py_compile.PycInvalidationMode",
    "name": "UNCHECKED_HASH"
   }
  ],
  "methods": []
 },
 {
  "className": "webbrowser.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "webbrowser.BaseBrowser",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "webbrowser.BaseBrowser",
    "name": "args"
   },
   {
    "annotation": "str",
    "className": "webbrowser.BaseBrowser",
    "name": "name"
   },
   {
    "annotation": "str",
    "className": "webbrowser.BaseBrowser",
    "name": "basename"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "webbrowser.BaseBrowser",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "url"
     },
     {
      "annotation": "int",
      "arg": "new"
     },
     {
      "annotation": "bool",
      "arg": "autoraise"
     }
    ],
    "className": "webbrowser.BaseBrowser",
    "kwonlyargs": [],
    "name": "open",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "url"
     }
    ],
    "className": "webbrowser.BaseBrowser",
    "kwonlyargs": [],
    "name": "open_new",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "url"
     }
    ],
    "className": "webbrowser.BaseBrowser",
    "kwonlyargs": [],
    "name": "open_new_tab",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "webbrowser.GenericBrowser",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | Sequence[str])",
      "arg": "name"
     }
    ],
    "className": "webbrowser.GenericBrowser",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "url"
     },
     {
      "annotation": "int",
      "arg": "new"
     },
     {
      "annotation": "bool",
      "arg": "autoraise"
     }
    ],
    "className": "webbrowser.GenericBrowser",
    "kwonlyargs": [],
    "name": "open",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "webbrowser.BackgroundBrowser",
  "fields": [],
  "methods": []
 },
 {
  "className": "webbrowser.UnixBrowser",
  "fields": [
   {
    "annotation": "(list[str] | None)",
    "className": "webbrowser.UnixBrowser",
    "name": "raise_opts"
   },
   {
    "annotation": "bool",
    "className": "webbrowser.UnixBrowser",
    "name": "background"
   },
   {
    "annotation": "bool",
    "className": "webbrowser.UnixBrowser",
    "name": "redirect_stdout"
   },
   {
    "annotation": "list[str]",
    "className": "webbrowser.UnixBrowser",
    "name": "remote_args"
   },
   {
    "annotation": "str",
    "className": "webbrowser.UnixBrowser",
    "name": "remote_action"
   },
   {
    "annotation": "str",
    "className": "webbrowser.UnixBrowser",
    "name": "remote_action_newwin"
   },
   {
    "annotation": "str",
    "className": "webbrowser.UnixBrowser",
    "name": "remote_action_newtab"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "url"
     },
     {
      "annotation": "Literal[0, 1, 2]",
      "arg": "new"
     },
     {
      "annotation": "bool",
      "arg": "autoraise"
     }
    ],
    "className": "webbrowser.UnixBrowser",
    "kwonlyargs": [],
    "name": "open",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "webbrowser.Mozilla",
  "fields": [],
  "methods": []
 },
 {
  "className": "webbrowser.Galeon",
  "fields": [
   {
    "annotation": "list[str]",
    "className": "webbrowser.Galeon",
    "name": "raise_opts"
   }
  ],
  "methods": []
 },
 {
  "className": "webbrowser.Chrome",
  "fields": [],
  "methods": []
 },
 {
  "className": "webbrowser.Opera",
  "fields": [],
  "methods": []
 },
 {
  "className": "webbrowser.Elinks",
  "fields": [],
  "methods": []
 },
 {
  "className": "webbrowser.Konqueror",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "url"
     },
     {
      "annotation": "int",
      "arg": "new"
     },
     {
      "annotation": "bool",
      "arg": "autoraise"
     }
    ],
    "className": "webbrowser.Konqueror",
    "kwonlyargs": [],
    "name": "open",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "webbrowser.Grail",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "url"
     },
     {
      "annotation": "int",
      "arg": "new"
     },
     {
      "annotation": "bool",
      "arg": "autoraise"
     }
    ],
    "className": "webbrowser.Grail",
    "kwonlyargs": [],
    "name": "open",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "pyclbr.Class",
  "fields": [
   {
    "annotation": "str",
    "className": "pyclbr.Class",
    "name": "module"
   },
   {
    "annotation": "str",
    "className": "pyclbr.Class",
    "name": "name"
   },
   {
    "annotation": "(list[Class | str] | None)",
    "className": "pyclbr.Class",
    "name": "super"
   },
   {
    "annotation": "dict[str, int]",
    "className": "pyclbr.Class",
    "name": "methods"
   },
   {
    "annotation": "int",
    "className": "pyclbr.Class",
    "name": "file"
   },
   {
    "annotation": "int",
    "className": "pyclbr.Class",
    "name": "lineno"
   }
  ],
  "methods": []
 },
 {
  "className": "pyclbr.Function",
  "fields": [
   {
    "annotation": "str",
    "className": "pyclbr.Function",
    "name": "module"
   },
   {
    "annotation": "str",
    "className": "pyclbr.Function",
    "name": "name"
   },
   {
    "annotation": "int",
    "className": "pyclbr.Function",
    "name": "file"
   },
   {
    "annotation": "int",
    "className": "pyclbr.Function",
    "name": "lineno"
   }
  ],
  "methods": []
 },
 {
  "className": "pydoc.ErrorDuringImport",
  "fields": [
   {
    "annotation": "str",
    "className": "pydoc.ErrorDuringImport",
    "name": "filename"
   },
   {
    "annotation": "(type[BaseException] | None)",
    "className": "pydoc.ErrorDuringImport",
    "name": "exc"
   },
   {
    "annotation": "(BaseException | None)",
    "className": "pydoc.ErrorDuringImport",
    "name": "value"
   },
   {
    "annotation": "(TracebackType | None)",
    "className": "pydoc.ErrorDuringImport",
    "name": "tb"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "_Exc_Info",
      "arg": "exc_info"
     }
    ],
    "className": "pydoc.ErrorDuringImport",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pydoc.Doc",
  "fields": [
   {
    "annotation": "str",
    "className": "pydoc.Doc",
    "name": "PYTHONDOCS"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "document",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "fail",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "docmodule",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "docclass",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "docroutine",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "docother",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "docproperty",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "docdata",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "str",
      "arg": "basedir"
     }
    ],
    "className": "pydoc.Doc",
    "kwonlyargs": [],
    "name": "getdocloc",
    "returns": "(str | None)"
   }
  ]
 },
 {
  "className": "pydoc.HTMLRepr",
  "fields": [
   {
    "annotation": "int",
    "className": "pydoc.HTMLRepr",
    "name": "maxlist"
   },
   {
    "annotation": "int",
    "className": "pydoc.HTMLRepr",
    "name": "maxtuple"
   },
   {
    "annotation": "int",
    "className": "pydoc.HTMLRepr",
    "name": "maxdict"
   },
   {
    "annotation": "int",
    "className": "pydoc.HTMLRepr",
    "name": "maxstring"
   },
   {
    "annotation": "int",
    "className": "pydoc.HTMLRepr",
    "name": "maxother"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.HTMLRepr",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "pydoc.HTMLRepr",
    "kwonlyargs": [],
    "name": "escape",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "pydoc.HTMLRepr",
    "kwonlyargs": [],
    "name": "repr",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.HTMLRepr",
    "kwonlyargs": [],
    "name": "repr1",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.HTMLRepr",
    "kwonlyargs": [],
    "name": "repr_string",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.HTMLRepr",
    "kwonlyargs": [],
    "name": "repr_str",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.HTMLRepr",
    "kwonlyargs": [],
    "name": "repr_instance",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "AnyStr",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.HTMLRepr",
    "kwonlyargs": [],
    "name": "repr_unicode",
    "returns": "str"
   }
  ]
 },
 {
  "className": "pydoc.HTMLDoc",
  "fields": [
   {
    "annotation": "HTMLRepr",
    "className": "pydoc.HTMLDoc",
    "name": "_repr_instance"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "str",
      "arg": "contents"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "page",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "str",
      "arg": "fgcol"
     },
     {
      "annotation": "str",
      "arg": "bgcol"
     },
     {
      "annotation": "str",
      "arg": "extras"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "heading",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "str",
      "arg": "fgcol"
     },
     {
      "annotation": "str",
      "arg": "bgcol"
     },
     {
      "annotation": "str",
      "arg": "contents"
     },
     {
      "annotation": "int",
      "arg": "width"
     },
     {
      "annotation": "str",
      "arg": "prelude"
     },
     {
      "annotation": "(str | None)",
      "arg": "marginalia"
     },
     {
      "annotation": "str",
      "arg": "gap"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "section",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "title"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "bigsection",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "preformat",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[_T]",
      "arg": "list"
     },
     {
      "annotation": "Callable[[_T], str]",
      "arg": "format"
     },
     {
      "annotation": "int",
      "arg": "cols"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "multicolumn",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "grey",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "namelink",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "str",
      "arg": "modname"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "classlink",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "modulelink",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[str, str, bool, bool]",
      "arg": "modpkginfo"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "modpkglink",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "(Callable[[str], str] | None)",
      "arg": "escape"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "funcs"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "classes"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "methods"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "markup",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[tuple[type, tuple[type, ...]] | list[Any]]",
      "arg": "tree"
     },
     {
      "annotation": "str",
      "arg": "modname"
     },
     {
      "annotation": "(type | None)",
      "arg": "parent"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "formattree",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "mod"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "docmodule",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "mod"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "funcs"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "classes"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "docclass",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "formatvalue",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "mod"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "funcs"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "classes"
     },
     {
      "annotation": "Mapping[str, str]",
      "arg": "methods"
     },
     {
      "annotation": "(type | None)",
      "arg": "cl"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "docroutine",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "mod"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cl"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "docproperty",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(Any | None)",
      "arg": "mod"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "docother",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(Any | None)",
      "arg": "mod"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cl"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "docdata",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "dir"
     },
     {
      "annotation": "(MutableMapping[str, bool] | None)",
      "arg": "shadowed"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "index",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "url"
     },
     {
      "annotation": "str",
      "arg": "path"
     }
    ],
    "className": "pydoc.HTMLDoc",
    "kwonlyargs": [],
    "name": "filelink",
    "returns": "str"
   }
  ]
 },
 {
  "className": "pydoc.TextRepr",
  "fields": [
   {
    "annotation": "int",
    "className": "pydoc.TextRepr",
    "name": "maxlist"
   },
   {
    "annotation": "int",
    "className": "pydoc.TextRepr",
    "name": "maxtuple"
   },
   {
    "annotation": "int",
    "className": "pydoc.TextRepr",
    "name": "maxdict"
   },
   {
    "annotation": "int",
    "className": "pydoc.TextRepr",
    "name": "maxstring"
   },
   {
    "annotation": "int",
    "className": "pydoc.TextRepr",
    "name": "maxother"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.TextRepr",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.TextRepr",
    "kwonlyargs": [],
    "name": "repr1",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.TextRepr",
    "kwonlyargs": [],
    "name": "repr_string",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.TextRepr",
    "kwonlyargs": [],
    "name": "repr_str",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "x"
     },
     {
      "annotation": "complex",
      "arg": "level"
     }
    ],
    "className": "pydoc.TextRepr",
    "kwonlyargs": [],
    "name": "repr_instance",
    "returns": "str"
   }
  ]
 },
 {
  "className": "pydoc.TextDoc",
  "fields": [
   {
    "annotation": "TextRepr",
    "className": "pydoc.TextDoc",
    "name": "_repr_instance"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "bold",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "str",
      "arg": "prefix"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "indent",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "title"
     },
     {
      "annotation": "str",
      "arg": "contents"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "section",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[tuple[type, tuple[type, ...]] | list[Any]]",
      "arg": "tree"
     },
     {
      "annotation": "str",
      "arg": "modname"
     },
     {
      "annotation": "(type | None)",
      "arg": "parent"
     },
     {
      "annotation": "str",
      "arg": "prefix"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "formattree",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(Any | None)",
      "arg": "mod"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "docmodule",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "mod"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "docclass",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "formatvalue",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "mod"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cl"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "docroutine",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(Any | None)",
      "arg": "mod"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cl"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "docproperty",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "mod"
     },
     {
      "annotation": "(Any | None)",
      "arg": "cl"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "docdata",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "object"
     },
     {
      "annotation": "(str | None)",
      "arg": "name"
     },
     {
      "annotation": "(str | None)",
      "arg": "mod"
     },
     {
      "annotation": "(str | None)",
      "arg": "parent"
     },
     {
      "annotation": "(int | None)",
      "arg": "maxlen"
     },
     {
      "annotation": "(Any | None)",
      "arg": "doc"
     }
    ],
    "className": "pydoc.TextDoc",
    "kwonlyargs": [],
    "name": "docother",
    "returns": "str"
   }
  ]
 },
 {
  "className": "pydoc.Helper",
  "fields": [
   {
    "annotation": "dict[str, str | tuple[str, str]]",
    "className": "pydoc.Helper",
    "name": "keywords"
   },
   {
    "annotation": "dict[str, str]",
    "className": "pydoc.Helper",
    "name": "symbols"
   },
   {
    "annotation": "dict[str, str | tuple[str, ...]]",
    "className": "pydoc.Helper",
    "name": "topics"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "input"
     },
     {
      "annotation": "(IO[str] | None)",
      "arg": "output"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "input",
    "returns": "IO[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "output",
    "returns": "IO[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | Helper | object)",
      "arg": "request"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "interact",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "prompt"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "getline",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "request"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "help",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "intro",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_list[str]",
      "arg": "items"
     },
     {
      "annotation": "int",
      "arg": "columns"
     },
     {
      "annotation": "int",
      "arg": "width"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "list",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "listkeywords",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "listsymbols",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "listtopics",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "topic"
     },
     {
      "annotation": "str",
      "arg": "more_xrefs"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "showtopic",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "symbol"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "showsymbol",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "pydoc.Helper",
    "kwonlyargs": [],
    "name": "listmodules",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pydoc.ModuleScanner",
  "fields": [
   {
    "annotation": "bool",
    "className": "pydoc.ModuleScanner",
    "name": "quit"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[str | None, str, str], None]",
      "arg": "callback"
     },
     {
      "annotation": "(str | None)",
      "arg": "key"
     },
     {
      "annotation": "(Callable[[], None] | None)",
      "arg": "completer"
     },
     {
      "annotation": "(Callable[[str], None] | None)",
      "arg": "onerror"
     }
    ],
    "className": "pydoc.ModuleScanner",
    "kwonlyargs": [],
    "name": "run",
    "returns": "None"
   }
  ]
 },
 {
  "className": "xdrlib.Error",
  "fields": [
   {
    "annotation": "str",
    "className": "xdrlib.Error",
    "name": "msg"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     }
    ],
    "className": "xdrlib.Error",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "xdrlib.ConversionError",
  "fields": [],
  "methods": []
 },
 {
  "className": "xdrlib.Packer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "get_buffer",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "get_buf",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_uint",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_int",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_enum",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "x"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_bool",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_uhyper",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_hyper",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_float",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "x"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_double",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     },
     {
      "annotation": "bytes",
      "arg": "s"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_fstring",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     },
     {
      "annotation": "bytes",
      "arg": "s"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_fopaque",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "s"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_string",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "s"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_opaque",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "s"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_bytes",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "list"
     },
     {
      "annotation": "Callable[[_T], None]",
      "arg": "pack_item"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_list",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "list"
     },
     {
      "annotation": "Callable[[_T], None]",
      "arg": "pack_item"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_farray",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Sequence[_T]",
      "arg": "list"
     },
     {
      "annotation": "Callable[[_T], None]",
      "arg": "pack_item"
     }
    ],
    "className": "xdrlib.Packer",
    "kwonlyargs": [],
    "name": "pack_array",
    "returns": "None"
   }
  ]
 },
 {
  "className": "xdrlib.Unpacker",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "data"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "reset",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "get_position",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "position"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "set_position",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "get_buffer",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "done",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_uint",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_int",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_enum",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_bool",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_uhyper",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_hyper",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_float",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_double",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_fstring",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_fopaque",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_string",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_opaque",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_bytes",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[], _T]",
      "arg": "unpack_item"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_list",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     },
     {
      "annotation": "Callable[[], _T]",
      "arg": "unpack_item"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_farray",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[], _T]",
      "arg": "unpack_item"
     }
    ],
    "className": "xdrlib.Unpacker",
    "kwonlyargs": [],
    "name": "unpack_array",
    "returns": "list[_T]"
   }
  ]
 },
 {
  "className": "filecmp.dircmp",
  "fields": [
   {
    "annotation": "AnyStr",
    "className": "filecmp.dircmp",
    "name": "left"
   },
   {
    "annotation": "AnyStr",
    "className": "filecmp.dircmp",
    "name": "right"
   },
   {
    "annotation": "Sequence[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "hide"
   },
   {
    "annotation": "Sequence[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "ignore"
   },
   {
    "annotation": "dict[AnyStr, dircmp[AnyStr]]",
    "className": "filecmp.dircmp",
    "name": "subdirs"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "same_files"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "diff_files"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "funny_files"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "common_dirs"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "common_files"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "common_funny"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "common"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "left_only"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "right_only"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "left_list"
   },
   {
    "annotation": "list[AnyStr]",
    "className": "filecmp.dircmp",
    "name": "right_list"
   },
   {
    "annotation": "dict[str, Callable[[], None]]",
    "className": "filecmp.dircmp",
    "name": "methodmap"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(AnyStr | PathLike[AnyStr])",
      "arg": "a"
     },
     {
      "annotation": "(AnyStr | PathLike[AnyStr])",
      "arg": "b"
     },
     {
      "annotation": "(Sequence[AnyStr] | None)",
      "arg": "ignore"
     },
     {
      "annotation": "(Sequence[AnyStr] | None)",
      "arg": "hide"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "report",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "report_partial_closure",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "report_full_closure",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "phase0",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "phase1",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "phase2",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "phase3",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "phase4",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "filecmp.dircmp",
    "kwonlyargs": [],
    "name": "phase4_closure",
    "returns": "None"
   }
  ]
 },
 {
  "className": "pyexpat.ExpatError",
  "fields": [
   {
    "annotation": "int",
    "className": "pyexpat.ExpatError",
    "name": "code"
   },
   {
    "annotation": "int",
    "className": "pyexpat.ExpatError",
    "name": "lineno"
   },
   {
    "annotation": "int",
    "className": "pyexpat.ExpatError",
    "name": "offset"
   }
  ],
  "methods": []
 },
 {
  "className": "pyexpat.XMLParserType",
  "fields": [
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "buffer_size"
   },
   {
    "annotation": "bool",
    "className": "pyexpat.XMLParserType",
    "name": "buffer_text"
   },
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "buffer_used"
   },
   {
    "annotation": "bool",
    "className": "pyexpat.XMLParserType",
    "name": "namespace_prefixes"
   },
   {
    "annotation": "bool",
    "className": "pyexpat.XMLParserType",
    "name": "ordered_attributes"
   },
   {
    "annotation": "bool",
    "className": "pyexpat.XMLParserType",
    "name": "specified_attributes"
   },
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "ErrorByteIndex"
   },
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "ErrorCode"
   },
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "ErrorColumnNumber"
   },
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "ErrorLineNumber"
   },
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "CurrentByteIndex"
   },
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "CurrentColumnNumber"
   },
   {
    "annotation": "int",
    "className": "pyexpat.XMLParserType",
    "name": "CurrentLineNumber"
   },
   {
    "annotation": "(Callable[[str, str | None, int], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "XmlDeclHandler"
   },
   {
    "annotation": "(Callable[[str, str | None, str | None, bool], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "StartDoctypeDeclHandler"
   },
   {
    "annotation": "(Callable[[], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "EndDoctypeDeclHandler"
   },
   {
    "annotation": "(Callable[[str, _Model], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "ElementDeclHandler"
   },
   {
    "annotation": "(Callable[[str, str, str, str | None, bool], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "AttlistDeclHandler"
   },
   {
    "annotation": "(Callable[[str, dict[str, str]], Any] | Callable[[str, list[str]], Any] |\n    Callable[[str, dict[str, str], list[str]], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "StartElementHandler"
   },
   {
    "annotation": "(Callable[[str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "EndElementHandler"
   },
   {
    "annotation": "(Callable[[str, str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "ProcessingInstructionHandler"
   },
   {
    "annotation": "(Callable[[str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "CharacterDataHandler"
   },
   {
    "annotation": "(Callable[[str, str | None, str, str | None, str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "UnparsedEntityDeclHandler"
   },
   {
    "annotation": "(Callable[[str, bool, str | None, str | None, str, str | None, str | None],\n    Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "EntityDeclHandler"
   },
   {
    "annotation": "(Callable[[str, str | None, str, str | None], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "NotationDeclHandler"
   },
   {
    "annotation": "(Callable[[str, str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "StartNamespaceDeclHandler"
   },
   {
    "annotation": "(Callable[[str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "EndNamespaceDeclHandler"
   },
   {
    "annotation": "(Callable[[str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "CommentHandler"
   },
   {
    "annotation": "(Callable[[], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "StartCdataSectionHandler"
   },
   {
    "annotation": "(Callable[[], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "EndCdataSectionHandler"
   },
   {
    "annotation": "(Callable[[str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "DefaultHandler"
   },
   {
    "annotation": "(Callable[[str], Any] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "DefaultHandlerExpand"
   },
   {
    "annotation": "(Callable[[], int] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "NotStandaloneHandler"
   },
   {
    "annotation": "(Callable[[str, str | None, str | None, str | None], int] | None)",
    "className": "pyexpat.XMLParserType",
    "name": "ExternalEntityRefHandler"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | bytes)",
      "arg": "__data"
     },
     {
      "annotation": "bool",
      "arg": "__isfinal"
     }
    ],
    "className": "pyexpat.XMLParserType",
    "kwonlyargs": [],
    "name": "Parse",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsRead[bytes]",
      "arg": "__file"
     }
    ],
    "className": "pyexpat.XMLParserType",
    "kwonlyargs": [],
    "name": "ParseFile",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "__base"
     }
    ],
    "className": "pyexpat.XMLParserType",
    "kwonlyargs": [],
    "name": "SetBase",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pyexpat.XMLParserType",
    "kwonlyargs": [],
    "name": "GetBase",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "pyexpat.XMLParserType",
    "kwonlyargs": [],
    "name": "GetInputContext",
    "returns": "(bytes | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "__context"
     },
     {
      "annotation": "str",
      "arg": "__encoding"
     }
    ],
    "className": "pyexpat.XMLParserType",
    "kwonlyargs": [],
    "name": "ExternalEntityParserCreate",
    "returns": "XMLParserType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__flag"
     }
    ],
    "className": "pyexpat.XMLParserType",
    "kwonlyargs": [],
    "name": "SetParamEntityParsing",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "__flag"
     }
    ],
    "className": "pyexpat.XMLParserType",
    "kwonlyargs": [],
    "name": "UseForeignDTD",
    "returns": "None"
   }
  ]
 },
 {
  "className": "fileinput.FileInput",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "__del__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "traceback"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "__iter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "__next__",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "nextfile",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "AnyStr"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "filename",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "lineno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "filelineno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "fileno",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "isfirstline",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fileinput.FileInput",
    "kwonlyargs": [],
    "name": "isstdin",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "queue.Empty",
  "fields": [],
  "methods": []
 },
 {
  "className": "queue.Full",
  "fields": [],
  "methods": []
 },
 {
  "className": "queue.Queue",
  "fields": [
   {
    "annotation": "int",
    "className": "queue.Queue",
    "name": "maxsize"
   },
   {
    "annotation": "Lock",
    "className": "queue.Queue",
    "name": "mutex"
   },
   {
    "annotation": "Condition",
    "className": "queue.Queue",
    "name": "not_empty"
   },
   {
    "annotation": "Condition",
    "className": "queue.Queue",
    "name": "not_full"
   },
   {
    "annotation": "Condition",
    "className": "queue.Queue",
    "name": "all_tasks_done"
   },
   {
    "annotation": "int",
    "className": "queue.Queue",
    "name": "unfinished_tasks"
   },
   {
    "annotation": "Any",
    "className": "queue.Queue",
    "name": "queue"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "maxsize"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "maxsize"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "_init",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "empty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "full",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "block"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "get",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "get_nowait",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "_get",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     },
     {
      "annotation": "bool",
      "arg": "block"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "put",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "put_nowait",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "_put",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "join",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "qsize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "_qsize",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.Queue",
    "kwonlyargs": [],
    "name": "task_done",
    "returns": "None"
   }
  ]
 },
 {
  "className": "queue.PriorityQueue",
  "fields": [
   {
    "annotation": "list[_T]",
    "className": "queue.PriorityQueue",
    "name": "queue"
   }
  ],
  "methods": []
 },
 {
  "className": "queue.LifoQueue",
  "fields": [
   {
    "annotation": "list[_T]",
    "className": "queue.LifoQueue",
    "name": "queue"
   }
  ],
  "methods": []
 },
 {
  "className": "queue.SimpleQueue",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.SimpleQueue",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.SimpleQueue",
    "kwonlyargs": [],
    "name": "empty",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bool",
      "arg": "block"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "queue.SimpleQueue",
    "kwonlyargs": [],
    "name": "get",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.SimpleQueue",
    "kwonlyargs": [],
    "name": "get_nowait",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     },
     {
      "annotation": "bool",
      "arg": "block"
     },
     {
      "annotation": "(float | None)",
      "arg": "timeout"
     }
    ],
    "className": "queue.SimpleQueue",
    "kwonlyargs": [],
    "name": "put",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_T",
      "arg": "item"
     }
    ],
    "className": "queue.SimpleQueue",
    "kwonlyargs": [],
    "name": "put_nowait",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "queue.SimpleQueue",
    "kwonlyargs": [],
    "name": "qsize",
    "returns": "int"
   }
  ]
 },
 {
  "className": "xxlimited.Str",
  "fields": [],
  "methods": []
 },
 {
  "className": "xxlimited.Xxo",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "xxlimited.Xxo",
    "kwonlyargs": [],
    "name": "demo",
    "returns": "None"
   }
  ]
 },
 {
  "className": "xxlimited.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "fractions.Fraction",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(int | Rational)",
      "arg": "numerator"
     },
     {
      "annotation": "(int | Rational | None)",
      "arg": "denominator"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "_normalize"
     }
    ],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "(float | Decimal | str)",
      "arg": "__value"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "_normalize"
     }
    ],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "float",
      "arg": "f"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "from_float",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "Decimal",
      "arg": "dec"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "from_decimal",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "max_denominator"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "limit_denominator",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "numerator",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "denominator",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__add__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__radd__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__sub__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rsub__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__mul__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rmul__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rtruediv__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__floordiv__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__floordiv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rfloordiv__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rfloordiv__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__mod__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rmod__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rmod__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__divmod__",
    "returns": "tuple[int, Fraction]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__divmod__",
    "returns": "tuple[float, Fraction]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | Fraction)",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rdivmod__",
    "returns": "tuple[int, Fraction]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rdivmod__",
    "returns": "tuple[float, Fraction]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(float | Fraction)",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__pow__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | float | Fraction)",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rpow__",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "complex",
      "arg": "a"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__rpow__",
    "returns": "complex"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__pos__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__neg__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__abs__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__trunc__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__floor__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__ceil__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "ndigits"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "ndigits"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__round__",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__hash__",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__eq__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ComparableNum",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__lt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ComparableNum",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__gt__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ComparableNum",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__le__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_ComparableNum",
      "arg": "b"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__ge__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__bool__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__copy__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "memo"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "__deepcopy__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "real",
    "returns": "Fraction"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "imag",
    "returns": "Literal[0]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "fractions.Fraction",
    "kwonlyargs": [],
    "name": "conjugate",
    "returns": "Fraction"
   }
  ]
 },
 {
  "className": "random.Random",
  "fields": [
   {
    "annotation": "ClassVar[int]",
    "className": "random.Random",
    "name": "VERSION"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "x"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "getstate",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[Any, ...]",
      "arg": "state"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "setstate",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "__k"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "getrandbits",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "start"
     },
     {
      "annotation": "(int | None)",
      "arg": "stop"
     },
     {
      "annotation": "int",
      "arg": "step"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "randrange",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "a"
     },
     {
      "annotation": "int",
      "arg": "b"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "randint",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsLenAndGetItem[_T]",
      "arg": "seq"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "choice",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "SupportsLenAndGetItem[_T]",
      "arg": "population"
     },
     {
      "annotation": "(Sequence[float | Fraction] | None)",
      "arg": "weights"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [
     {
      "annotation": "(Sequence[float | Fraction] | None)",
      "arg": "cum_weights"
     },
     {
      "annotation": "int",
      "arg": "k"
     }
    ],
    "name": "choices",
    "returns": "list[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "random",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "a"
     },
     {
      "annotation": "float",
      "arg": "b"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "uniform",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "low"
     },
     {
      "annotation": "float",
      "arg": "high"
     },
     {
      "annotation": "(float | None)",
      "arg": "mode"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "triangular",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "alpha"
     },
     {
      "annotation": "float",
      "arg": "beta"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "betavariate",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "lambd"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "expovariate",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "alpha"
     },
     {
      "annotation": "float",
      "arg": "beta"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "gammavariate",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "mu"
     },
     {
      "annotation": "float",
      "arg": "sigma"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "lognormvariate",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "mu"
     },
     {
      "annotation": "float",
      "arg": "kappa"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "vonmisesvariate",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "alpha"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "paretovariate",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "float",
      "arg": "alpha"
     },
     {
      "annotation": "float",
      "arg": "beta"
     }
    ],
    "className": "random.Random",
    "kwonlyargs": [],
    "name": "weibullvariate",
    "returns": "float"
   }
  ]
 },
 {
  "className": "random.SystemRandom",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "k"
     }
    ],
    "className": "random.SystemRandom",
    "kwonlyargs": [],
    "name": "getrandbits",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "random.SystemRandom",
    "kwonlyargs": [],
    "name": "getstate",
    "returns": "NoReturn"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "random.SystemRandom",
    "kwonlyargs": [],
    "name": "setstate",
    "returns": "NoReturn"
   }
  ]
 },
 {
  "className": "ftplib.Error",
  "fields": [],
  "methods": []
 },
 {
  "className": "ftplib.error_reply",
  "fields": [],
  "methods": []
 },
 {
  "className": "ftplib.error_temp",
  "fields": [],
  "methods": []
 },
 {
  "className": "ftplib.error_perm",
  "fields": [],
  "methods": []
 },
 {
  "className": "ftplib.error_proto",
  "fields": [],
  "methods": []
 },
 {
  "className": "ftplib.FTP",
  "fields": [
   {
    "annotation": "int",
    "className": "ftplib.FTP",
    "name": "debugging"
   },
   {
    "annotation": "str",
    "className": "ftplib.FTP",
    "name": "host"
   },
   {
    "annotation": "int",
    "className": "ftplib.FTP",
    "name": "port"
   },
   {
    "annotation": "int",
    "className": "ftplib.FTP",
    "name": "maxline"
   },
   {
    "annotation": "(socket | None)",
    "className": "ftplib.FTP",
    "name": "sock"
   },
   {
    "annotation": "(str | None)",
    "className": "ftplib.FTP",
    "name": "welcome"
   },
   {
    "annotation": "int",
    "className": "ftplib.FTP",
    "name": "passiveserver"
   },
   {
    "annotation": "int",
    "className": "ftplib.FTP",
    "name": "timeout"
   },
   {
    "annotation": "int",
    "className": "ftplib.FTP",
    "name": "af"
   },
   {
    "annotation": "str",
    "className": "ftplib.FTP",
    "name": "lastresp"
   },
   {
    "annotation": "(TextIO | None)",
    "className": "ftplib.FTP",
    "name": "file"
   },
   {
    "annotation": "str",
    "className": "ftplib.FTP",
    "name": "encoding"
   },
   {
    "annotation": "(tuple[str, int] | None)",
    "className": "ftplib.FTP",
    "name": "source_address"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "exc_type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "exc_val"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "exc_tb"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     },
     {
      "annotation": "float",
      "arg": "timeout"
     },
     {
      "annotation": "(tuple[str, int] | None)",
      "arg": "source_address"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "connect",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "getwelcome",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "set_debuglevel",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "debug",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bool | int)",
      "arg": "val"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "set_pasv",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "s"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "sanitize",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "putline",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "line"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "putcmd",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "getline",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "getmultiline",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "getresp",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "voidresp",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "abort",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "sendcmd",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "voidcmd",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "sendport",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "host"
     },
     {
      "annotation": "int",
      "arg": "port"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "sendeprt",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "makeport",
    "returns": "socket"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "makepasv",
    "returns": "tuple[str, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     },
     {
      "annotation": "str",
      "arg": "passwd"
     },
     {
      "annotation": "str",
      "arg": "acct"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "login",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "(int | str | None)",
      "arg": "rest"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "ntransfercmd",
    "returns": "tuple[socket, int]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "(int | str | None)",
      "arg": "rest"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "transfercmd",
    "returns": "socket"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "Callable[[bytes], Any]",
      "arg": "callback"
     },
     {
      "annotation": "int",
      "arg": "blocksize"
     },
     {
      "annotation": "(int | str | None)",
      "arg": "rest"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "retrbinary",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "SupportsRead[bytes]",
      "arg": "fp"
     },
     {
      "annotation": "int",
      "arg": "blocksize"
     },
     {
      "annotation": "(Callable[[bytes], Any] | None)",
      "arg": "callback"
     },
     {
      "annotation": "(int | str | None)",
      "arg": "rest"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "storbinary",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "(Callable[[str], Any] | None)",
      "arg": "callback"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "retrlines",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "cmd"
     },
     {
      "annotation": "SupportsReadline[bytes]",
      "arg": "fp"
     },
     {
      "annotation": "(Callable[[bytes], Any] | None)",
      "arg": "callback"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "storlines",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "password"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "acct",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "nlst",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "dir",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "path"
     },
     {
      "annotation": "Iterable[str]",
      "arg": "facts"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "mlsd",
    "returns": "Iterator[tuple[str, dict[str, str]]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fromname"
     },
     {
      "annotation": "str",
      "arg": "toname"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "rename",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "delete",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "dirname"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "cwd",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "size",
    "returns": "(int | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "dirname"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "mkd",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "dirname"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "rmd",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "pwd",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "quit",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   }
  ]
 },
 {
  "className": "ftplib.FTP_TLS",
  "fields": [
   {
    "annotation": "int",
    "className": "ftplib.FTP_TLS",
    "name": "ssl_version"
   },
   {
    "annotation": "(str | None)",
    "className": "ftplib.FTP_TLS",
    "name": "keyfile"
   },
   {
    "annotation": "(str | None)",
    "className": "ftplib.FTP_TLS",
    "name": "certfile"
   },
   {
    "annotation": "SSLContext",
    "className": "ftplib.FTP_TLS",
    "name": "context"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "user"
     },
     {
      "annotation": "str",
      "arg": "passwd"
     },
     {
      "annotation": "str",
      "arg": "acct"
     },
     {
      "annotation": "bool",
      "arg": "secure"
     }
    ],
    "className": "ftplib.FTP_TLS",
    "kwonlyargs": [],
    "name": "login",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP_TLS",
    "kwonlyargs": [],
    "name": "auth",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP_TLS",
    "kwonlyargs": [],
    "name": "prot_p",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP_TLS",
    "kwonlyargs": [],
    "name": "prot_c",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "ftplib.FTP_TLS",
    "kwonlyargs": [],
    "name": "ccc",
    "returns": "str"
   }
  ]
 },
 {
  "className": "re.RegexFlag",
  "fields": [],
  "methods": []
 },
 {
  "className": "zipapp.ZipAppError",
  "fields": [],
  "methods": []
 },
 {
  "className": "functools.partial",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "functools.partial",
    "kwonlyargs": [],
    "name": "func",
    "returns": "Callable[..., _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "functools.partial",
    "kwonlyargs": [],
    "name": "args",
    "returns": "tuple[Any, ...]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "functools.partial",
    "kwonlyargs": [],
    "name": "keywords",
    "returns": "dict[str, Any]"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "Callable[..., _T]",
      "arg": "__func"
     }
    ],
    "className": "functools.partial",
    "kwonlyargs": [],
    "name": "__new__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "__self"
     }
    ],
    "className": "functools.partial",
    "kwonlyargs": [],
    "name": "__call__",
    "returns": "_T"
   }
  ]
 },
 {
  "className": "functools.partialmethod",
  "fields": [
   {
    "annotation": "(Callable[..., _T] | _Descriptor)",
    "className": "functools.partialmethod",
    "name": "func"
   },
   {
    "annotation": "tuple[Any, ...]",
    "className": "functools.partialmethod",
    "name": "args"
   },
   {
    "annotation": "dict[str, Any]",
    "className": "functools.partialmethod",
    "name": "keywords"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _T]",
      "arg": "__func"
     }
    ],
    "className": "functools.partialmethod",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_Descriptor",
      "arg": "__func"
     }
    ],
    "className": "functools.partialmethod",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "functools.partialmethod",
    "kwonlyargs": [],
    "name": "__isabstractmethod__",
    "returns": "bool"
   }
  ]
 },
 {
  "className": "functools.singledispatchmethod",
  "fields": [
   {
    "annotation": "_SingleDispatchCallable[_T]",
    "className": "functools.singledispatchmethod",
    "name": "dispatcher"
   },
   {
    "annotation": "Callable[..., _T]",
    "className": "functools.singledispatchmethod",
    "name": "func"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _T]",
      "arg": "func"
     }
    ],
    "className": "functools.singledispatchmethod",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "functools.singledispatchmethod",
    "kwonlyargs": [],
    "name": "__isabstractmethod__",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[Any]",
      "arg": "cls"
     },
     {
      "annotation": "None",
      "arg": "method"
     }
    ],
    "className": "functools.singledispatchmethod",
    "kwonlyargs": [],
    "name": "register",
    "returns": "Callable[[Callable[..., _T]], Callable[..., _T]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[..., _T]",
      "arg": "cls"
     },
     {
      "annotation": "None",
      "arg": "method"
     }
    ],
    "className": "functools.singledispatchmethod",
    "kwonlyargs": [],
    "name": "register",
    "returns": "Callable[..., _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[Any]",
      "arg": "cls"
     },
     {
      "annotation": "Callable[..., _T]",
      "arg": "method"
     }
    ],
    "className": "functools.singledispatchmethod",
    "kwonlyargs": [],
    "name": "register",
    "returns": "Callable[..., _T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "_S",
      "arg": "obj"
     },
     {
      "annotation": "(type[_S] | None)",
      "arg": "cls"
     }
    ],
    "className": "functools.singledispatchmethod",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "Callable[..., _T]"
   }
  ]
 },
 {
  "className": "functools.cached_property",
  "fields": [
   {
    "annotation": "Callable[[Any], _T]",
    "className": "functools.cached_property",
    "name": "func"
   },
   {
    "annotation": "(str | None)",
    "className": "functools.cached_property",
    "name": "attrname"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Callable[[Any], _T]",
      "arg": "func"
     }
    ],
    "className": "functools.cached_property",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "None",
      "arg": "instance"
     },
     {
      "annotation": "(type[Any] | None)",
      "arg": "owner"
     }
    ],
    "className": "functools.cached_property",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "cached_property[_T]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "object",
      "arg": "instance"
     },
     {
      "annotation": "(type[Any] | None)",
      "arg": "owner"
     }
    ],
    "className": "functools.cached_property",
    "kwonlyargs": [],
    "name": "__get__",
    "returns": "_T"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "type[Any]",
      "arg": "owner"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "functools.cached_property",
    "kwonlyargs": [],
    "name": "__set_name__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "zipfile.BadZipFile",
  "fields": [],
  "methods": []
 },
 {
  "className": "zipfile.LargeZipFile",
  "fields": [],
  "methods": []
 },
 {
  "className": "zipfile.ZipExtFile",
  "fields": [
   {
    "annotation": "int",
    "className": "zipfile.ZipExtFile",
    "name": "MAX_N"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipExtFile",
    "name": "MIN_READ_SIZE"
   },
   {
    "annotation": "(list[bytes] | None)",
    "className": "zipfile.ZipExtFile",
    "name": "newlines"
   },
   {
    "annotation": "_ReadWriteMode",
    "className": "zipfile.ZipExtFile",
    "name": "mode"
   },
   {
    "annotation": "str",
    "className": "zipfile.ZipExtFile",
    "name": "name"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "n"
     }
    ],
    "className": "zipfile.ZipExtFile",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "limit"
     }
    ],
    "className": "zipfile.ZipExtFile",
    "kwonlyargs": [],
    "name": "readline",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "n"
     }
    ],
    "className": "zipfile.ZipExtFile",
    "kwonlyargs": [],
    "name": "peek",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(int | None)",
      "arg": "n"
     }
    ],
    "className": "zipfile.ZipExtFile",
    "kwonlyargs": [],
    "name": "read1",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "zipfile.ZipFile",
  "fields": [
   {
    "annotation": "(str | None)",
    "className": "zipfile.ZipFile",
    "name": "filename"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipFile",
    "name": "debug"
   },
   {
    "annotation": "bytes",
    "className": "zipfile.ZipFile",
    "name": "comment"
   },
   {
    "annotation": "list[ZipInfo]",
    "className": "zipfile.ZipFile",
    "name": "filelist"
   },
   {
    "annotation": "(IO[bytes] | None)",
    "className": "zipfile.ZipFile",
    "name": "fp"
   },
   {
    "annotation": "dict[str, ZipInfo]",
    "className": "zipfile.ZipFile",
    "name": "NameToInfo"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipFile",
    "name": "start_dir"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipFile",
    "name": "compression"
   },
   {
    "annotation": "(int | None)",
    "className": "zipfile.ZipFile",
    "name": "compresslevel"
   },
   {
    "annotation": "_ZipFileMode",
    "className": "zipfile.ZipFile",
    "name": "mode"
   },
   {
    "annotation": "(str | None)",
    "className": "zipfile.ZipFile",
    "name": "pwd"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "Self",
      "arg": "self"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "__enter__",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(type[BaseException] | None)",
      "arg": "type"
     },
     {
      "annotation": "(BaseException | None)",
      "arg": "value"
     },
     {
      "annotation": "(TracebackType | None)",
      "arg": "traceback"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "__exit__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "close",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "name"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "getinfo",
    "returns": "ZipInfo"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "infolist",
    "returns": "list[ZipInfo]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "namelist",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | ZipInfo)",
      "arg": "name"
     },
     {
      "annotation": "_ReadWriteMode",
      "arg": "mode"
     },
     {
      "annotation": "(bytes | None)",
      "arg": "pwd"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [
     {
      "annotation": "bool",
      "arg": "force_zip64"
     }
    ],
    "name": "open",
    "returns": "IO[bytes]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | ZipInfo)",
      "arg": "member"
     },
     {
      "annotation": "(StrPath | None)",
      "arg": "path"
     },
     {
      "annotation": "(bytes | None)",
      "arg": "pwd"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "extract",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(StrPath | None)",
      "arg": "path"
     },
     {
      "annotation": "(Iterable[str | ZipInfo] | None)",
      "arg": "members"
     },
     {
      "annotation": "(bytes | None)",
      "arg": "pwd"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "extractall",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(_Writer | None)",
      "arg": "file"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "printdir",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "bytes",
      "arg": "pwd"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "setpassword",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | ZipInfo)",
      "arg": "name"
     },
     {
      "annotation": "(bytes | None)",
      "arg": "pwd"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "read",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.ZipFile",
    "kwonlyargs": [],
    "name": "testzip",
    "returns": "(str | None)"
   }
  ]
 },
 {
  "className": "zipfile.PyZipFile",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | IO[bytes])",
      "arg": "file"
     },
     {
      "annotation": "_ZipFileMode",
      "arg": "mode"
     },
     {
      "annotation": "int",
      "arg": "compression"
     },
     {
      "annotation": "bool",
      "arg": "allowZip64"
     },
     {
      "annotation": "int",
      "arg": "optimize"
     }
    ],
    "className": "zipfile.PyZipFile",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "pathname"
     },
     {
      "annotation": "str",
      "arg": "basename"
     },
     {
      "annotation": "(Callable[[str], bool] | None)",
      "arg": "filterfunc"
     }
    ],
    "className": "zipfile.PyZipFile",
    "kwonlyargs": [],
    "name": "writepy",
    "returns": "None"
   }
  ]
 },
 {
  "className": "zipfile.ZipInfo",
  "fields": [
   {
    "annotation": "str",
    "className": "zipfile.ZipInfo",
    "name": "filename"
   },
   {
    "annotation": "_DateTuple",
    "className": "zipfile.ZipInfo",
    "name": "date_time"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "compress_type"
   },
   {
    "annotation": "bytes",
    "className": "zipfile.ZipInfo",
    "name": "comment"
   },
   {
    "annotation": "bytes",
    "className": "zipfile.ZipInfo",
    "name": "extra"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "create_system"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "create_version"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "extract_version"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "reserved"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "flag_bits"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "volume"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "internal_attr"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "external_attr"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "header_offset"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "CRC"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "compress_size"
   },
   {
    "annotation": "int",
    "className": "zipfile.ZipInfo",
    "name": "file_size"
   },
   {
    "annotation": "str",
    "className": "zipfile.ZipInfo",
    "name": "orig_filename"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "filename"
     },
     {
      "annotation": "_DateTuple",
      "arg": "date_time"
     }
    ],
    "className": "zipfile.ZipInfo",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.ZipInfo",
    "kwonlyargs": [],
    "name": "is_dir",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(bool | None)",
      "arg": "zip64"
     }
    ],
    "className": "zipfile.ZipInfo",
    "kwonlyargs": [],
    "name": "FileHeader",
    "returns": "bytes"
   }
  ]
 },
 {
  "className": "zipfile.Path",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "name",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "parent",
    "returns": "PathLike[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(ZipFile | StrPath | IO[bytes])",
      "arg": "root"
     },
     {
      "annotation": "str",
      "arg": "at"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "iterdir",
    "returns": "Iterator[Path]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "is_dir",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "is_file",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "exists",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | None)",
      "arg": "encoding"
     },
     {
      "annotation": "(str | None)",
      "arg": "errors"
     },
     {
      "annotation": "(str | None)",
      "arg": "newline"
     },
     {
      "annotation": "bool",
      "arg": "line_buffering"
     },
     {
      "annotation": "bool",
      "arg": "write_through"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "read_text",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "read_bytes",
    "returns": "bytes"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "StrPath",
      "arg": "add"
     }
    ],
    "className": "zipfile.Path",
    "kwonlyargs": [],
    "name": "__truediv__",
    "returns": "Path"
   }
  ]
 },
 {
  "className": "reprlib.Repr",
  "fields": [
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxlevel"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxdict"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxlist"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxtuple"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxset"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxfrozenset"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxdeque"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxarray"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxlong"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxstring"
   },
   {
    "annotation": "int",
    "className": "reprlib.Repr",
    "name": "maxother"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "x"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr1",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "tuple[Any, ...]",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_tuple",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "list[Any]",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_list",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "array[Any]",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_array",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "set[Any]",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_set",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "frozenset[Any]",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_frozenset",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "deque[Any]",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_deque",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "dict[Any, Any]",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_dict",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_str",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "int",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_int",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "Any",
      "arg": "x"
     },
     {
      "annotation": "int",
      "arg": "level"
     }
    ],
    "className": "reprlib.Repr",
    "kwonlyargs": [],
    "name": "repr_instance",
    "returns": "str"
   }
  ]
 },
 {
  "className": "zipimport.ZipImportError",
  "fields": [],
  "methods": []
 },
 {
  "className": "zipimport.zipimporter",
  "fields": [
   {
    "annotation": "str",
    "className": "zipimport.zipimporter",
    "name": "archive"
   },
   {
    "annotation": "str",
    "className": "zipimport.zipimporter",
    "name": "prefix"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(str | bytes | os.PathLike[Any])",
      "arg": "path"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fullname"
     },
     {
      "annotation": "(str | None)",
      "arg": "path"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "find_loader",
    "returns": "tuple[zipimporter | None, list[str]]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fullname"
     },
     {
      "annotation": "(str | None)",
      "arg": "path"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "find_module",
    "returns": "(zipimporter | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fullname"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "get_code",
    "returns": "CodeType"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "pathname"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "get_data",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fullname"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "get_filename",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fullname"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "get_source",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fullname"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "is_package",
    "returns": "bool"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "fullname"
     }
    ],
    "className": "zipimport.zipimporter",
    "kwonlyargs": [],
    "name": "load_module",
    "returns": "ModuleType"
   }
  ]
 },
 {
  "className": "resource.struct_rusage",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_utime",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_stime",
    "returns": "float"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_maxrss",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_ixrss",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_idrss",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_isrss",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_minflt",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_majflt",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_nswap",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_inblock",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_oublock",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_msgsnd",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_msgrcv",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_nsignals",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_nvcsw",
    "returns": "int"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "resource.struct_rusage",
    "kwonlyargs": [],
    "name": "ru_nivcsw",
    "returns": "int"
   }
  ]
 },
 {
  "className": "zlib.error",
  "fields": [],
  "methods": []
 },
 {
  "className": "getopt.GetoptError",
  "fields": [
   {
    "annotation": "str",
    "className": "getopt.GetoptError",
    "name": "msg"
   },
   {
    "annotation": "str",
    "className": "getopt.GetoptError",
    "name": "opt"
   }
  ],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "msg"
     },
     {
      "annotation": "str",
      "arg": "opt"
     }
    ],
    "className": "getopt.GetoptError",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   }
  ]
 },
 {
  "className": "rlcompleter.Completer",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "(dict[str, Any] | None)",
      "arg": "namespace"
     }
    ],
    "className": "rlcompleter.Completer",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     },
     {
      "annotation": "int",
      "arg": "state"
     }
    ],
    "className": "rlcompleter.Completer",
    "kwonlyargs": [],
    "name": "complete",
    "returns": "(str | None)"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "rlcompleter.Completer",
    "kwonlyargs": [],
    "name": "attr_matches",
    "returns": "list[str]"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "text"
     }
    ],
    "className": "rlcompleter.Completer",
    "kwonlyargs": [],
    "name": "global_matches",
    "returns": "list[str]"
   }
  ]
 },
 {
  "className": "zoneinfo.ZoneInfo",
  "fields": [],
  "methods": [
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     }
    ],
    "className": "zoneinfo.ZoneInfo",
    "kwonlyargs": [],
    "name": "key",
    "returns": "str"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "self"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "zoneinfo.ZoneInfo",
    "kwonlyargs": [],
    "name": "__init__",
    "returns": "None"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "str",
      "arg": "key"
     }
    ],
    "className": "zoneinfo.ZoneInfo",
    "kwonlyargs": [],
    "name": "no_cache",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "type[Self]",
      "arg": "cls"
     },
     {
      "annotation": "_IOBytes",
      "arg": "__fobj"
     },
     {
      "annotation": "(str | None)",
      "arg": "key"
     }
    ],
    "className": "zoneinfo.ZoneInfo",
    "kwonlyargs": [],
    "name": "from_file",
    "returns": "Self"
   },
   {
    "args": [
     {
      "annotation": "",
      "arg": "cls"
     }
    ],
    "className": "zoneinfo.ZoneInfo",
    "kwonlyargs": [
     {
      "annotation": "Iterable[str]",
      "arg": "only_keys"
     }
    ],
    "name": "clear_cache",
    "returns": "None"
   }
  ]
 },
 {
  "className": "zoneinfo.ZoneInfoNotFoundError",
  "fields": [],
  "methods": []
 },
 {
  "className": "zoneinfo.InvalidTZPathWarning",
  "fields": [],
  "methods": []
 }
]
