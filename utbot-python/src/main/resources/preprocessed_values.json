[
  {
    "name": "builtins.int",
    "useAsReturn": true,
    "instances": [
      "int('3723ai4h', 20)",
      "int('4000001', 32)",
      "int('9ba461594', 12)",
      "int(' 0O123   ', 0)",
      "int('100000001', 16)",
      "int('535a7988a', 13)",
      "int('000', 0)",
      "int('-1')",
      "int('0123', 10)",
      "int('535a79889', 13)",
      "int('100000000000000000000000000000000', 2)",
      "int('1606k7ic', 23)",
      "int(-3.5)",
      "int(-3.9)",
      "int('704he7g5', 18)",
      "int()",
      "int('-3')",
      "int(memoryview(b'123A')[1:3])",
      "int('b28jpdm', 27)",
      "int('mb994ah', 24)",
      "int('76beigh', 29)",
      "int(3.5)",
      "int('4q0jto4', 31)",
      "int('704he7g4', 18)",
      "int('0_100')",
      "int('76beigg', 29)",
      "int('1550104015505', 6)",
      "int(' -3 ')",
      "int('2qhxjli', 34)",
      "int('0o123', 0)",
      "int('3aokq94', 33)",
      "int('32244002423142', 5)",
      "int('1a20dcd81', 15)",
      "int('281d55i4', 21)",
      "int('0x123', 16)",
      "int(b'1_00')",
      "int('1fj8b185', 22)",
      "int('102002022201221111212', 3)",
      "int(memoryview(b'123')[1:3])",
      "int('2br45qb', 35)",
      "int(b'10')",
      "int(-3.14)",
      "int('0123')",
      "int('5qmcpqh', 30)",
      "int('1550104015504', 6)",
      "int('10000000000000000', 4)",
      "int('4294967296', 10)",
      "int('40000000001', 8)",
      "int(memoryview(b'123\\x00')[1:3])",
      "int('100000000', 16)",
      "int('2ca5b7465', 14)",
      "int('10')",
      "int(-1e+100)",
      "int('a7ffda92', 17)",
      "int('0', 5)",
      "int('4000000', 32)",
      "int('hek2mgl', 25)",
      "int('4294967297', 10)",
      "int('211301422355', 7)",
      "int('1_2_3_4_5_6_7_0_1_2_3', 8)",
      "int('1606k7id', 23)",
      "int('100', base=2)",
      "int('8pfgih5', 28)",
      "int(314)",
      "int('dnchbnm', 26)",
      "int('2br45qc', 35)",
      "int('1z141z4', 36)",
      "int('1a20dcd82', 15)",
      "int('10', 16)",
      "int(3.9)",
      "int('0b100', 2)",
      "int('281d55i5', 21)",
      "int(' 0B100 ', 0)",
      "int('1_00', 3)",
      "int('32244002423141', 5)",
      "int('10000000000000001', 4)",
      "int('4f5aff66', 19)",
      "int('mb994ag', 24)",
      "int('1' * 600)",
      "int('40000000000', 8)",
      "int(memoryview(b'1234')[1:3])",
      "int('1904440554', 11)",
      "int('3723ai4g', 20)",
      "int(' 0X123  ', 0)",
      "int('100000000000000000000000000000001', 2)",
      "int(memoryview(b'123 ')[1:3])",
      "int('1_2_3_4_5_6_7_8_9', 16)",
      "int('a7ffda91', 17)",
      "int('0x123', 0)",
      "int('0B100', 2)",
      "int('0O123', 8)",
      "int('102002022201221111211', 3)",
      "int('4f5aff67', 19)",
      "int('8pfgih4', 28)",
      "int(1e+100)",
      "int(b'-1')",
      "int('dnchbnn', 26)",
      "int(' 0o123  ', 0)",
      "int('0o123', 8)",
      "int('1z141z5', 36)",
      "int('12068657455', 9)",
      "int('1_2_3_4_5_6_7', 32)",
      "int('2ca5b7464', 14)",
      "int('9ba461595', 12)",
      "int('4q0jto5', 31)",
      "int('b28jpdn', 27)",
      "int('5qmcpqg', 30)",
      "int(3.14)",
      "int('12068657454', 9)",
      "int('3aokq95', 33)",
      "int('211301422354', 7)",
      "int('2qhxjlj', 34)",
      "int('1fj8b184', 22)",
      "int('\\u2003-3\\u2002')",
      "int('1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1', 2)",
      "int('0b100', 0)",
      "int('hek2mgm', 25)",
      "int('0X123', 16)",
      "int('1904440555', 11)"
    ]
  },
  {
    "name": "builtins.bool",
    "useAsReturn": true,
    "instances": [
      "True",
      "False"
    ]
  },
  {
    "name": "builtins.str",
    "useAsReturn": true,
    "instances": [
      "str(float('-infinity'))",
      "str(Exception('a'))",
      "str(b'python.org.', 'idna')",
      "str(float('-nan'))",
      "str(b'xn--pythn-mua.org', 'idna')",
      "str(1.5 + 3.5j)",
      "str(b'')",
      "str(b'\\xf0\\xa3\\x91\\x96', 'utf-8')",
      "str(b'python.org', 'idna')",
      "str(-1234567890)",
      "str(1e+300 * 1e+300)",
      "str(Exception)",
      "str(b'\\x80')",
      "str(object)",
      "str(b'Andr\\x82 x', 'ascii', 'ignore')",
      "str(-123456789)",
      "str(id)",
      "str('unicode remains unicode')",
      "str('\\\\U0010ffff'.encode('ascii'), 'unicode-escape')",
      "str(3 + 0.0j)",
      "str(object=500)",
      "str(TypeError(\"Cannot assign the same cached_property to two different names ('a' and 'b').\"))",
      "str(b'Andr\\x82 x', 'ascii', 'replace')",
      "str(3.0j)",
      "str('strings are converted to unicode')",
      "str(b'foo', errors='strict')",
      "str(b'xn--pythn-mua.org.', 'idna')",
      "str(1 + 3.0j)",
      "str(OSError(1001))",
      "str(bytearray(b''))",
      "str(b'\\xf0\\x90\\x80\\x82', 'utf-8')",
      "str(['1', '2', '3'])",
      "str(True)",
      "str(Exception('a', 'b'))",
      "str(b'strings are decoded to unicode', 'utf-8', 'strict')",
      "str(memoryview(b'character buffers are decoded to unicode'), 'utf-8', 'strict')",
      "str('abcdefghijklmnopqrst')",
      "str(b'\\xe2\\x82\\xac', 'utf-8')",
      "str(b'x')",
      "str('a = 1')",
      "str(b'\\u0663\\u0661\\u0664 ', 'raw-unicode-escape')",
      "str(3.2j)",
      "str(2 ** 1000)",
      "str()",
      "str(bytearray(b'\\x80'))",
      "str(type)",
      "str(bytearray(b'x'))",
      "str(3.2 + 0.0j)",
      "str(6442450944)",
      "str('3')",
      "str('global')",
      "str(OSError(1001, 'message'))",
      "str(False)",
      "str(b'\\x82 x', 'ascii', 'replace')",
      "str(b'__add__', 'ascii')"
    ]
  },
  {
    "name": "builtins.float",
    "useAsReturn": true,
    "instances": [
      "float(-1)",
      "float(0.0)",
      "float('+NAn')",
      "float('1.4')",
      "float('+infinity')",
      "float(10 ** 23)",
      "float(memoryview(b'12.3A')[1:4])",
      "float(7.3)",
      "float(1970)",
      "float(314)",
      "float(1)",
      "float(-2100.0)",
      "float(2 ** 31)",
      "float(2 ** 64)",
      "float('NaN')",
      "float('-INFINITY')",
      "float(1 - 2 ** 31)",
      "float(-2.1)",
      "float(2 ** 63)",
      "float('  3.14  ')",
      "float(ord('a'))",
      "float('3.2e3  ')",
      "float(2.1)",
      "float(-2 ** 63)",
      "float(2.5)",
      "float(0.5)",
      "float('nan')",
      "float(2 ** 31 - 1)",
      "float('-nan')",
      "float('3.e3  ')",
      "float(-2 ** 31)",
      "float('.14  ')",
      "float(-7.3)",
      "float('NAN')",
      "float(2 ** 34)",
      "float(2 ** 32)",
      "float('2.5e-1  ')",
      "float('Nan')",
      "float('3.  ')",
      "float('-3.14  ')",
      "float('+nan')",
      "float(1.23e+300)",
      "float('  .25e-1  ')",
      "float('.' + '1' * 1000)",
      "float('-NaN')"
    ]
  },
  {
    "name": "builtins.range",
    "useAsReturn": true,
    "instances": [
      "range(127, 256)",
      "range(24)",
      "range(0, 2 ** 100 + 1, 2)",
      "range(1, 25 + 1)",
      "range(0, 3)",
      "range(-10, 10)",
      "range(*slice(1, 18, 2).indices(20))",
      "range(10, -11, -1)",
      "range(240)",
      "range(2 ** 200, 2 ** 201, 2 ** 100)",
      "range(200)",
      "range(50, 400)",
      "range(150)",
      "range(9, -1, -2)",
      "range(3 * 5 * 7 * 11)",
      "range(4, 16)",
      "range(0, 2 ** 100 - 1, 2)",
      "range(0, 55296)",
      "range(101)",
      "range(5000)",
      "range(65536, 1114112)",
      "range((1 << 16) - 1)",
      "range(1500)",
      "range(1, 9)",
      "range(512)",
      "range(0, -20, -1)",
      "range(32, 127)",
      "range(52, 64)",
      "range(1 << 1000)",
      "range(70000)"
    ]
  },
  {
    "name": "builtins.complex",
    "useAsReturn": true,
    "instances": [
      "complex(1.0, float('inf'))",
      "complex('1j')",
      "complex(1.0, 10.0)",
      "complex(0.0j, 3.14)",
      "complex('(1+2j)')",
      "complex(float('inf'), float('inf'))",
      "complex('1' * 500)",
      "complex(float('inf'), -1)",
      "complex(0.0, float('nan'))",
      "complex(10.0)",
      "complex(float('nan'), 1)",
      "complex(1.0, 0.0)",
      "complex(0, 0)",
      "complex('(1.3+2.2j)')",
      "complex(3.14 + 0.0j)",
      "complex(float('nan'), -1)",
      "complex(0.0, -float('inf'))",
      "complex(repr(-6.0j))",
      "complex(real=17 + 23.0j)",
      "complex('( j )')",
      "complex('-1e500+1.8e308j')",
      "complex(float('inf'), 0)",
      "complex(0, float('nan'))",
      "complex('1e500')",
      "complex('-1e-500j')",
      "complex(10)",
      "complex(' ( +3.14-6J )')",
      "complex(1, 10)",
      "complex(0.0, 0.0)",
      "complex(3.14 + 0.0j, 0.0j)",
      "complex(1, float('inf'))",
      "complex(314, 0)",
      "complex('-1e-500+1e-500j')",
      "complex(3.14, 0.0)",
      "complex(-float('inf'), float('inf'))",
      "complex('( -j)')",
      "complex(10 + 0.0j)",
      "complex(-0.0, 0.0)",
      "complex(5.3, 9.8)",
      "complex(1.0, -float('inf'))",
      "complex('-1e500j')",
      "complex(0.0j, 3.14j)",
      "complex(0.0, -1.0)",
      "complex(real=17 + 23.0j, imag=23)",
      "complex(0.0, -0.0)",
      "complex('-1')",
      "complex(repr(6.0j))",
      "complex(1e-200, 1e-200)",
      "complex(314)",
      "complex(repr(1 + 6.0j))",
      "complex(-0.0, -1.0)",
      "complex(float('inf'), 0.0)",
      "complex('\\u2003(\\u20021+1j ) ')",
      "complex(0, -float('inf'))",
      "complex()",
      "complex(0.0, 1.0)",
      "complex('+1')",
      "complex(' ( +3.14+j )')",
      "complex('1')",
      "complex('1+10j')",
      "complex(-0.0, 1.0)",
      "complex(0, float('inf'))",
      "complex('3.14+1J')",
      "complex(float('nan'), float('nan'))",
      "complex(3.14)",
      "complex(real=17, imag=23)",
      "complex(1e+200, 1e+200)",
      "complex('+J')",
      "complex(0.0, 3.0)",
      "complex(1.0, 10)",
      "complex(-0.0, 2.0)",
      "complex('J')",
      "complex(' ( +3.14-J )')",
      "complex(float('inf'), 1)",
      "complex(repr(1 - 6.0j))",
      "complex(-0.0, -0.0)",
      "complex('1e-500')",
      "complex(real=1 + 2.0j, imag=3 + 4.0j)",
      "complex(1, 10.0)",
      "complex(1, float('nan'))",
      "complex(0.0, 3.14)",
      "complex(0.0, 3.14j)",
      "complex(1.0, -0.0)"
    ]
  },
  {
    "name": "builtins.BaseException",
    "useAsReturn": true,
    "instances": [
      "BaseException()"
    ]
  },
  {
  "name": "types.NoneType",
  "useAsReturn": true,
  "instances": [
    "None"
  ]
  },
  {
    "name": "builtins.bytearray",
    "useAsReturn": true,
    "instances": [
      "bytearray(b'a')",
      "bytearray(100)",
      "bytearray(b'\\x00' * 100)",
      "bytearray(range(1, 10))",
      "bytearray(b'\\x07\\x7f\\x7f')",
      "bytearray(b'mutable')",
      "bytearray([1, 2])",
      "bytearray(range(256))",
      "bytearray(b'hell')",
      "bytearray([5, 6, 7, 8, 9])",
      "bytearray(b'memoryview')",
      "bytearray(b'a:b::c:::d')",
      "bytearray(b'b')",
      "bytearray(b'cd')",
      "bytearray(b'world')",
      "bytearray(b'[emoryvie]')",
      "bytearray(b'x' * 5)",
      "bytearray([0, 1, 254, 255])",
      "bytearray(b'*$')",
      "bytearray(b'abc\\xe9\\x00')",
      "bytearray(b'a\\xffb')",
      "bytearray(range(100))",
      "bytearray(b'[abracadabra]')",
      "bytearray([0, 1, 2, 100, 101, 7, 8, 9])",
      "bytearray(b'Mary')",
      "bytearray(b'baz')",
      "bytearray(b'\\xff')",
      "bytearray(128 * 1024)",
      "bytearray([100, 101])",
      "bytearray(b'1')",
      "bytearray([1, 2, 3])",
      "bytearray(b'')",
      "bytearray(b'one')",
      "bytearray(b'nul:\\x00')",
      "bytearray(1024)",
      "bytearray(10)",
      "bytearray(b'abcdefgh')",
      "bytearray(b'123')",
      "bytearray(b'\\x80')",
      "bytearray(b'01 had a 9')",
      "bytearray(2)",
      "bytearray(range(10))",
      "bytearray(b'a\\x80b')",
      "bytearray(b':a:b::c')",
      "bytearray(b'\\x00' * 15 + b'\\x01')",
      "bytearray(b'hash this!')",
      "bytearray(b'bar')",
      "bytearray(b'x' * 4)",
      "bytearray([0, 1, 2, 42, 42, 42, 3, 4, 5, 6, 7, 8, 9])",
      "bytearray(b'----')",
      "bytearray([i for i in range(256)])",
      "bytearray(b'bytearray')",
      "bytearray(b'spam')",
      "bytearray([10, 100, 200])",
      "bytearray(b'abcdefghijk')",
      "bytearray(b'msssspp')",
      "bytearray(b'no error')",
      "bytearray(b'YWJj\\n')",
      "bytearray([1, 1, 1, 1, 1, 5, 6, 7, 8, 9])",
      "bytearray(b'foobaz')",
      "bytearray([0])",
      "bytearray(b'little lamb---')",
      "bytearray(b'abc\\xe9\\x00xxx')",
      "bytearray(b'def')",
      "bytearray(b'eggs\\n')",
      "bytearray(b'foo')",
      "bytearray(b'foobar')",
      "bytearray(128)",
      "bytearray(b'key')",
      "bytearray(16)",
      "bytearray(b'file.py')",
      "bytearray(b'ab')",
      "bytearray(b'this is a random bytearray object')",
      "bytearray(b'x' * 8)",
      "bytearray(b' world\\n\\n\\n')",
      "bytearray([1, 100, 200])",
      "bytearray([102, 111, 111, 111, 111])",
      "bytearray(range(1, 9))",
      "bytearray([126, 127, 128, 129])",
      "bytearray(5)",
      "bytearray([0, 1, 2, 102, 111, 111])",
      "bytearray(b'\\x00python\\x00test\\x00')",
      "bytearray(9)",
      "bytearray(b'abcde')",
      "bytearray(b'x')",
      "bytearray(b'0123456789')",
      "bytearray([102, 111, 111, 102, 111, 111])",
      "bytearray(2 ** 16)",
      "bytearray(b'python')",
      "bytearray(8192)",
      "bytearray(list(range(8)) + list(range(256)))",
      "bytearray(b'\\xff\\x00\\x00')",
      "bytearray(b'hello1')",
      "bytearray(range(16))",
      "bytearray(b'xyz')",
      "bytearray(b'\\xaaU\\xaaU')",
      "bytearray(b'Z')",
      "bytearray(8)",
      "bytearray([1, 1, 1, 1, 1])",
      "bytearray([0, 1, 2, 3, 4])",
      "bytearray(b'ghi')",
      "bytearray(b'[ytearra]')",
      "bytearray(b'abc')",
      "bytearray(b'this is a test')",
      "bytearray(b'xxx')",
      "bytearray()",
      "bytearray(b'abcdefghijklmnopqrstuvwxyz')",
      "bytearray(b'my dog has fleas')",
      "bytearray([1, 100, 3])",
      "bytearray(b'g\\xfcrk')",
      "bytearray(b'hello world')",
      "bytearray([26, 43, 48])",
      "bytearray([1, 2, 3, 4, 6, 7, 8])",
      "bytearray(b'0102abcdef')",
      "bytearray(1)",
      "bytearray(b'--------------')",
      "bytearray(20)",
      "bytearray(b'hello')"
    ]
  },
  {
    "name": "builtins.bytes",
    "useAsReturn": true,
    "instances": [
      "bytes(b'ab')",
      "bytes(b'def')",
      "bytes(b'abc')",
      "bytes([126, 128, 129])",
      "bytes([126, 128])",
      "bytes(b'Hello world\\n\\x80\\x81\\xfe\\xff')",
      "bytes(range(255))",
      "bytes(3)",
      "bytes(2)"
    ]
  },
  {
    "name": "builtins.dict",
    "useAsReturn": true,
    "instances": [
      "dict()"
    ]
  },
  {
    "name": "builtins.enumerate",
    "useAsReturn": false,
    "instances": [
      "enumerate([])",
      "enumerate(range(10))",
      "enumerate([lambda a, b: a < b, lambda a, b: a <= b, lambda a, b: a > b, lambda a, b: a >= b])",
      "enumerate([(lambda a, b: a == b, False), (lambda a, b: a != b, True)])",
      "enumerate([lambda a, b: a == b, lambda a, b: a <= b, lambda a, b: a >= b])",
      "enumerate([lambda a, b: a < b, lambda a, b: a <= b, lambda a, b: a != b])",
      "enumerate([lambda a, b: a > b, lambda a, b: a >= b, lambda a, b: a != b])",
      "enumerate([(False, False, False, '', ''), (False, False, True, '', ''), (False, True, False, 'none', ''), (False, True, True, 'fn', ''), (True, False, False, 'fn', 'exception'), (True, False, True, 'fn', 'exception'), (True, True, False, 'fn', 'exception'), (True, True, True, 'fn', 'exception')], 1)",
      "enumerate('abc')",
      "enumerate(range(5))",
      "enumerate([1, 2, 2, 3, 2])",
      "enumerate('june july august'.split(), 10)",
      "enumerate('june july august'.split(), 30)",
      "enumerate('june july august'.split(), 40)",
      "enumerate('R W X'.split())",
      "enumerate('june july august'.split(), 1)",
      "enumerate('june july august'.split(), 20)",
      "enumerate('SPRING SUMMER AUTUMN WINTER'.split(), 1)",
      "enumerate([0.3989, 0.3989, 0.3989, 0.3988, 0.3986, 0.3984, 0.3982, 0.398, 0.3977, 0.3973, 0.397, 0.3965, 0.3961, 0.3956, 0.3951, 0.3945, 0.3939, 0.3932, 0.3925, 0.3918, 0.391, 0.3902, 0.3894, 0.3885, 0.3876, 0.3867, 0.3857, 0.3847, 0.3836, 0.3825, 0.3814, 0.3802, 0.379, 0.3778, 0.3765, 0.3752, 0.3739, 0.3725, 0.3712, 0.3697, 0.3683, 0.3668, 0.3653, 0.3637,0.3621, 0.3605, 0.3589, 0.3572, 0.3555, 0.3538])",
      "enumerate('june july august'.split(), 10)",
      "enumerate('june july august'.split(), 30)",
      "enumerate('june july august'.split(), 40)",
      "enumerate('R W X'.split())",
      "enumerate('june july august'.split(), 1)",
      "enumerate('june july august'.split(), 20)",
      "enumerate('SPRING SUMMER AUTUMN WINTER'.split(), 1)"
    ]
  },
  {
    "name": "builtins.filter",
    "useAsReturn": false,
    "instances": [
      "filter(lambda x: x > 0, [1, -3, 9, 0, 2])",
      "filter(42, (1, 2))",
      "filter(None, (1, 2))",
      "filter(lambda x: x >= 3, (1, 2, 3, 4))",
      "filter(lambda c: 'a' <= c <= 'z', 'Hello World')",
      "filter(None, [1, 'hello', [], [3], '', None, 9, 0])"
    ]
  },
  {
    "name": "builtins.frozenset",
    "useAsReturn": true,
    "instances": [
      "frozenset(range(7))",
      "frozenset({'module1', 'module2'})",
      "frozenset({1, None})",
      "frozenset(['EDOM', 'ERANGE'])",
      "frozenset(('APPDATA', 'AR', 'ARCHFLAGS', 'ARFLAGS', 'AUDIODEV', 'CC', 'CFLAGS', 'COLUMNS', 'COMPUTERNAME', 'COMSPEC', 'CPP', 'CPPFLAGS', 'DISPLAY', 'DISTUTILS_DEBUG', 'DISTUTILS_USE_SDK', 'DYLD_LIBRARY_PATH', 'ENSUREPIP_OPTIONS', 'HISTORY_FILE', 'HOME', 'HOMEDRIVE', 'HOMEPATH', 'IDLESTARTUP', 'LANG', 'LDFLAGS', 'LDSHARED', 'LD_LIBRARY_PATH', 'LINES', 'MACOSX_DEPLOYMENT_TARGET', 'MAILCAPS', 'MAKEFLAGS', 'MIXERDEV', 'MSSDK', 'PATH', 'PATHEXT', 'PIP_CONFIG_FILE', 'PLAT', 'POSIXLY_CORRECT', 'PY_SAX_PARSER', 'ProgramFiles', 'ProgramFiles(x86)', 'RUNNING_ON_VALGRIND', 'SDK_TOOLS_BIN', 'SERVER_SOFTWARE', 'SHELL', 'SOURCE_DATE_EPOCH', 'SYSTEMROOT', 'TEMP', 'TERM', 'TILE_LIBRARY', 'TIX_LIBRARY', 'TMP', 'TMPDIR', 'TRAVIS', 'TZ', 'USERPROFILE', 'VIRTUAL_ENV', 'WAYLAND_DISPLAY', 'WINDIR', '_PYTHON_HOST_PLATFORM', '_PYTHON_PROJECT_BASE', '_PYTHON_SYSCONFIGDATA_NAME', '__PYVENV_LAUNCHER__'))",
      "frozenset({'module'})",
      "frozenset({'a', 'b'})",
      "frozenset({0})",
      "frozenset(('str_value',))",
      "frozenset([1, 2, 3, 4, 5, 6])",
      "frozenset({'x', 'meth'})",
      "frozenset()",
      "frozenset({1, 2, 3, 4, 5, 6, 7})",
      "frozenset(('utc', 'gmt', 'Tokyo (standard time)'))",
      "frozenset({'a', 'c', 'b'})",
      "frozenset([4, 5, 6])",
      "frozenset({(1, 2), 3, 4})",
      "frozenset('frozenset')",
      "frozenset({8})",
      "frozenset({1, 2, 3})",
      "frozenset(['a'])",
      "frozenset({1})",
      "frozenset(range(3))",
      "frozenset('Tokyo (daylight time)')",
      "frozenset({123, 'abc'})"
    ]
  },
  {
    "name": "builtins.list",
    "useAsReturn": true,
    "instances": [
      "list()"
    ]
  },
  {
    "name": "builtins.map",
    "useAsReturn": false,
    "instances": [
      "map(ord, 'Hello')",
      "map(int, '123')",
      "map(chr, list(range(0, 55296)) + list(range(57344, 1114112)))",
      "map(chr, range(256))",
      "map(frozenset, ['abcdef', 'bcd', 'bdcb', 'fed', 'fedccba'])",
      "map(int, 'X')",
      "map(lambda x, y: x + y, [1, 3, 2], [9, 1, 4])",
      "map(lambda x: x * x, range(1, 4))",
      "map(lambda x: list(map(sqrt, x)), [[16, 4], [81, 9]])",
      "map(chr, range(33, 126 + 1))",
      "map(str, range(20))",
      "map(chr, range(256, 2 ** 16, 255))",
      "map(pow, range(40), range(40))",
      "map(pow, range(10), range(10))",
      "map(str, range(10))",
      "map(int, '0X')",
      "map(chr, range(ord('a'), ord('z')))",
      "map(chr, range(32, 128))",
      "map(id, zip('abc', 'def'))",
      "map(tuple, 'Ax Ay Bx By Cx Cy Dx Dy'.split())",
      "map(10, range(5))",
      "map(tuple, 'AB AC AD BA BC BD CA CB CD DA DB DC'.split())",
      "map(None, range(3), range(3))",
      "map(id, list(zip('abc', 'def')))",
      "map(pow, (2, 3, 10), (5, 2, 3))",
      "map(chr, list(range(0, 55296)) + list(range(57344, 1114112)))",
      "map(chr, range(256))"
    ]
  },
  {
    "name": "builtins.memoryview",
    "useAsReturn": false,
    "instances": [
      "memoryview(b'a')",
      "memoryview(b'1234')",
      "memoryview(b'ax = 123')",
      "memoryview(b'$23$')",
      "memoryview(bytes(range(256)))",
      "memoryview(b'hash this!')",
      "memoryview(b'12.3')",
      "memoryview(b'bytes')",
      "memoryview(b'a:b::c:::d')",
      "memoryview(b'ab')",
      "memoryview(b'123')",
      "memoryview(b'ac')",
      "memoryview(b'YWJj\\n')",
      "memoryview(b'')",
      "memoryview(b'*$')",
      "memoryview(b'spam\\n')",
      "memoryview(b'\\xff\\x00\\x00')",
      "memoryview(b' ')",
      "memoryview(b'abc')",
      "memoryview(b'12.3A')",
      "memoryview(b':a:b::c')",
      "memoryview(b'foo')",
      "memoryview(b'\\x124Vx')",
      "memoryview(b'[abracadabra]')",
      "memoryview(b'123 ')",
      "memoryview(b'spam')",
      "memoryview(b'text')",
      "memoryview(b'memoryview')",
      "memoryview(b'123\\x00')",
      "memoryview(b'12.3\\x00')",
      "memoryview(b'character buffers are decoded to unicode')",
      "memoryview(b'xyz')",
      "memoryview(b'12.3 ')",
      "memoryview(b'cd')",
      "memoryview(b'baz')",
      "memoryview(b'0102abcdef')",
      "memoryview(b'123A')",
      "memoryview(b'\\x07\\x7f\\x7f')",
      "memoryview(b'file.py')",
      "memoryview(b'\\x1a+0')",
      "memoryview(b'12.34')"
    ]
  },
  {
    "name": "builtins.object",
    "useAsReturn": false,
    "instances": [
      "object()"
    ]
  },
  {
    "name": "builtins.reversed",
    "useAsReturn": false,
    "instances": [
      "reversed({None: []}.items())",
      "reversed(range(100))",
      "reversed(range(256))",
      "reversed(dict().values())",
      "reversed([])",
      "reversed({}.items())",
      "reversed(range(1000))",
      "reversed(dict())",
      "reversed('')",
      "reversed({}.values())",
      "reversed('abcd')",
      "reversed({})",
      "reversed([1, 2, 3])",
      "reversed(dict().keys())",
      "reversed(range(-200, 0))",
      "reversed({}.keys())",
      "reversed(dict().items())"
    ]
  },
  {
    "name": "builtins.set",
    "useAsReturn": true,
    "instances": [
      "set()"
    ]
  },
  {
    "name": "builtins.slice",
    "useAsReturn": true,
    "instances": [
      "slice(0, 2, 1)",
      "slice(2)",
      "slice(1, 3)",
      "slice(4)",
      "slice(0, 10)",
      "slice(0, 1, 1)",
      "slice(0, 1, 2)",
      "slice(0, 2)",
      "slice(1, 1)",
      "slice(0)",
      "slice(0, 1, 2)",
      "slice(0, 2, 1)",
      "slice(3, 5, 1)",
      "slice(0, 1, 1)",
      "slice(0, 1, 0)",
      "slice(0, 8, 1)",
      "slice(0, 2, 0)",
      "slice(1, 18, 2)",
      "slice(1)",
      "slice(0, 10, 1)",
      "slice(None, 10, -1)",
      "slice(None, -10)",
      "slice(None, -11, -1)",
      "slice(None, 9)",
      "slice(100, -100, -1)",
      "slice(None, 10)",
      "slice(None)",
      "slice(-100, 100)",
      "slice(None, None, -1)",
      "slice(None, -9)",
      "slice(None, 9, -1)",
      "slice(0.0, 10, 1)",
      "slice(0, 10, 0)",
      "slice(10, 20, 3)",
      "slice(0, 10, 1.0)",
      "slice(1, 2, 4)",
      "slice(1, 2)",
      "slice(None, None, -2)",
      "slice(-100, 100, 2)",
      "slice(0, 10.0, 1)",
      "slice(3, None, -2)",
      "slice(1, None, 2)",
      "slice(None, -10, -1)",
      "slice(None, 11)",
      "slice(1, 2, 3)",
      "slice(None, -12, -1)",
      "slice(5)",
      "slice(None, 8, -1)",
      "slice(None, -11)",
      "slice(None, None, 2)",
      "slice(0, 10, 2)",
      "slice(2, 3)",
      "slice(0, 10)",
      "slice(0, 1, 5)",
      "slice(0, 10, 0)",
      "slice(2, 10, 3)",
      "slice(0, 2)",
      "slice(1, 3)",
      "slice(1, 2)",
      "slice(2, 2)",
      "slice(0, 1)",
      "slice(0, 0)",
      "slice(2, 1)",
      "slice(2000, 1000)",
      "slice(0, 1000)",
      "slice(0, 3)",
      "slice(1000, 1000)",
      "slice(2, 4)",
      "slice(1, 2)",
      "slice(1, 2, 3)",
      "slice(0, 1)",
      "slice(0, 0)",
      "slice(2, 3)",
      "slice(None, 42)",
      "slice(None, 24, None)",
      "slice(2, 1024, 10)",
      "slice(None, 42, None)",
      "slice(0, 2)",
      "slice(1, 2)",
      "slice(0, 1)",
      "slice(3, 5)",
      "slice(0, 10, 0)",
      "slice(0, 3)",
      "slice(1, 10, 2)",
      "slice(2, 2, 2)",
      "slice(1, 1, 1)"
    ]
  },
  {
    "name": "builtins.tuple",
    "useAsReturn": true,
    "instances": [
      "tuple(range(5))",
      "tuple([0, 1, 2, 3])",
      "tuple(())",
      "tuple(range(256))",
      "tuple(range(1000000))",
      "tuple(range(10000))",
      "tuple(enumerate('abc'))",
      "tuple('BHILQN')",
      "tuple('bhilqn')",
      "tuple('hello')",
      "tuple('abcdefghijklmnopqrst')",
      "tuple([(ch + 'sort') for ch in '*\\/3+%~=!'])",
      "tuple(range(100))",
      "tuple('tuple')",
      "tuple('defg')",
      "tuple('<>!=')",
      "tuple(range(13))",
      "tuple(range(10))",
      "tuple(x for x in range(10) if x % 2)",
      "tuple('abc')",
      "tuple('abcde')",
      "tuple('spam')"
    ]
  },
  {
    "name": "builtins.type",
    "useAsReturn": false,
    "instances": [
      "type(len)",
      "type('123')",
      "type(1.0)",
      "type({})",
      "type('foo', (), {})",
      "type('A', (), {'__qualname__': 'B.C'})",
      "type(lambda x: x)",
      "type((True).real)",
      "type(list.append)",
      "type('blah', (), {})",
      "type(())",
      "type('A', (), {})",
      "type(list)",
      "type({}.items())",
      "type({}.values())",
      "type('NewClass', (object,), {})",
      "type(list.__add__)",
      "type(classmethod(lambda c: None))",
      "type(range(0))",
      "type(None)",
      "type(iter(range(0)))",
      "type('C', (object,), {'__hash__': None})",
      "type(complex('1' * 500))",
      "type(staticmethod(lambda : None))",
      "type(iter(range(1 << 1000)))",
      "type('C', (), {})",
      "type({}.keys())"
    ]
  },
  {
    "name": "builtins.zip",
    "useAsReturn": false,
    "instances": [
      "zip(range(4), range(1, 5))",
      "zip(range(6), range(6))",
      "zip(range(6), [0] * 6)",
      "zip(range(100), range(99, -1, -1))",
      "zip(range(10), range(9, -1, -1))",
      "zip()",
      "zip(*[])",
      "zip([[]])",
      "zip()",
      "zip(range(5), range(5))",
      "zip(*[])",
      "zip(range(5))",
      "zip(*[(1, 2), 'ab'])",
      "zip([65, 97, 34, 38, 9731, 1053236], ['A', 'a', '\"', '&', '☃', '\\U00101234'])",
      "zip('Hello', 'World')",
      "zip()",
      "zip(range(3), range(1, 7))",
      "zip('AABBBAAAA', range(9))",
      "zip('abcdef', range(3))",
      "zip([])",
      "zip('abc', 'def')",
      "zip('ABCD', 'xy')",
      "zip('abc', range(6))",
      "zip('abcdef')",
      "zip(list('abc') + [None], 'defg')"
    ]
  },
  {
    "name": "collections.Counter",
    "useAsReturn": true,
    "instances": [
      "collections.Counter('abcaba')",
      "collections.Counter('a' * 50 + 'b' * 30)",
      "collections.Counter(iterable=None)",
      "collections.Counter(a=-5, b=0, c=5, d=10, e=15, g=40)",
      "collections.Counter('xyzpdqqdpzyx')",
      "collections.Counter(a=-6, b=-2, c=8, d=0, e=-5, f=-30, g=40, h=50)",
      "collections.Counter('aaabbcd')",
      "collections.Counter(a=3, b=2, c=1)",
      "collections.Counter('abracadabra simsalabim')",
      "collections.Counter('which witch had which witches wrist watch'.split())",
      "collections.Counter(a=2, b=None)",
      "collections.Counter(a=-1, b=0, c=-1, d=1, e=-1)",
      "collections.Counter()",
      "collections.Counter({'a': 3, 'b': 2, 'c': 1})",
      "collections.Counter(iterable=42)",
      "collections.Counter('abracadabra')",
      "collections.Counter(self=42)",
      "collections.Counter(a=1, b=2, c=-3, d=10, e=20, f=30, h=-50)",
      "collections.Counter(a=10, b=-2, c=0)"
    ]
  },
  {
    "name": "collections.OrderedDict",
    "useAsReturn": true,
    "instances": [
      "collections.OrderedDict([('a', 5), ('b', 2), ('r', 2), ('c', 1), ('d', 1)])",
      "collections.OrderedDict([('fname', 'Graham'), ('lname', 'Chapman'), (None, ['Over1',    'Over2'])])",
      "collections.OrderedDict([('FirstName', 'Eric'), ('LastName', 'Idle')])",
      "collections.OrderedDict([('fname', 'Under1'), ('lname', None)])",
      "collections.OrderedDict(j=0, h=88888)",
      "collections.OrderedDict([('FirstName', 'Under1'), ('LastName', None)])",
      "collections.OrderedDict(self=42)",
      "collections.OrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 44), ('e', 55)])",
      "collections.OrderedDict([('x', 1), ('y', 2)])",
      "collections.OrderedDict(other=42)",
      "collections.OrderedDict([('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)])",
      "collections.OrderedDict(a=1, b=2, c=3, d=4, e=5)",
      "collections.OrderedDict()",
      "collections.OrderedDict([('d', 1), ('b', 2), ('c', 3), ('a', 4), ('e', 5)])",
      "collections.OrderedDict([('FirstName', 'Graham'), ('LastName', 'Chapman'), ('OtherInfo',    ['Over1', 'Over2'])])",
      "collections.OrderedDict([('a', 1), ('b', 2), ('c', 9), ('d', 4)], c=3, e=5)",
      "collections.OrderedDict(x=[])",
      "collections.OrderedDict(i=9999, d=4444, c=3333)",
      "collections.OrderedDict([('x', 3), ('y', 4)])",
      "collections.OrderedDict([('FirstName', 'John'), ('LastName', 'Cleese')])",
      "collections.OrderedDict([('fname', 'Eric'), ('lname', 'Idle')])",
      "collections.OrderedDict((('R', 2), ('W', 8), ('X', 32)))",
      "collections.OrderedDict([('FirstName', 'Graham'), ('LastName', 'Chapman'), (None, [    'Over1', 'Over2'])])",
      "collections.OrderedDict([('x', 42), ('y', 2)])",
      "collections.OrderedDict(f=666, b=222, g=777, c=333, h=888)",
      "collections.OrderedDict([('fname', 'John'), ('lname', 'Cleese')])",
      "collections.OrderedDict((('june', 1), ('july', 2), ('august', 3)))",
      "collections.OrderedDict(e=55, b=22)"
    ]
  },
  {
    "name": "collections.defaultdict",
    "useAsReturn": true,
    "instances": [
      "collections.defaultdict(list, foo=1, bar=2)",
      "collections.defaultdict(int)",
      "collections.defaultdict()"
    ]
  },
  {
    "name": "collections.deque",
    "useAsReturn": true,
    "instances": [
      "collections.deque()",
      "collections.deque('efgh')",
      "collections.deque('bcabc')",
      "collections.deque('abcdef', 500)",
      "collections.deque(range(-5125, -5000))",
      "collections.deque(range(200))",
      "collections.deque('ab')",
      "collections.deque(range(10), maxlen=None)",
      "collections.deque('abcdef', maxlen=4)",
      "collections.deque('abdefghcij')",
      "collections.deque([None] * 16)",
      "collections.deque(maxlen=0)",
      "collections.deque(range(0, 10000, 10))",
      "collections.deque('xabc')",
      "collections.deque('gallahad')",
      "collections.deque('ABCDEFGHI')",
      "collections.deque('abc', maxlen=2)",
      "collections.deque('superman')",
      "collections.deque('A' * 3)",
      "collections.deque([1, 2, 3, 4, 5, 6, 7])",
      "collections.deque('abcdef')",
      "collections.deque(range(100))",
      "collections.deque('abcabc')",
      "collections.deque('gh')",
      "collections.deque('abcdefghcij')",
      "collections.deque('abcabcabc')",
      "collections.deque('abc', 3)",
      "collections.deque('abc', maxlen=5)",
      "collections.deque(range(200), maxlen=10)",
      "collections.deque('abc')",
      "collections.deque([1, 2, 3])",
      "collections.deque('abdefghij')",
      "collections.deque(['ab'])",
      "collections.deque('abcdefg')",
      "collections.deque('a', 500)",
      "collections.deque('abc', maxlen=0)",
      "collections.deque('def')",
      "collections.deque(range(200), 100)",
      "collections.deque(range(10), 3)",
      "collections.deque('a')",
      "collections.deque('abc', maxlen=4)"
    ]
  },
  {
    "name": "datetime.date",
    "useAsReturn": true,
    "instances": [
      "datetime.date(1, 1, 1)",
      "datetime.date(1995, 4, 12)",
      "datetime.date(2011, 1, 1)",
      "datetime.date(2002, 3, 4)",
      "datetime.date(1993, 8, 26)",
      "datetime.date(2000, 1, 2)",
      "datetime.date(1970, 1, 1)"
    ]
  },
  {
    "name": "datetime.datetime",
    "useAsReturn": true,
    "instances": [
      "datetime.datetime(2011, 1, 1)",
      "datetime.datetime(1970, 1, 1)",
      "datetime.datetime(2015, 4, 5, 1, 45)",
      "datetime.datetime(1, 1, 1)",
      "datetime.datetime(2014, 11, 2, 1, 30)",
      "datetime.datetime(1, 2, 3, 4, 5, 6, 7)",
      "datetime.datetime(2002, 4, 7, 2)",
      "datetime.datetime(1, 1, 1, fold=1)",
      "datetime.datetime(2010, 1, 1)",
      "datetime.datetime(2011, 1, 1, 12, 30)",
      "datetime.datetime(1993, 8, 26, 22, 12, 55, 99999)",
      "datetime.datetime(1, 4, 1, 2)",
      "datetime.datetime(1995, 4, 12)",
      "datetime.datetime(1, 10, 25, 1)",
      "datetime.datetime(10, 10, 10, 10, 10, 10, 10)",
      "datetime.datetime(2002, 10, 27, 1)"
    ]
  },
  {
    "name": "datetime.time",
    "useAsReturn": true,
    "instances": [
      "datetime.time(fold=1)",
      "datetime.time()",
      "datetime.time(0, fold=1)",
      "datetime.time(22, 12, 55, 99999)",
      "datetime.time(0)",
      "datetime.time(microsecond=40)",
      "datetime.time(18, 45, 3, 1234)",
      "datetime.time(12, 0)",
      "datetime.time(12, 30)"
    ]
  },
  {
    "name": "datetime.timedelta",
    "useAsReturn": true,
    "instances": [
      "datetime.timedelta(days=100, weeks=-7, hours=-24 * (100 - 49), minutes=-3, seconds=12, microseconds=(3 * 60 - 12) * 1000000)",
      "datetime.timedelta(hours=24)",
      "datetime.timedelta(hours=23, minutes=59)",
      "datetime.timedelta(0, 4000, 1)",
      "datetime.timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999)",
      "datetime.timedelta(minutes=1440)",
      "datetime.timedelta(microseconds=1)",
      "datetime.timedelta(minutes=24)",
      "datetime.timedelta(minutes=60)",
      "datetime.timedelta(weeks=13)",
      "datetime.timedelta(minutes=2, seconds=1, microseconds=3)",
      "datetime.timedelta(26, 55, 99999)",
      "datetime.timedelta(seconds=0.5)",
      "datetime.timedelta(minutes=-200)",
      "datetime.timedelta(seconds=30)",
      "datetime.timedelta(days=-999999999)",
      "datetime.timedelta(minutes=-2)",
      "datetime.timedelta(minutes=2 * 1439)",
      "datetime.timedelta(hours=12, minutes=32, seconds=30)",
      "datetime.timedelta(hours=-5)",
      "datetime.timedelta(hours=5)",
      "datetime.timedelta(42)",
      "datetime.timedelta(minutes=23)",
      "datetime.timedelta(minutes=3)",
      "datetime.timedelta(microseconds=-1)",
      "datetime.timedelta(0, 0, 1000)",
      "datetime.timedelta(minutes=1)",
      "datetime.timedelta(days=365)",
      "datetime.timedelta(minutes=0)",
      "datetime.timedelta(microseconds=-81)",
      "datetime.timedelta(hours=9.5)",
      "datetime.timedelta(minutes=2, seconds=30)",
      "datetime.timedelta(hours=-4)",
      "datetime.timedelta(minutes=-300)",
      "datetime.timedelta(days=1, seconds=2, microseconds=3)",
      "datetime.timedelta(hours=2)",
      "datetime.timedelta(0)"
    ]
  },
  {
    "name": "datetime.tzinfo",
    "useAsReturn": true,
    "instances": [
      "datetime.tzinfo()"
    ]
  },
  {
    "name": "_decimal.Decimal",
    "useAsReturn": true,
    "instances": [
      "_decimal.Decimal('22.2')",
      "_decimal.Decimal('1.234e7')",
      "_decimal.Decimal('sNaN')",
      "_decimal.Decimal(3)",
      "_decimal.Decimal('45.34')",
      "_decimal.Decimal('580')",
      "_decimal.Decimal((0, (0,), 0))",
      "_decimal.Decimal('3.4e200')",
      "_decimal.Decimal('1e2')",
      "_decimal.Decimal('2.59')",
      "_decimal.Decimal((1, (0, 0, 0), 37))",
      "_decimal.Decimal(10000)",
      "_decimal.Decimal('10e99999')",
      "_decimal.Decimal(7.5)",
      "_decimal.Decimal('1.1')",
      "_decimal.Decimal(10 ** (19 * 24))",
      "_decimal.Decimal('-inf')",
      "_decimal.Decimal('  3.45679  ')",
      "_decimal.Decimal('1.0e-20')",
      "_decimal.Decimal('-0.8')",
      "_decimal.Decimal('1652.9E100')",
      "_decimal.Decimal('-10')",
      "_decimal.Decimal('0E10')",
      "_decimal.Decimal('2.54')",
      "_decimal.Decimal('15.32')",
      "_decimal.Decimal('-0')",
      "_decimal.Decimal('0.00390625')",
      "_decimal.Decimal(5)",
      "_decimal.Decimal((1, (0, 0, 0), 'N'))",
      "_decimal.Decimal('-3.141590000')",
      "_decimal.Decimal('0')",
      "_decimal.Decimal(45)",
      "_decimal.Decimal('1234e9999')",
      "_decimal.Decimal(2)",
      "_decimal.Decimal('1.634E100')",
      "_decimal.Decimal('4.125')",
      "_decimal.Decimal('4.2084')",
      "_decimal.Decimal('56531E100')",
      "_decimal.Decimal((1, [4, 3, 4, 9, 1, 3, 5, 3, 4], -25))",
      "_decimal.Decimal('9.99')",
      "_decimal.Decimal('45')",
      "_decimal.Decimal('100.0')",
      "_decimal.Decimal('7')",
      "_decimal.Decimal('1.01')",
      "_decimal.Decimal('111')",
      "_decimal.Decimal(2 ** 16)",
      "_decimal.Decimal('0.0012885819')",
      "_decimal.Decimal('1')",
      "_decimal.Decimal(-12)",
      "_decimal.Decimal('1.12345')",
      "_decimal.Decimal('-0.5')",
      "_decimal.Decimal((0, (4, 5, 3, 4), -2))",
      "_decimal.Decimal('-0.4')",
      "_decimal.Decimal('-33.3')",
      "_decimal.Decimal(2 ** 578)",
      "_decimal.Decimal('1.00000001e-20')",
      "_decimal.Decimal('10001111111')",
      "_decimal.Decimal([0, [0], 0])",
      "_decimal.Decimal('INF')",
      "_decimal.Decimal(2 ** 64 + 2 ** 32 - 1)",
      "_decimal.Decimal('4.9712')",
      "_decimal.Decimal('8.392')",
      "_decimal.Decimal('1e-9999')",
      "_decimal.Decimal('9.123')",
      "_decimal.Decimal('1e99')",
      "_decimal.Decimal('1.47e5')",
      "_decimal.Decimal(23)",
      "_decimal.Decimal('3.0')",
      "_decimal.Decimal('152587890625')",
      "_decimal.Decimal('3.1234')",
      "_decimal.Decimal(+45)",
      "_decimal.Decimal(float('nan'))",
      "_decimal.Decimal('32')",
      "_decimal.Decimal('snan123')",
      "_decimal.Decimal(10101)",
      "_decimal.Decimal('28.5')",
      "_decimal.Decimal('0.00')",
      "_decimal.Decimal('11.68')",
      "_decimal.Decimal('99999999999999999999999999.9')",
      "_decimal.Decimal('1_0_0_0')",
      "_decimal.Decimal('5')",
      "_decimal.Decimal('1.00000001e-100')",
      "_decimal.Decimal('0.28')",
      "_decimal.Decimal('NaN')",
      "_decimal.Decimal((0, (), 'F'))",
      "_decimal.Decimal('-NaN')",
      "_decimal.Decimal('9.87654321')",
      "_decimal.Decimal('10912837129')",
      "_decimal.Decimal('1.00000001')",
      "_decimal.Decimal('2E+1')",
      "_decimal.Decimal('-1')",
      "_decimal.Decimal('Nan891287828')",
      "_decimal.Decimal('-11.1')",
      "_decimal.Decimal((1, (), 37))",
      "_decimal.Decimal('1e1')",
      "_decimal.Decimal('NAN')",
      "_decimal.Decimal('9.8765e-12')",
      "_decimal.Decimal(99)",
      "_decimal.Decimal('625')",
      "_decimal.Decimal(200)",
      "_decimal.Decimal(123)",
      "_decimal.Decimal('1.00')",
      "_decimal.Decimal('81.3971')",
      "_decimal.Decimal('123456789.1')",
      "_decimal.Decimal('0.372')",
      "_decimal.Decimal('1.23')",
      "_decimal.Decimal(1234)",
      "_decimal.Decimal('-21.1')",
      "_decimal.Decimal('10901935')",
      "_decimal.Decimal('-0E12')",
      "_decimal.Decimal('Inf')",
      "_decimal.Decimal((0, (0,), 'F'))",
      "_decimal.Decimal('-0.6')",
      "_decimal.Decimal('9e2')",
      "_decimal.Decimal('35.719')",
      "_decimal.Decimal('390625')",
      "_decimal.Decimal(10 ** (19 * 25))",
      "_decimal.Decimal('-2.5')",
      "_decimal.Decimal('3.571')",
      "_decimal.Decimal('1e797')",
      "_decimal.Decimal('1e-425000000')",
      "_decimal.Decimal('188.83E100')",
      "_decimal.Decimal('0.001')",
      "_decimal.Decimal((1, (4, 3, 4, 9, 1, 3, 5, 3, 4), -25))",
      "_decimal.Decimal('100E-425000010')",
      "_decimal.Decimal('1e100000')",
      "_decimal.Decimal('3.5e-2')",
      "_decimal.Decimal('100000000000000000000000000')",
      "_decimal.Decimal('-5')",
      "_decimal.Decimal(11)",
      "_decimal.Decimal('1.0e20')",
      "_decimal.Decimal('1e4')",
      "_decimal.Decimal(1001)",
      "_decimal.Decimal('-4.34913534E-17')",
      "_decimal.Decimal('-23.00000')",
      "_decimal.Decimal('-25e55')",
      "_decimal.Decimal('456789')",
      "_decimal.Decimal('10')",
      "_decimal.Decimal('999.9')",
      "_decimal.Decimal([1, (4, 3, 4, 9, 1, 3, 5, 3, 4), -25])",
      "_decimal.Decimal(0)",
      "_decimal.Decimal('-0.0625')",
      "_decimal.Decimal('9.99e-5')",
      "_decimal.Decimal('256e7')",
      "_decimal.Decimal('1.3E4 \\n')",
      "_decimal.Decimal()",
      "_decimal.Decimal('10.0')",
      "_decimal.Decimal('3.1415926')",
      "_decimal.Decimal(0.1)",
      "_decimal.Decimal('0.25')",
      "_decimal.Decimal('9.8182731e181273')",
      "_decimal.Decimal('16.1')",
      "_decimal.Decimal('nan')",
      "_decimal.Decimal('-3.217160342717258261933904529E-7')",
      "_decimal.Decimal('1e9999')",
      "_decimal.Decimal('0.05')",
      "_decimal.Decimal('25')",
      "_decimal.Decimal(100)",
      "_decimal.Decimal(-2)",
      "_decimal.Decimal('NaN12345')",
      "_decimal.Decimal('1e-99')",
      "_decimal.Decimal('0.' + '9' * 30)",
      "_decimal.Decimal(1221 ** 1271)",
      "_decimal.Decimal('32.9714')",
      "_decimal.Decimal((1, (0, 2, 7, 1), 'F'))",
      "_decimal.Decimal((1, (4, 5), 0))",
      "_decimal.Decimal(50)",
      "_decimal.Decimal([1, [4, 3, 4, 9, 1, 3, 5, 3, 4], -25])",
      "_decimal.Decimal('45e2')",
      "_decimal.Decimal('2.234e2000')",
      "_decimal.Decimal(1000)",
      "_decimal.Decimal('7.33')",
      "_decimal.Decimal('5e3')",
      "_decimal.Decimal('-0.0')",
      "_decimal.Decimal('1.0e-100')",
      "_decimal.Decimal('5.5')",
      "_decimal.Decimal('-75')",
      "_decimal.Decimal('1.2')",
      "_decimal.Decimal('-0.625')",
      "_decimal.Decimal((0, (0, 0, 4, 0, 5, 3, 4), 'n'))",
      "_decimal.Decimal('33.3')",
      "_decimal.Decimal(9)",
      "_decimal.Decimal(4)",
      "_decimal.Decimal('1230E100')",
      "_decimal.Decimal('.000e20')",
      "_decimal.Decimal((0, (0, 0, 4, 0, 5, 3, 4), -2))",
      "_decimal.Decimal(67)",
      "_decimal.Decimal('sNAN')",
      "_decimal.Decimal(float('-inf'))",
      "_decimal.Decimal(123456789000)",
      "_decimal.Decimal('NaN123')",
      "_decimal.Decimal(True)",
      "_decimal.Decimal('5e-3')",
      "_decimal.Decimal('-6.1')",
      "_decimal.Decimal('-25')",
      "_decimal.Decimal('2')",
      "_decimal.Decimal('-1.25')",
      "_decimal.Decimal('0.1')",
      "_decimal.Decimal('1.0')",
      "_decimal.Decimal('90.697E100')",
      "_decimal.Decimal(152587890625)",
      "_decimal.Decimal(10 ** (9 * 24))",
      "_decimal.Decimal('12.7')",
      "_decimal.Decimal('66')",
      "_decimal.Decimal(-100)",
      "_decimal.Decimal('.1')",
      "_decimal.Decimal('7.34')",
      "_decimal.Decimal(float('inf'))",
      "_decimal.Decimal('7.335')",
      "_decimal.Decimal('1.2345')",
      "_decimal.Decimal('0.2')",
      "_decimal.Decimal((0, (4, 5, 3, 4), 'F'))",
      "_decimal.Decimal('Infinity')",
      "_decimal.Decimal('0.871831e800')",
      "_decimal.Decimal('1.00000001e20')",
      "_decimal.Decimal('3.1415')",
      "_decimal.Decimal('-Inf')",
      "_decimal.Decimal('-nan')",
      "_decimal.Decimal(456)",
      "_decimal.Decimal('194')",
      "_decimal.Decimal('0.025')",
      "_decimal.Decimal('snan')",
      "_decimal.Decimal(567)",
      "_decimal.Decimal('9.8765e12')",
      "_decimal.Decimal('3.1')",
      "_decimal.Decimal('-1.5')",
      "_decimal.Decimal('inf')",
      "_decimal.Decimal('1.3')",
      "_decimal.Decimal('-4.5678E50')",
      "_decimal.Decimal(5 ** 2659)",
      "_decimal.Decimal('33e+33')",
      "_decimal.Decimal('1e-100000')",
      "_decimal.Decimal(float('-0.0'))",
      "_decimal.Decimal('1.23456789')",
      "_decimal.Decimal('1e-10')",
      "_decimal.Decimal(12)",
      "_decimal.Decimal('nan123')",
      "_decimal.Decimal('0.0')",
      "_decimal.Decimal('-0.000')",
      "_decimal.Decimal('152587890625e7')",
      "_decimal.Decimal('-16.1')",
      "_decimal.Decimal('0.333333333333333333')",
      "_decimal.Decimal(-1)",
      "_decimal.Decimal('43.24')",
      "_decimal.Decimal('9.9')",
      "_decimal.Decimal('3.1416')",
      "_decimal.Decimal('2.1')",
      "_decimal.Decimal('16807')",
      "_decimal.Decimal('62.4802')",
      "_decimal.Decimal('-15')",
      "_decimal.Decimal(500000123)",
      "_decimal.Decimal('-38.3')",
      "_decimal.Decimal('0.333333333333333333333333')",
      "_decimal.Decimal('1e425000000')",
      "_decimal.Decimal('1.5')",
      "_decimal.Decimal(768)",
      "_decimal.Decimal(10 ** (9 * 25))",
      "_decimal.Decimal((1, (), 'n'))",
      "_decimal.Decimal('11.1')",
      "_decimal.Decimal('0.01')",
      "_decimal.Decimal(-45)",
      "_decimal.Decimal('9.99e10')",
      "_decimal.Decimal('1e-3')",
      "_decimal.Decimal('100000000.123')",
      "_decimal.Decimal('0.5')",
      "_decimal.Decimal('3')",
      "_decimal.Decimal(1)",
      "_decimal.Decimal(10)",
      "_decimal.Decimal('20')",
      "_decimal.Decimal('0.1234')",
      "_decimal.Decimal('-Infinity')",
      "_decimal.Decimal('.01')",
      "_decimal.Decimal('23.42')",
      "_decimal.Decimal('  -7.89')",
      "_decimal.Decimal(False)",
      "_decimal.Decimal('1_3.3e4_0')",
      "_decimal.Decimal('2.234e-2000')",
      "_decimal.Decimal('-1E+1')",
      "_decimal.Decimal('1.50001')",
      "_decimal.Decimal('8.71E+799')",
      "_decimal.Decimal('20.686')"
    ]
  }
]
