import com.jetbrains.rd.generator.gradle.RdGenExtension
import com.jetbrains.rd.generator.gradle.RdGenTask

plugins {
    id 'com.jetbrains.rdgen' version "2022.2.5"
}
apply from: "${parent.projectDir}/gradle/include/jvm-project.gradle"

dependencies {
    implementation project(':utbot-framework-api')
    implementation project(':utbot-rd')

    implementation group: 'org.ow2.asm', name: 'asm', version: asm_version
    implementation group: 'org.ow2.asm', name: 'asm-commons', version: asm_version
    implementation group: 'com.esotericsoftware', name: 'kryo', version: kryo_version
    // this is necessary for serialization of some collections
    implementation group: 'de.javakaffee', name: 'kryo-serializers', version: kryo_serializers_version
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlin_logging_version

    // todo on kotlin 1.7 move to 2022.3+
    implementation group: 'com.jetbrains.rd', name: 'rd-framework', version: '2022.2.5'
    implementation group: 'com.jetbrains.rd', name: 'rd-gen', version: '2022.2.5'
    implementation group: 'com.jetbrains.rd', name: 'rd-core', version: '2022.2.5'

    implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '5.5.0'


    // TODO: this is necessary for inline classes mocking in UtExecutionInstrumentation
    implementation group: 'org.mockito', name: 'mockito-core', version: '4.2.0'
    implementation group: 'org.mockito', name: 'mockito-inline', version: '4.2.0'
}

jar {
    manifest {
        attributes (
                'Main-Class': 'org.utbot.instrumentation.process.ChildProcessKt',
                'Premain-Class': 'org.utbot.instrumentation.agent.Agent',
        )
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

configurations {
    instrumentationArchive
}

artifacts {
    instrumentationArchive jar
}

def repoRoot = project.projectDir
def hashBaseDir = new File(repoRoot, "build/rdgen")
def rdBaseDir = new File(repoRoot, "src/main/kotlin/org/utbot/instrumentation/rd")
def rdOutputDir = new File(rdBaseDir, "generated")

task generateProtocolModels(type: RdGenTask) {
    group = "rdgen"
    // todo which extensions
    def rdParams = extensions.getByName("params") as RdGenExtension
    rdParams.verbose = true

    rdParams.sources(new File(rdBaseDir, "models"))
    rdParams.hashFolder = new File(hashBaseDir, "models").canonicalPath
    rdParams.packages = "org.utbot.instrumentation.rd.models"

    rdParams.generator {
        language = "kotlin"
        transform = "symmetric"
        root = "org.utbot.instrumentation.rd.models.ProtocolRoot"

        directory = rdOutputDir.canonicalPath
        namespace = "org.utbot.instrumentation.rd.generated"
    }
}